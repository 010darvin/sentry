{"version":3,"file":"chunks/app_views_alerts_rules_metric_types_tsx-app_views_projectInstall_newProject_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/slugify.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/views/alerts/rules/metric/types.tsx","webpack:///./app/views/projectInstall/createProject.tsx","webpack:///./app/views/projectInstall/newProject.tsx"],"sourcesContent":["// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {Team} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport useTeams from 'sentry/utils/useTeams';\n\ntype InjectedTeamsProps = {\n  teams?: Team[];\n};\n\n/**\n * Higher order component that provides a list of teams\n *\n * @deprecated Prefer `useTeams` or `<Teams />`.\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) => {\n  const WithTeams: React.FC<\n    Omit<P, keyof InjectedTeamsProps> & InjectedTeamsProps\n  > = props => {\n    const {teams} = useTeams();\n    return <WrappedComponent teams={teams} {...(props as P)} />;\n  };\n\n  WithTeams.displayName = `withTeams(${getDisplayName(WrappedComponent)})`;\n\n  return WithTeams;\n};\n\nexport default withTeams;\n","import {t} from 'sentry/locale';\nimport {MEPAlertsQueryType} from 'sentry/views/alerts/wizard/options';\nimport type {SchemaFormConfig} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\n\nimport type {Incident} from '../../types';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleTriggerType {\n  CRITICAL = 'critical',\n  WARNING = 'warning',\n  RESOLVE = 'resolve',\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n  PERCENT = 'percent',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  /** Also used for performance alerts **/\n  GENERIC_METRICS = 'generic_metrics',\n  SESSIONS = 'sessions',\n  /** Also used for crash free alerts */\n  METRICS = 'metrics',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: AlertRuleTriggerType;\n  // UnsavedTrigger can be a part of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedMetricRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n  queryType?: MEPAlertsQueryType | null;\n};\n\nexport interface SavedMetricRule extends UnsavedMetricRule {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  errors?: {detail: string}[];\n  /**\n   * Returned with the expand=latestIncident query parameter\n   */\n  latestIncident?: Incident | null;\n  originalAlertRuleId?: number | null;\n}\n\nexport type MetricRule = Partial<SavedMetricRule> & UnsavedMetricRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  // \\u200B is needed because Safari disregards autocomplete=\"off\". It's seeing \"Email\" and\n  // opening up the browser autocomplete for email. https://github.com/JedWatson/react-select/issues/3500\n  [ActionType.EMAIL]: t('Emai\\u200Bl'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   *  Could not fetch details from SentryApp. Show the rule but make it disabled.\n   */\n  disabled?: boolean;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import {Component, Fragment} from 'react';\n// eslint-disable-next-line no-restricted-imports\nimport {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {PlatformIcon} from 'platformicons';\n\nimport {openCreateTeamModal} from 'sentry/actionCreators/modal';\nimport ProjectActions from 'sentry/actions/projectActions';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport TeamSelector from 'sentry/components/forms/teamSelector';\nimport PageHeading from 'sentry/components/pageHeading';\nimport PlatformPicker from 'sentry/components/platformPicker';\nimport categoryList from 'sentry/data/platformCategories';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {inputStyles} from 'sentry/styles/input';\nimport space from 'sentry/styles/space';\nimport {Organization, Team} from 'sentry/types';\nimport {logExperiment} from 'sentry/utils/analytics';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport getPlatformName from 'sentry/utils/getPlatformName';\nimport slugify from 'sentry/utils/slugify';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withTeams from 'sentry/utils/withTeams';\nimport IssueAlertOptions from 'sentry/views/projectInstall/issueAlertOptions';\n\nimport {PRESET_AGGREGATES} from '../alerts/rules/metric/presets';\n\nconst getCategoryName = (category?: string) =>\n  categoryList.find(({id}) => id === category)?.id;\n\ntype Props = WithRouterProps & {\n  api: any;\n  organization: Organization;\n  teams: Team[];\n};\n\ntype PlatformName = React.ComponentProps<typeof PlatformIcon>['platform'];\ntype IssueAlertFragment = Parameters<\n  React.ComponentProps<typeof IssueAlertOptions>['onChange']\n>[0];\n\ntype State = {\n  dataFragment: IssueAlertFragment | undefined;\n  error: boolean;\n  inFlight: boolean;\n  platform: PlatformName | null;\n  projectName: string;\n  team: string;\n};\n\nclass CreateProject extends Component<Props, State> {\n  constructor(props: Props, context) {\n    super(props, context);\n\n    const {teams, location} = props;\n    const {query} = location;\n    const accessTeams = teams.filter((team: Team) => team.hasAccess);\n\n    const team = query.team || (accessTeams.length && accessTeams[0].slug);\n    const platform = getPlatformName(query.platform) ? query.platform : '';\n\n    this.state = {\n      error: false,\n      projectName: getPlatformName(platform) || '',\n      team,\n      platform,\n      inFlight: false,\n      dataFragment: undefined,\n    };\n  }\n\n  componentDidMount() {\n    trackAdvancedAnalyticsEvent('project_creation_page.viewed', {\n      organization: this.props.organization,\n    });\n    logExperiment({\n      key: 'MetricAlertOnProjectCreationExperiment',\n      organization: this.props.organization,\n    });\n  }\n\n  get defaultCategory() {\n    const {query} = this.props.location;\n    return getCategoryName(query.category);\n  }\n\n  renderProjectForm() {\n    const {organization} = this.props;\n    const {projectName, platform, team} = this.state;\n\n    const createProjectForm = (\n      <CreateProjectForm onSubmit={this.createProject}>\n        <div>\n          <FormLabel>{t('Project name')}</FormLabel>\n          <ProjectNameInput>\n            <StyledPlatformIcon platform={platform ?? ''} />\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder={t('project-name')}\n              autoComplete=\"off\"\n              value={projectName}\n              onChange={e => this.setState({projectName: slugify(e.target.value)})}\n            />\n          </ProjectNameInput>\n        </div>\n        <div>\n          <FormLabel>{t('Team')}</FormLabel>\n          <TeamSelectInput>\n            <TeamSelector\n              name=\"select-team\"\n              menuPlacement=\"auto\"\n              clearable={false}\n              value={team}\n              placeholder={t('Select a Team')}\n              onChange={choice => this.setState({team: choice.value})}\n              teamFilter={(filterTeam: Team) => filterTeam.hasAccess}\n            />\n            <Button\n              borderless\n              data-test-id=\"create-team\"\n              type=\"button\"\n              icon={<IconAdd isCircled />}\n              onClick={() =>\n                openCreateTeamModal({\n                  organization,\n                  onClose: ({slug}) => this.setState({team: slug}),\n                })\n              }\n              title={t('Create a team')}\n              aria-label={t('Create a team')}\n            />\n          </TeamSelectInput>\n        </div>\n        <div>\n          <Button\n            data-test-id=\"create-project\"\n            priority=\"primary\"\n            disabled={!this.canSubmitForm}\n          >\n            {t('Create Project')}\n          </Button>\n        </div>\n      </CreateProjectForm>\n    );\n\n    return (\n      <Fragment>\n        <PageHeading withMargins>{t('Give your project a name')}</PageHeading>\n        {createProjectForm}\n      </Fragment>\n    );\n  }\n\n  get canSubmitForm() {\n    const {projectName, team, inFlight} = this.state;\n    const {shouldCreateCustomRule, conditions} = this.state.dataFragment || {};\n\n    return (\n      !inFlight &&\n      team &&\n      projectName !== '' &&\n      (!shouldCreateCustomRule || conditions?.every?.(condition => condition.value))\n    );\n  }\n\n  createProject = async e => {\n    e.preventDefault();\n    const {organization, api} = this.props;\n    const {projectName, platform, team, dataFragment} = this.state;\n    const {slug} = organization;\n    const {\n      shouldCreateCustomRule,\n      name,\n      conditions,\n      actions,\n      actionMatch,\n      frequency,\n      defaultRules,\n      metricAlertPresets,\n    } = dataFragment || {};\n\n    this.setState({inFlight: true});\n\n    if (!projectName) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureMessage('No project name');\n      });\n    }\n\n    try {\n      const projectData = await api.requestPromise(`/teams/${slug}/${team}/projects/`, {\n        method: 'POST',\n        data: {\n          name: projectName,\n          platform,\n          default_rules: defaultRules ?? true,\n        },\n      });\n\n      let ruleId: string | undefined;\n      if (shouldCreateCustomRule) {\n        const ruleData = await api.requestPromise(\n          `/projects/${organization.slug}/${projectData.slug}/rules/`,\n          {\n            method: 'POST',\n            data: {\n              name,\n              conditions,\n              actions,\n              actionMatch,\n              frequency,\n            },\n          }\n        );\n        ruleId = ruleData.id;\n      }\n      if (\n        !!organization.experiments.MetricAlertOnProjectCreationExperiment &&\n        metricAlertPresets &&\n        metricAlertPresets.length > 0\n      ) {\n        const presets = PRESET_AGGREGATES.filter(aggregate =>\n          metricAlertPresets.includes(aggregate.id)\n        );\n        const teamObj = this.props.teams.find(aTeam => aTeam.slug === team);\n        await Promise.all([\n          presets.map(preset => {\n            const context = preset.makeUnqueriedContext(\n              {\n                ...projectData,\n                teams: teamObj ? [teamObj] : [],\n              },\n              organization\n            );\n\n            return api.requestPromise(\n              `/projects/${organization.slug}/${projectData.slug}/alert-rules/?referrer=create_project`,\n              {\n                method: 'POST',\n                data: {\n                  aggregate: context.aggregate,\n                  comparisonDelta: context.comparisonDelta,\n                  dataset: context.dataset,\n                  eventTypes: context.eventTypes,\n                  name: context.name,\n                  owner: null,\n                  projectId: projectData.id,\n                  projects: [projectData.slug],\n                  query: '',\n                  resolveThreshold: null,\n                  thresholdPeriod: 1,\n                  thresholdType: context.thresholdType,\n                  timeWindow: context.timeWindow,\n                  triggers: context.triggers,\n                },\n              }\n            );\n          }),\n        ]);\n      }\n      trackAdvancedAnalyticsEvent('project_creation_page.created', {\n        organization,\n        metric_alerts: (metricAlertPresets || []).join(','),\n        issue_alert: defaultRules\n          ? 'Default'\n          : shouldCreateCustomRule\n          ? 'Custom'\n          : 'No Rule',\n        project_id: projectData.id,\n        rule_id: ruleId || '',\n      });\n\n      ProjectActions.createSuccess(projectData);\n      const platformKey = platform || 'other';\n      const nextUrl = `/${organization.slug}/${projectData.slug}/getting-started/${platformKey}/`;\n      browserHistory.push(nextUrl);\n    } catch (err) {\n      this.setState({\n        inFlight: false,\n        error: err.responseJSON.detail,\n      });\n\n      // Only log this if the error is something other than:\n      // * The user not having access to create a project, or,\n      // * A project with that slug already exists\n      if (err.status !== 403 && err.status !== 409) {\n        Sentry.withScope(scope => {\n          scope.setExtra('err', err);\n          scope.setExtra('props', this.props);\n          scope.setExtra('state', this.state);\n          Sentry.captureMessage('Project creation failed');\n        });\n      }\n    }\n  };\n\n  setPlatform = (platformId: PlatformName | null) =>\n    this.setState(({projectName, platform}: State) => ({\n      platform: platformId,\n      projectName:\n        !projectName || (platform && getPlatformName(platform) === projectName)\n          ? getPlatformName(platformId) || ''\n          : projectName,\n    }));\n\n  render() {\n    const {platform, error} = this.state;\n\n    return (\n      <Fragment>\n        {error && <Alert type=\"error\">{error}</Alert>}\n\n        <div data-test-id=\"onboarding-info\">\n          <PageHeading withMargins>{t('Create a new Project')}</PageHeading>\n          <HelpText>\n            {t(\n              `Projects allow you to scope error and transaction events to a specific\n               application in your organization. For example, you might have separate\n               projects for your API server and frontend client.`\n            )}\n          </HelpText>\n          <PageHeading withMargins>{t('Choose a platform')}</PageHeading>\n          <PlatformPicker\n            platform={platform}\n            defaultCategory={this.defaultCategory}\n            setPlatform={this.setPlatform}\n            organization={this.props.organization}\n            showOther\n          />\n          <IssueAlertOptions\n            onChange={updatedData => {\n              this.setState({dataFragment: updatedData});\n            }}\n          />\n          {this.renderProjectForm()}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\n// TODO(davidenwang): change to functional component and replace withTeams with useTeams\nexport default withApi(withRouter(withOrganization(withTeams(CreateProject))));\nexport {CreateProject};\n\nconst CreateProjectForm = styled('form')`\n  display: grid;\n  grid-template-columns: 300px minmax(250px, max-content) max-content;\n  gap: ${space(2)};\n  align-items: end;\n  padding: ${space(3)} 0;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n  background: ${p => p.theme.background};\n`;\n\nconst FormLabel = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  margin-right: ${space(1)};\n`;\n\nconst ProjectNameInput = styled('div')`\n  ${p => inputStyles(p)};\n  padding: 5px 10px;\n  display: flex;\n  align-items: center;\n\n  input {\n    background: ${p => p.theme.background};\n    border: 0;\n    outline: 0;\n    flex: 1;\n  }\n`;\n\nconst TeamSelectInput = styled('div')`\n  display: grid;\n  gap: ${space(1)};\n  grid-template-columns: 1fr min-content;\n  align-items: center;\n`;\n\nconst HelpText = styled('p')`\n  color: ${p => p.theme.subText};\n  max-width: 760px;\n`;\n","import styled from '@emotion/styled';\n\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport space from 'sentry/styles/space';\nimport CreateProject from 'sentry/views/projectInstall/createProject';\n\nconst NewProject = () => (\n  <SentryDocumentTitle>\n    <Container>\n      <div className=\"container\">\n        <Content>\n          <CreateProject />\n        </Content>\n      </div>\n    </Container>\n  </SentryDocumentTitle>\n);\n\nconst Container = styled('div')`\n  flex: 1;\n  background: ${p => p.theme.background};\n`;\n\nconst Content = styled('div')`\n  margin-top: ${space(3)};\n`;\n\nexport default NewProject;\n"],"names":["slugify","str","toLowerCase","replace","getDisplayName","useTeams","withTeams","WrappedComponent","WithTeams","props","teams","displayName","t","AlertRuleThresholdType","AlertRuleTriggerType","AlertRuleComparisonType","Dataset","EventTypes","Datasource","SessionsAggregate","TimePeriod","TimeWindow","ActionType","ActionLabel","EMAIL","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","TargetType","TargetLabel","USER","TEAM","Component","Fragment","browserHistory","withRouter","Sentry","PlatformIcon","openCreateTeamModal","ProjectActions","Alert","Button","TeamSelector","PageHeading","PlatformPicker","categoryList","IconAdd","inputStyles","space","logExperiment","trackAdvancedAnalyticsEvent","getPlatformName","withApi","withOrganization","IssueAlertOptions","PRESET_AGGREGATES","getCategoryName","category","find","id","CreateProject","constructor","context","e","preventDefault","organization","api","projectName","platform","team","dataFragment","state","slug","shouldCreateCustomRule","name","conditions","actions","actionMatch","frequency","defaultRules","metricAlertPresets","setState","inFlight","withScope","scope","setExtra","captureMessage","projectData","requestPromise","method","data","default_rules","ruleId","ruleData","experiments","MetricAlertOnProjectCreationExperiment","length","presets","filter","aggregate","includes","teamObj","aTeam","Promise","all","map","preset","makeUnqueriedContext","comparisonDelta","dataset","eventTypes","owner","projectId","projects","query","resolveThreshold","thresholdPeriod","thresholdType","timeWindow","triggers","metric_alerts","join","issue_alert","project_id","rule_id","createSuccess","platformKey","nextUrl","push","err","error","responseJSON","detail","status","platformId","location","accessTeams","hasAccess","undefined","componentDidMount","key","defaultCategory","renderProjectForm","createProjectForm","createProject","target","value","choice","filterTeam","onClose","canSubmitForm","every","condition","render","setPlatform","updatedData","CreateProjectForm","p","theme","background","FormLabel","fontSizeExtraLarge","StyledPlatformIcon","ProjectNameInput","TeamSelectInput","HelpText","subText","SentryDocumentTitle","NewProject","Container","Content"],"sourceRoot":""}