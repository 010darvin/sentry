{"version":3,"file":"chunks/app_locale_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/locale.tsx","webpack:///./app/utils/createStorage.tsx","webpack:///./app/utils/localStorage.tsx"],"sourcesContent":["import {cloneElement, Fragment, isValidElement} from 'react';\nimport * as Sentry from '@sentry/react';\nimport Jed from 'jed';\nimport isObject from 'lodash/isObject';\nimport isString from 'lodash/isString';\nimport {sprintf} from 'sprintf-js';\n\nimport localStorage from 'sentry/utils/localStorage';\n\nconst markerStyles = {\n  background: '#ff801790',\n  outline: '2px solid #ff801790',\n};\n\nconst LOCALE_DEBUG = localStorage.getItem('localeDebug') === '1';\n\nexport const DEFAULT_LOCALE_DATA = {\n  '': {\n    domain: 'sentry',\n    lang: 'en',\n    plural_forms: 'nplurals=2; plural=(n != 1);',\n  },\n};\n\nexport function setLocaleDebug(value: boolean) {\n  localStorage.setItem('localeDebug', value ? '1' : '0');\n  // eslint-disable-next-line no-console\n  console.log(`Locale debug is: ${value ? 'on' : 'off'}. Reload page to apply changes!`);\n}\n\n/**\n * Toggles the locale debug flag in local storage, but does _not_ reload the\n * page. The caller should do this.\n */\nexport function toggleLocaleDebug() {\n  const currentValue = localStorage.getItem('localeDebug');\n  setLocaleDebug(currentValue !== '1');\n}\n\n/**\n * Global Jed locale object loaded with translations via setLocale\n */\nlet i18n: Jed | null = null;\n\n/**\n * Set the current application locale.\n *\n * NOTE: This MUST be called early in the application before calls to any\n * translation functions, as this mutates a singleton translation object used\n * to lookup translations at runtime.\n */\nexport function setLocale(translations: any) {\n  i18n = new Jed({\n    domain: 'sentry',\n    missing_key_callback: () => {},\n    locale_data: {\n      sentry: translations,\n    },\n  });\n\n  return i18n;\n}\n\ntype FormatArg = ComponentMap | React.ReactNode;\n\n/**\n * Helper to return the i18n client, and initialize for the default locale (English)\n * if it has otherwise not been initialized.\n */\nfunction getClient(): Jed | null {\n  if (!i18n) {\n    // If this happens, it could mean that an import was added/changed where\n    // locale initialization does not happen soon enough.\n    const warning = new Error('Locale not set, defaulting to English');\n    console.error(warning); // eslint-disable-line no-console\n    Sentry.captureException(warning);\n    return setLocale(DEFAULT_LOCALE_DATA);\n  }\n\n  return i18n;\n}\n\n/**\n * printf style string formatting which render as react nodes.\n */\nfunction formatForReact(formatString: string, args: FormatArg[]): React.ReactNode[] {\n  const nodes: React.ReactNode[] = [];\n  let cursor = 0;\n\n  // always re-parse, do not cache, because we change the match\n  sprintf.parse(formatString).forEach((match: any, idx: number) => {\n    if (isString(match)) {\n      nodes.push(match);\n      return;\n    }\n\n    let arg: FormatArg = null;\n\n    if (match[2]) {\n      arg = (args[0] as ComponentMap)[match[2][0]];\n    } else if (match[1]) {\n      arg = args[parseInt(match[1], 10) - 1];\n    } else {\n      arg = args[cursor++];\n    }\n\n    // this points to a react element!\n    if (isValidElement(arg)) {\n      nodes.push(cloneElement(arg, {key: idx}));\n    } else {\n      // Not a react element, massage it so that sprintf.format can format it\n      // for us.  We make sure match[2] is null so that we do not go down the\n      // object path, and we set match[1] to the first index and then pass an\n      // array with two items in.\n      match[2] = null;\n      match[1] = 1;\n      nodes.push(<span key={idx++}>{sprintf.format([match], [null, arg])}</span>);\n    }\n  });\n\n  return nodes;\n}\n\n/**\n * Determine if any arguments include React elements.\n */\nfunction argsInvolveReact(args: FormatArg[]): boolean {\n  if (args.some(isValidElement)) {\n    return true;\n  }\n\n  if (args.length !== 1 || !isObject(args[0])) {\n    return false;\n  }\n\n  const componentMap = args[0] as ComponentMap;\n\n  return Object.keys(componentMap).some(key => isValidElement(componentMap[key]));\n}\n\n/**\n * Parse template strings will be parsed into an array of TemplateSubvalue's,\n * this represents either a portion of the string, or a object with the group\n * key indicating the group to lookup the group value in.\n */\ntype TemplateSubvalue = string | {group: string};\n\n/**\n * ParsedTemplate is a mapping of group names to Template Subvalue arrays.\n */\ntype ParsedTemplate = {[group: string]: TemplateSubvalue[]};\n\n/**\n * ComponentMap maps template group keys to react node instances.\n *\n * NOTE: template group keys that include additional sub values (e.g.\n * [groupName:this string is the sub value]) will override the mapped react\n * nodes children prop.\n *\n * In the above example the component map of {groupName: <strong>text</strong>}\n * will be translated to `<strong>this string is the sub value</strong>`.\n */\ntype ComponentMap = {[group: string]: React.ReactNode};\n\n/**\n * Parses a template string into groups.\n *\n * The top level group will be keyed as `root`. All other group names will have\n * been extracted from the template string.\n */\nexport function parseComponentTemplate(template: string): ParsedTemplate {\n  const parsed: ParsedTemplate = {};\n\n  function process(startPos: number, group: string, inGroup: boolean) {\n    const regex = /\\[(.*?)(:|\\])|\\]/g;\n    const buf: TemplateSubvalue[] = [];\n\n    let satisfied = false;\n    let match: ReturnType<typeof regex.exec>;\n\n    let pos = (regex.lastIndex = startPos);\n\n    // eslint-disable-next-line no-cond-assign\n    while ((match = regex.exec(template)) !== null) {\n      const substr = template.substr(pos, match.index - pos);\n      if (substr !== '') {\n        buf.push(substr);\n      }\n\n      const [fullMatch, groupName, closeBraceOrValueSeparator] = match;\n\n      if (fullMatch === ']') {\n        if (inGroup) {\n          satisfied = true;\n          break;\n        } else {\n          pos = regex.lastIndex;\n          continue;\n        }\n      }\n\n      if (closeBraceOrValueSeparator === ']') {\n        pos = regex.lastIndex;\n      } else {\n        pos = regex.lastIndex = process(regex.lastIndex, groupName, true);\n      }\n      buf.push({group: groupName});\n    }\n\n    let endPos = regex.lastIndex;\n    if (!satisfied) {\n      const rest = template.substr(pos);\n      if (rest) {\n        buf.push(rest);\n      }\n      endPos = template.length;\n    }\n\n    parsed[group] = buf;\n    return endPos;\n  }\n\n  process(0, 'root', false);\n\n  return parsed;\n}\n\n/**\n * Renders a parsed template into a React tree given a ComponentMap to use for\n * the parsed groups.\n */\nexport function renderTemplate(\n  template: ParsedTemplate,\n  components: ComponentMap\n): React.ReactNode {\n  let idx = 0;\n\n  function renderGroup(groupKey: string) {\n    const children: React.ReactNode[] = [];\n    const group = template[groupKey] || [];\n\n    for (const item of group) {\n      if (isString(item)) {\n        children.push(<span key={idx++}>{item}</span>);\n      } else {\n        children.push(renderGroup(item.group));\n      }\n    }\n\n    // In case we cannot find our component, we call back to an empty\n    // span so that stuff shows up at least.\n    let reference = components[groupKey] ?? <span key={idx++} />;\n\n    if (!isValidElement(reference)) {\n      reference = <span key={idx++}>{reference}</span>;\n    }\n\n    const element = reference as React.ReactElement;\n\n    return children.length === 0\n      ? cloneElement(element, {key: idx++})\n      : cloneElement(element, {key: idx++}, children);\n  }\n\n  return <Fragment>{renderGroup('root')}</Fragment>;\n}\n\n/**\n * mark is used to debug translations by visually marking translated strings.\n *\n * NOTE: This is a no-op and will return the node if LOCALE_DEBUG is not\n * currently enabled. See setLocaleDebug and toggleLocaleDebug.\n */\nfunction mark(node: React.ReactNode): string {\n  if (!LOCALE_DEBUG) {\n    return node as string;\n  }\n\n  // TODO(epurkhiser): Explain why we manually create a react node and assign\n  // the toString function. This could likely also use better typing, but will\n  // require some understanding of reacts internal types.\n  const proxy = {\n    $$typeof: Symbol.for('react.element'),\n    type: 'span',\n    key: null,\n    ref: null,\n    props: {\n      style: markerStyles,\n      children: Array.isArray(node) ? node : [node],\n    },\n    _owner: null,\n    _store: {},\n  };\n\n  proxy.toString = () => '✅' + node + '✅';\n  return proxy as unknown as string;\n}\n\n/**\n * sprintf style string formatting. Does not handle translations.\n *\n * See the sprintf-js library [0] for specifics on the argument\n * parameterization format.\n *\n * [0]: https://github.com/alexei/sprintf.js\n */\nexport function format(formatString: string, args: FormatArg[]): React.ReactNode {\n  if (argsInvolveReact(args)) {\n    return formatForReact(formatString, args);\n  }\n\n  return sprintf(formatString, ...args) as string;\n}\n\n/**\n * Translates a string to the current locale.\n *\n * See the sprintf-js library [0] for specifics on the argument\n * parameterization format.\n *\n * [0]: https://github.com/alexei/sprintf.js\n */\nexport function gettext(string: string, ...args: FormatArg[]): string {\n  const val: string = getClient().gettext(string);\n\n  if (args.length === 0) {\n    return mark(val);\n  }\n\n  // XXX(ts): It IS possible to use gettext in such a way that it will return a\n  // React.ReactNodeArray, however we currently rarely (if at all) use it in\n  // this way, and usually just expect strings back.\n  return mark(format(val, args));\n}\n\n/**\n * Translates a singular and plural string to the current locale. Supports\n * argument parameterization, and will use the first argument as the counter to\n * determine which message to use.\n *\n * See the sprintf-js library [0] for specifics on the argument\n * parameterization format.\n *\n * [0]: https://github.com/alexei/sprintf.js\n */\nexport function ngettext(singular: string, plural: string, ...args: FormatArg[]): string {\n  let countArg = 0;\n\n  if (args.length > 0) {\n    countArg = Math.abs(args[0] as number) || 0;\n\n    // `toLocaleString` will render `999` as `\"999\"` but `9999` as `\"9,999\"`. This means that any call with `tn` or `ngettext` cannot use `%d` in the codebase but has to use `%s`.\n    // This means a string is always being passed in as an argument, but `sprintf-js` implicitly coerces strings that can be parsed as integers into an integer.\n    // This would break under any locale that used different formatting and other undesirable behaviors.\n    if ((singular + plural).includes('%d')) {\n      // eslint-disable-next-line no-console\n      console.error(new Error('You should not use %d within tn(), use %s instead'));\n    } else {\n      args = [countArg.toLocaleString(), ...args.slice(1)];\n    }\n  }\n\n  // XXX(ts): See XXX in gettext.\n  return mark(format(getClient().ngettext(singular, plural, countArg), args) as string);\n}\n\n/**\n * special form of gettext where you can render nested react components in\n * template strings.\n *\n * ```jsx\n * gettextComponentTemplate('Welcome. Click [link:here]', {\n *   root: <p/>,\n *   link: <a href=\"#\" />,\n * });\n * ```\n *\n * The root string is always called \"root\", the rest is prefixed with the name\n * in the brackets\n *\n * You may recursively nest additional groups within the grouped string values.\n */\nexport function gettextComponentTemplate(\n  template: string,\n  components: ComponentMap\n): string {\n  const parsedTemplate = parseComponentTemplate(getClient().gettext(template));\n  return mark(renderTemplate(parsedTemplate, components));\n}\n\n/**\n * Shorthand versions should primarily be used.\n */\nexport {gettext as t, gettextComponentTemplate as tct, ngettext as tn};\n","// Noop storage for instances where storage is not available\nconst noopStorage: Storage = {\n  length: 0,\n  // Returns null if index does not exist:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Storage/key\n  key(_index: number) {\n    return null;\n  },\n  setItem() {\n    return;\n  },\n  clear() {\n    return undefined;\n  },\n  // Returns null if key doesn't exist:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem\n  getItem() {\n    return null;\n  },\n  removeItem() {\n    return null;\n  },\n};\n\n// Returns a storage wrapper by trying to perform a single storage op.\n// This asserts that storage is both available and that it can be used.\n// See https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\nconst STORAGE_TEST_KEY = 'sentry';\nexport default function createStorage(getStorage: () => Storage): Storage {\n  try {\n    const storage = getStorage();\n\n    // Test if a value can be set into the storage.\n    // This can fail in cases where storage may be full or not available.\n    storage.setItem(STORAGE_TEST_KEY, STORAGE_TEST_KEY);\n    storage.removeItem(STORAGE_TEST_KEY);\n\n    // If we can set and remove a value, we can use it.\n    return storage;\n  } catch (e) {\n    return noopStorage;\n  }\n}\n","import createLocalStorage from './createStorage';\n\nconst Storage = createLocalStorage(() => window.localStorage);\n\nexport default Storage;\n"],"names":["cloneElement","Fragment","isValidElement","Sentry","Jed","isObject","isString","sprintf","localStorage","markerStyles","background","outline","LOCALE_DEBUG","getItem","DEFAULT_LOCALE_DATA","domain","lang","plural_forms","setLocaleDebug","value","setItem","console","log","toggleLocaleDebug","currentValue","i18n","setLocale","translations","missing_key_callback","locale_data","sentry","getClient","warning","Error","error","captureException","formatForReact","formatString","args","nodes","cursor","parse","forEach","match","idx","push","arg","parseInt","key","format","argsInvolveReact","some","length","componentMap","Object","keys","parseComponentTemplate","template","parsed","process","startPos","group","inGroup","regex","buf","satisfied","pos","lastIndex","exec","substr","index","fullMatch","groupName","closeBraceOrValueSeparator","endPos","rest","renderTemplate","components","renderGroup","groupKey","children","item","reference","element","mark","node","proxy","$$typeof","Symbol","for","type","ref","props","style","Array","isArray","_owner","_store","toString","gettext","string","val","ngettext","singular","plural","countArg","Math","abs","includes","toLocaleString","slice","gettextComponentTemplate","parsedTemplate","t","tct","tn","noopStorage","_index","clear","undefined","removeItem","STORAGE_TEST_KEY","createStorage","getStorage","storage","e","createLocalStorage","Storage","window"],"sourceRoot":""}