{"version":3,"file":"chunks/app_views_alerts_create_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/create.tsx","webpack:///./app/views/alerts/rules/metric/create.tsx","webpack:///./app/views/alerts/rules/metric/duplicate.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {uniqueId} from 'sentry/utils/guid';\nimport Teams from 'sentry/utils/teams';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport IssueRuleEditor from 'sentry/views/alerts/rules/issue';\nimport MetricRulesCreate from 'sentry/views/alerts/rules/metric/create';\nimport MetricRulesDuplicate from 'sentry/views/alerts/rules/metric/duplicate';\nimport {AlertRuleType} from 'sentry/views/alerts/types';\nimport {\n  AlertType as WizardAlertType,\n  AlertWizardAlertNames,\n  DEFAULT_WIZARD_TEMPLATE,\n  WizardRuleTemplate,\n} from 'sentry/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'sentry/views/alerts/wizard/utils';\n\ntype RouteParams = {\n  orgId: string;\n  alertType?: AlertRuleType;\n  projectId?: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  hasMetricAlerts: boolean;\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  alertType: AlertRuleType;\n};\n\nclass Create extends Component<Props, State> {\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    const {organization, location, project, params, router} = this.props;\n    const {aggregate, dataset, eventTypes, createFromDuplicate} = location?.query ?? {};\n    const alertType = params.alertType || AlertRuleType.METRIC;\n\n    // TODO(taylangocmen): Remove redirect with aggregate && dataset && eventTypes, init from template\n    if (\n      alertType === AlertRuleType.METRIC &&\n      !(aggregate && dataset && eventTypes) &&\n      !createFromDuplicate\n    ) {\n      router.replace({\n        ...location,\n        pathname: `/organizations/${organization.slug}/alerts/new/${alertType}`,\n        query: {\n          ...location.query,\n          ...DEFAULT_WIZARD_TEMPLATE,\n          project: project.slug,\n        },\n      });\n    }\n\n    return {alertType};\n  }\n\n  componentDidMount() {\n    const {organization, project} = this.props;\n\n    trackAdvancedAnalyticsEvent('new_alert_rule.viewed', {\n      organization,\n      project_id: project.id,\n      session_id: this.sessionId,\n      alert_type: this.state.alertType,\n      duplicate_rule: this.isDuplicateRule ? 'true' : 'false',\n      wizard_v3: 'true',\n    });\n  }\n\n  /** Used to track analytics within one visit to the creation page */\n  sessionId = uniqueId();\n\n  get isDuplicateRule(): boolean {\n    const {location} = this.props;\n    const createFromDuplicate = location?.query.createFromDuplicate === 'true';\n    return createFromDuplicate && location?.query.duplicateRuleId;\n  }\n\n  render() {\n    const {hasMetricAlerts, organization, project, location, routes} = this.props;\n    const {alertType} = this.state;\n    const {aggregate, dataset, eventTypes, createFromWizard, createFromDiscover} =\n      location?.query ?? {};\n    const wizardTemplate: WizardRuleTemplate = {\n      aggregate: aggregate ?? DEFAULT_WIZARD_TEMPLATE.aggregate,\n      dataset: dataset ?? DEFAULT_WIZARD_TEMPLATE.dataset,\n      eventTypes: eventTypes ?? DEFAULT_WIZARD_TEMPLATE.eventTypes,\n    };\n    const eventView = createFromDiscover ? EventView.fromLocation(location) : undefined;\n\n    let wizardAlertType: undefined | WizardAlertType;\n    if (createFromWizard && alertType === AlertRuleType.METRIC) {\n      wizardAlertType = wizardTemplate\n        ? getAlertTypeFromAggregateDataset(wizardTemplate)\n        : 'issues';\n    }\n\n    const title = t('New Alert Rule');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={project.slug} />\n\n        <Layout.Header>\n          <StyledHeaderContent>\n            <BuilderBreadCrumbs\n              organization={organization}\n              alertName={t('Set Conditions')}\n              title={wizardAlertType ? t('Select Alert') : title}\n              projectSlug={project.slug}\n              alertType={alertType}\n              routes={routes}\n              location={location}\n              canChangeProject\n            />\n            <Layout.Title>\n              {wizardAlertType\n                ? `${t('Set Conditions for')} ${AlertWizardAlertNames[wizardAlertType]}`\n                : title}\n            </Layout.Title>\n          </StyledHeaderContent>\n        </Layout.Header>\n        <Body>\n          <Teams provideUserTeams>\n            {({teams, initiallyLoaded}) =>\n              initiallyLoaded ? (\n                <Fragment>\n                  {(!hasMetricAlerts || alertType === AlertRuleType.ISSUE) && (\n                    <IssueRuleEditor\n                      {...this.props}\n                      project={project}\n                      userTeamIds={teams.map(({id}) => id)}\n                    />\n                  )}\n\n                  {hasMetricAlerts &&\n                    alertType === AlertRuleType.METRIC &&\n                    (this.isDuplicateRule ? (\n                      <MetricRulesDuplicate\n                        {...this.props}\n                        eventView={eventView}\n                        wizardTemplate={wizardTemplate}\n                        sessionId={this.sessionId}\n                        project={project}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    ) : (\n                      <MetricRulesCreate\n                        {...this.props}\n                        eventView={eventView}\n                        wizardTemplate={wizardTemplate}\n                        sessionId={this.sessionId}\n                        project={project}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    ))}\n                </Fragment>\n              ) : (\n                <LoadingIndicator />\n              )\n            }\n          </Teams>\n        </Body>\n      </Fragment>\n    );\n  }\n}\n\nconst StyledHeaderContent = styled(Layout.HeaderContent)`\n  overflow: visible;\n`;\n\nconst Body = styled(Layout.Body)`\n  && {\n    padding: 0;\n    gap: 0;\n  }\n  grid-template-rows: 1fr;\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: minmax(100px, auto) 400px;\n  }\n`;\n\nexport default Create;\n","import {RouteComponentProps} from 'react-router';\n\nimport {Organization, Project} from 'sentry/types';\nimport {metric} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  createDefaultRule,\n  createRuleFromEventView,\n  createRuleFromWizardTemplate,\n} from 'sentry/views/alerts/rules/metric/constants';\nimport {WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n  projectId?: string;\n  ruleId?: string;\n};\n\ntype Props = {\n  eventView: EventView | undefined;\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n  sessionId?: string;\n  wizardTemplate?: WizardRuleTemplate;\n} & RouteComponentProps<RouteParams, {}>;\n\n/**\n * Show metric rules form with an empty rule. Redirects to alerts list after creation.\n */\nfunction MetricRulesCreate(props: Props) {\n  function handleSubmitSuccess(data: any) {\n    const {router, project} = props;\n    const {orgId} = props.params;\n    const alertRuleId: string | undefined = data\n      ? (data.id as string | undefined)\n      : undefined;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push(\n      alertRuleId\n        ? {pathname: `/organizations/${orgId}/alerts/rules/details/${alertRuleId}/`}\n        : {\n            pathname: `/organizations/${orgId}/alerts/rules/`,\n            query: {project: project.id},\n          }\n    );\n  }\n\n  const {project, eventView, wizardTemplate, sessionId, userTeamIds, ...otherProps} =\n    props;\n  const defaultRule = eventView\n    ? createRuleFromEventView(eventView)\n    : wizardTemplate\n    ? createRuleFromWizardTemplate(wizardTemplate)\n    : createDefaultRule();\n\n  const projectTeamIds = new Set(project.teams.map(({id}) => id));\n  const defaultOwnerId = userTeamIds.find(id => projectTeamIds.has(id)) ?? null;\n  defaultRule.owner = defaultOwnerId && `team:${defaultOwnerId}`;\n\n  return (\n    <RuleForm\n      onSubmitSuccess={handleSubmitSuccess}\n      rule={{...defaultRule, projects: [project.slug]}}\n      sessionId={sessionId}\n      project={project}\n      userTeamIds={userTeamIds}\n      eventView={eventView}\n      {...otherProps}\n    />\n  );\n}\n\nexport default MetricRulesCreate;\n","import {RouteComponentProps} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {uniqueId} from 'sentry/utils/guid';\nimport {\n  DuplicateActionFields,\n  DuplicateMetricFields,\n  DuplicateTriggerFields,\n} from 'sentry/views/alerts/rules/metric/constants';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\nimport {WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n};\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n  eventView?: EventView;\n  sessionId?: string;\n  wizardTemplate?: WizardRuleTemplate;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  duplicateTargetRule?: MetricRule;\n} & AsyncView['state'];\n\n/**\n * Show metric rules form with values from an existing rule. Redirects to alerts list after creation.\n */\n\nclass MetricRulesDuplicate extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {\n      params: {orgId},\n      location: {query},\n    } = this.props;\n\n    return [\n      [\n        'duplicateTargetRule',\n        `/organizations/${orgId}/alert-rules/${query.duplicateRuleId}/`,\n      ],\n    ];\n  }\n\n  handleSubmitSuccess = (data: any) => {\n    const {\n      router,\n      project,\n      params: {orgId},\n    } = this.props;\n    const alertRuleId: string | undefined = data\n      ? (data.id as string | undefined)\n      : undefined;\n\n    router.push(\n      alertRuleId\n        ? {pathname: `/organizations/${orgId}/alerts/rules/details/${alertRuleId}/`}\n        : {\n            pathname: `/organizations/${orgId}/alerts/rules/`,\n            query: {project: project.id},\n          }\n    );\n  };\n\n  renderBody() {\n    const {project, sessionId, userTeamIds, ...otherProps} = this.props;\n    const {duplicateTargetRule} = this.state;\n\n    if (!duplicateTargetRule) {\n      return this.renderLoading();\n    }\n\n    return (\n      <Layout.Main>\n        <RuleForm\n          onSubmitSuccess={this.handleSubmitSuccess}\n          rule={\n            {\n              ...pick(duplicateTargetRule, DuplicateMetricFields),\n              triggers: duplicateTargetRule.triggers.map(trigger => ({\n                ...pick(trigger, DuplicateTriggerFields),\n                actions: trigger.actions.map(action => ({\n                  inputChannelId: null,\n                  integrationId: undefined,\n                  options: null,\n                  sentryAppId: undefined,\n                  unsavedId: uniqueId(),\n                  unsavedDateCreated: new Date().toISOString(),\n                  ...pick(action, DuplicateActionFields),\n                })),\n              })),\n              name: duplicateTargetRule.name + ' copy',\n            } as MetricRule\n          }\n          sessionId={sessionId}\n          project={project}\n          userTeamIds={userTeamIds}\n          isDuplicateRule\n          {...otherProps}\n        />\n      </Layout.Main>\n    );\n  }\n}\n\nexport default MetricRulesDuplicate;\n"],"names":["Component","Fragment","Layout","LoadingIndicator","SentryDocumentTitle","t","trackAdvancedAnalyticsEvent","EventView","uniqueId","Teams","BuilderBreadCrumbs","IssueRuleEditor","MetricRulesCreate","MetricRulesDuplicate","AlertRuleType","AlertWizardAlertNames","DEFAULT_WIZARD_TEMPLATE","getAlertTypeFromAggregateDataset","Create","getInitialState","organization","location","project","params","router","props","aggregate","dataset","eventTypes","createFromDuplicate","query","alertType","METRIC","replace","pathname","slug","componentDidMount","project_id","id","session_id","sessionId","alert_type","state","duplicate_rule","isDuplicateRule","wizard_v3","duplicateRuleId","render","hasMetricAlerts","routes","createFromWizard","createFromDiscover","wizardTemplate","eventView","fromLocation","undefined","wizardAlertType","title","teams","initiallyLoaded","ISSUE","map","StyledHeaderContent","HeaderContent","Body","p","theme","breakpoints","large","metric","createDefaultRule","createRuleFromEventView","createRuleFromWizardTemplate","RuleForm","handleSubmitSuccess","data","orgId","alertRuleId","endTransaction","name","push","userTeamIds","otherProps","defaultRule","projectTeamIds","Set","defaultOwnerId","find","has","owner","projects","pick","DuplicateActionFields","DuplicateMetricFields","DuplicateTriggerFields","AsyncView","getEndpoints","renderBody","duplicateTargetRule","renderLoading","triggers","trigger","actions","action","inputChannelId","integrationId","options","sentryAppId","unsavedId","unsavedDateCreated","Date","toISOString"],"sourceRoot":""}