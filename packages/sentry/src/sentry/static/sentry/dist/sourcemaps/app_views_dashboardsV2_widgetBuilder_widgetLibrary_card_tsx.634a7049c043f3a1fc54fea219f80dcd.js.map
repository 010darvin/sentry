{"version":3,"file":"chunks/app_views_dashboardsV2_widgetBuilder_widgetLibrary_card_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/dashboardsV2/widgetBuilder/widgetLibrary/card.tsx","webpack:///./app/views/dashboardsV2/widgetLibrary/widgetCard.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {WidgetTemplate} from 'sentry/views/dashboardsV2/widgetLibrary/data';\nimport {getWidgetIcon} from 'sentry/views/dashboardsV2/widgetLibrary/widgetCard';\n\ninterface CardProps {\n  iconColor: string;\n  widget: WidgetTemplate;\n}\n\nexport function Card({widget, iconColor}: CardProps) {\n  const {title, description, displayType} = widget;\n  const Icon = getWidgetIcon(displayType);\n\n  return (\n    <Container>\n      <IconWrapper backgroundColor={iconColor}>\n        <Icon color=\"white\" />\n      </IconWrapper>\n      <Information>\n        <Heading>{title}</Heading>\n        <SubHeading>{description}</SubHeading>\n      </Information>\n    </Container>\n  );\n}\n\nconst Container = styled('div')`\n  display: flex;\n  flex-direction: row;\n  gap: ${space(1)};\n`;\n\nconst Information = styled('div')`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Heading = styled('div')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  font-weight: 500;\n  margin-bottom: 0;\n  color: ${p => p.theme.gray500};\n`;\n\nconst SubHeading = styled('small')`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IconWrapper = styled('div')<{backgroundColor: string}>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: ${space(1)};\n  min-width: 40px;\n  height: 40px;\n  border-radius: ${p => p.theme.borderRadius};\n  background: ${p => p.backgroundColor};\n`;\n","import {useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {IconArrow, IconGlobe, IconGraph, IconMenu, IconNumber} from 'sentry/icons';\nimport {IconGraphArea} from 'sentry/icons/iconGraphArea';\nimport {IconGraphBar} from 'sentry/icons/iconGraphBar';\nimport space from 'sentry/styles/space';\n\nimport {DisplayType} from '../types';\n\nimport {WidgetTemplate} from './data';\n\ntype Props = {\n  selectedWidgets: WidgetTemplate[];\n  setErrored: (errored: boolean) => void;\n  setSelectedWidgets: (widgets: WidgetTemplate[]) => void;\n  widget: WidgetTemplate;\n  ['data-test-id']?: string;\n};\n\nexport function getWidgetIcon(displayType: DisplayType) {\n  switch (displayType) {\n    case DisplayType.TABLE:\n      return IconMenu;\n    case DisplayType.WORLD_MAP:\n      return IconGlobe;\n    case DisplayType.BIG_NUMBER:\n      return IconNumber;\n    case DisplayType.BAR:\n      return IconGraphBar;\n    case DisplayType.TOP_N:\n      return IconArrow;\n    case DisplayType.AREA:\n      return IconGraphArea;\n    case DisplayType.LINE:\n    default:\n      return IconGraph;\n  }\n}\n\nfunction WidgetLibraryCard({\n  selectedWidgets,\n  widget,\n  setSelectedWidgets,\n  ['data-test-id']: dataTestId,\n}: Props) {\n  const [selected, setSelected] = useState(selectedWidgets.includes(widget));\n  const Icon = getWidgetIcon(widget.displayType);\n\n  return (\n    <StyledPanel\n      data-test-id={dataTestId}\n      selected={selected}\n      onClick={() => {\n        if (selected) {\n          const updatedWidgets = selectedWidgets.filter(\n            selectedWidget => widget !== selectedWidget\n          );\n          setSelectedWidgets(updatedWidgets);\n        } else {\n          const updatedWidgets = selectedWidgets.slice().concat(widget);\n          setSelectedWidgets(updatedWidgets);\n        }\n        setSelected(!!!selected);\n      }}\n    >\n      <PanelBody>\n        <TitleContainer>\n          <Icon size=\"xs\" />\n          <Title>{widget.title}</Title>\n        </TitleContainer>\n        <Description>{widget.description}</Description>\n      </PanelBody>\n    </StyledPanel>\n  );\n}\n\nconst Title = styled('div')`\n  padding-left: ${space(1)};\n  font-size: 16px;\n  line-height: 140%;\n  color: ${p => p.theme.gray500};\n`;\n\nconst TitleContainer = styled('div')`\n  padding: ${space(1.5)} ${space(2)};\n  padding-bottom: ${space(0.5)};\n  display: flex;\n  align-items: center;\n`;\n\nconst Description = styled('div')`\n  padding: 0 ${space(1)} ${space(1.5)} 36px;\n  font-size: 14px;\n  line-height: 21px;\n  color: ${p => p.theme.gray300};\n`;\n\ntype PanelProps = {\n  selected?: boolean;\n};\n\nconst StyledPanel = styled(Panel)<PanelProps>`\n  border: ${p =>\n    p.selected ? `2px solid ${p.theme.active}` : `1px solid ${p.theme.border}`};\n  margin: ${p => (p.selected ? '-1px' : 0)};\n  box-sizing: border-box;\n  box-shadow: 0px 2px 1px rgba(0, 0, 0, 0.08);\n  cursor: pointer;\n`;\n\nexport default WidgetLibraryCard;\n"],"names":["space","getWidgetIcon","Card","widget","iconColor","title","description","displayType","Icon","Container","Information","Heading","p","theme","fontSizeLarge","gray500","SubHeading","gray300","IconWrapper","borderRadius","backgroundColor","useState","Panel","PanelBody","IconArrow","IconGlobe","IconGraph","IconMenu","IconNumber","IconGraphArea","IconGraphBar","DisplayType","TABLE","WORLD_MAP","BIG_NUMBER","BAR","TOP_N","AREA","LINE","WidgetLibraryCard","selectedWidgets","setSelectedWidgets","dataTestId","selected","setSelected","includes","updatedWidgets","filter","selectedWidget","slice","concat","Title","TitleContainer","Description","StyledPanel","active","border"],"sourceRoot":""}