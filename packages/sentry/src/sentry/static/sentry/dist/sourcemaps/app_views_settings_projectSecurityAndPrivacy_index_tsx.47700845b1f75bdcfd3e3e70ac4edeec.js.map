{"version":3,"file":"chunks/app_views_settings_projectSecurityAndPrivacy_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":";;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;CAOA;;;AACO,MAAMQ,KAAK,GAAG,4DAAd;AAEP,MAAMC,mBAAmB,GAAGR,gDAAC,CAC3B,+FAD2B,CAA7B,EAIA;;AACA,MAAMS,cAAc,GAAG;EAAA,IAAC;IAACC,YAAD;IAAeC;EAAf,CAAD;EAAA,OAA0BD,YAAY,CAACC,IAAD,CAAtC;AAAA,CAAvB;;AAEA,iEAAe,CACb;EACEC,KAAK,EAAEZ,gDAAC,CAAC,oBAAD,CADV;EAEEa,MAAM,EAAE,CACN;IACEF,IAAI,EAAE,mBADR;IAEEG,IAAI,EAAE,QAFR;IAGEC,KAAK,EAAEf,gDAAC,CAAC,4BAAD,CAHV;IAIEgB,IAAI,EAAE;MAAA,IAAC;QAACN;MAAD,CAAD;MAAA,OACJT,kDAAG,CACD,kKADC,EAED;QACEgB,wBAAwB,EACtB,gEAAC,oEAAD;UAAM,EAAE,EAAG,aAAYP,YAAY,CAACQ,IAAK;QAAzC;MAFJ,CAFC,CADC;IAAA,CAJR;IAaEC,OAAO,EAAE;MAAA,IAAC;QAACC;MAAD,CAAD;MAAA,OAAgBA,QAAQ,CAACC,GAAT,CAAa,mBAAb,CAAhB;IAAA,CAbX;IAcEC,WAAW,EAAE,SAA2B;MAAA,IAA1B;QAACZ,YAAD;QAAea;MAAf,CAA0B;;MACtC;MACA,IAAIA,KAAK,KAAK,EAAd,EAAkB;QAChB,OAAOtB,kDAAG,CAAC,qDAAD,EAAwD;UAChEuB,iBAAiB,EAAEpB,kFAAuB,CAACM,YAAY,CAACe,iBAAd;QADsB,CAAxD,CAAV;MAGD,CANqC,CAQtC;MACA;;;MACA,OAAOrB,kFAAuB,CAACmB,KAAD,CAA9B;IACD,CAzBH;IA0BEG,OAAO,EAAE;MAAA,IAAC;QAAChB;MAAD,CAAD;MAAA,OACPL,qFAA0B,CAACC,2EAAD,CAA1B,CAAiDsB,GAAjD,CAAqDL,KAAK,IAAI,CAC5DA,KAD4D,EAE5DnB,kFAAuB,CAACmB,KAAD,EAAQb,YAAY,CAACe,iBAArB,CAFqC,CAA9D,CADO;IAAA;EA1BX,CADM;AAFV,CADa,EAsCb;EACEb,KAAK,EAAEZ,gDAAC,CAAC,gBAAD,CADV;EAEEa,MAAM,EAAE,CACN;IACEF,IAAI,EAAE,cADR;IAEEG,IAAI,EAAE,SAFR;IAGEC,KAAK,EAAEf,gDAAC,CAAC,eAAD,CAHV;IAIE6B,QAAQ,EAAEpB,cAJZ;IAKEqB,cAAc,EAAEtB,mBALlB;IAMEQ,IAAI,EAAEhB,gDAAC,CAAC,mCAAD,CANT;IAOE;IACA+B,QAAQ,EAAE,CAACC,GAAD,EAAMC,KAAN,KACPA,KAAK,CAACvB,YAAN,IAAsBuB,KAAK,CAACvB,YAAN,CAAmBuB,KAAK,CAACtB,IAAzB,CAAvB,IAA0DqB,GAT9D;IAUEE,OAAO,EAAE;MACPC,KAAK,EAAEnC,gDAAC,CAAC,8DAAD;IADD;EAVX,CADM,EAeN;IACEW,IAAI,EAAE,sBADR;IAEEG,IAAI,EAAE,SAFR;IAGEe,QAAQ,EAAEpB,cAHZ;IAIEqB,cAAc,EAAEtB,mBAJlB;IAKEO,KAAK,EAAEf,gDAAC,CAAC,uBAAD,CALV;IAMEgB,IAAI,EAAEhB,gDAAC,CACL,6FADK,CANT;IASE;IACA+B,QAAQ,EAAE,CAACC,GAAD,EAAMC,KAAN,KACPA,KAAK,CAACvB,YAAN,IAAsBuB,KAAK,CAACvB,YAAN,CAAmBuB,KAAK,CAACtB,IAAzB,CAAvB,IAA0DqB,GAX9D;IAYEE,OAAO,EAAE;MACPC,KAAK,EAAEnC,gDAAC,CAAC,2DAAD;IADD;EAZX,CAfM,EA+BN;IACEW,IAAI,EAAE,kBADR;IAEEG,IAAI,EAAE,SAFR;IAGEe,QAAQ,EAAEpB,cAHZ;IAIEqB,cAAc,EAAEtB,mBAJlB;IAKE;IACAuB,QAAQ,EAAE,CAACC,GAAD,EAAMC,KAAN,KACPA,KAAK,CAACvB,YAAN,IAAsBuB,KAAK,CAACvB,YAAN,CAAmBuB,KAAK,CAACtB,IAAzB,CAAvB,IAA0DqB,GAP9D;IAQEjB,KAAK,EAAEf,gDAAC,CAAC,iCAAD,CARV;IASEgB,IAAI,EAAEhB,gDAAC,CAAC,0DAAD,CATT;IAUEkC,OAAO,EAAE;MACPC,KAAK,EAAEnC,gDAAC,CAAC,0DAAD;IADD;EAVX,CA/BM,EA6CN;IACEW,IAAI,EAAE,iBADR;IAEEG,IAAI,EAAE,QAFR;IAGEsB,SAAS,EAAE,IAHb;IAIEC,QAAQ,EAAE,IAJZ;IAKEC,OAAO,EAAE,EALX;IAMEC,IAAI,EAAE,CANR;IAOEjB,WAAW,EAAEtB,gDAAC,CAAC,OAAD,CAPhB;IAQEe,KAAK,EAAEf,gDAAC,CAAC,6BAAD,CARV;IASEgB,IAAI,EAAEhB,gDAAC,CACL,uGADK,CATT;IAYEwC,QAAQ,EAAER,GAAG,IAAI7B,oEAAsB,CAAC6B,GAAD,CAZzC;IAaED,QAAQ,EAAEC,GAAG,IAAI9B,wEAA0B,CAAC8B,GAAD;EAb7C,CA7CM,EA4DN;IACErB,IAAI,EAAE,YADR;IAEEG,IAAI,EAAE,QAFR;IAGEsB,SAAS,EAAE,IAHb;IAIEC,QAAQ,EAAE,IAJZ;IAKEC,OAAO,EAAE,EALX;IAMEC,IAAI,EAAE,CANR;IAOEjB,WAAW,EAAEtB,gDAAC,CAAC,gBAAD,CAPhB;IAQEe,KAAK,EAAEf,gDAAC,CAAC,aAAD,CARV;IASEgB,IAAI,EAAEhB,gDAAC,CACL,0FADK,CATT;IAYEwC,QAAQ,EAAER,GAAG,IAAI7B,oEAAsB,CAAC6B,GAAD,CAZzC;IAaED,QAAQ,EAAEC,GAAG,IAAI9B,wEAA0B,CAAC8B,GAAD;EAb7C,CA5DM;AAFV,CAtCa,CAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;AAOA,MAAMmB,yBAAN,SAAwCV,4CAAxC,CAAyD;EAAA;IAAA;;IAAA,+GAChCW,IAAD,IAAmB;MACvC;MACAR,mFAAA,CAA6BQ,IAA7B;IACD,CAJsD;EAAA;;EAMvDE,MAAM,GAAG;IACP,MAAM;MAAC5C,YAAD;MAAe6C;IAAf,IAA0B,KAAKtB,KAArC;IACA,MAAMuB,WAAW,GAAGD,OAApB;IACA,MAAME,WAAW,GAAGF,OAAO,CAACrC,IAA5B;IACA,MAAMwC,QAAQ,GAAI,aAAYhD,YAAY,CAACQ,IAAK,IAAGuC,WAAY,GAA/D;IACA,MAAME,MAAM,GAAG,IAAIC,GAAJ,CAAQlD,YAAY,CAACiD,MAArB,CAAf;IACA,MAAMvC,QAAQ,GAAG,IAAIwC,GAAJ,CAAQlD,YAAY,CAACU,QAArB,CAAjB;IACA,MAAMyC,cAAc,GAAGN,OAAO,CAACM,cAA/B;IACA,MAAMC,SAAS,GAAG,KAAlB;IACA,MAAMlD,KAAK,GAAGZ,iDAAC,CAAC,oBAAD,CAAf;IAEA,OACE,kEAAC,2CAAD;MAAA,WACE,iEAAC,6EAAD;QAAqB,KAAK,EAAEY,KAA5B;QAAmC,WAAW,EAAE6C;MAAhD,EADF,EAEE,iEAAC,4FAAD;QAAoB,KAAK,EAAE7C;MAA3B,EAFF,EAGE,iEAAC,oEAAD;QACE,UAAU,MADZ;QAEE,SAAS,MAFX;QAGE,WAAW,EAAE4C,WAHf;QAIE,SAAS,EAAEM,SAJb;QAKE,WAAW,EAAEJ,QALf;QAME,eAAe,EAAE,KAAKK,mBANxB;QAOE,aAAa,EAAE,MAAMpB,gFAAe,CAAC,uBAAD,CAPtC;QAAA,UASE,iEAAC,wEAAD;UACE,oBAAoB,EAAE;YAACjC;UAAD,CADxB;UAEE,QAAQ,EAAEU,QAFZ;UAGE,QAAQ,EAAE,CAACuC,MAAM,CAACtC,GAAP,CAAW,eAAX,CAHb;UAIE,KAAK,EAAE2B,yFAA+BA;QAJxC;MATF,EAHF,EAmBE,iEAAC,kEAAD;QACE,iBAAiB,EACf;UAAA,UACG/C,mDAAG,CACF,oGADE,EAEF;YACE+D,oCAAoC,EAClC,iEAAC,oEAAD;cAAM,EAAE,EAAG,aAAYtD,YAAY,CAACQ,IAAK,wBAAzC;cAAA,UACGN;YADH;UAFJ,CAFE;QADN,EAFJ;QAeE,QAAQ,EAAE8C,QAfZ;QAgBE,cAAc,EAAEG,cAhBlB;QAiBE,QAAQ,EAAE,CAACF,MAAM,CAACtC,GAAP,CAAW,eAAX,CAjBb;QAkBE,YAAY,EAAEX,YAlBhB;QAmBE,SAAS,EAAE6C,OAAO,CAACU,EAnBrB;QAoBE,eAAe,EAAE,KAAKF;MApBxB,EAnBF;IAAA,EADF;EA4CD;;AA7DsD;;AAAnDZ;AAgEN,iEAAeA,yBAAf","sources":["webpack:///./app/data/forms/projectSecurityAndPrivacyGroups.tsx","webpack:///./app/views/settings/projectSecurityAndPrivacy/index.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/type';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport {convertMultilineFieldValue, extractMultilineFields} from 'sentry/utils';\nimport {\n  formatStoreCrashReports,\n  getStoreCrashReportsValues,\n  SettingScope,\n} from 'sentry/utils/crashReports';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/security-and-privacy/';\n\nconst ORG_DISABLED_REASON = t(\n  \"This option is enforced by your organization's settings and cannot be customized per-project.\"\n);\n\n// Check if a field has been set AND IS TRUTHY at the organization level.\nconst hasOrgOverride = ({organization, name}) => organization[name];\n\nexport default [\n  {\n    title: t('Security & Privacy'),\n    fields: [\n      {\n        name: 'storeCrashReports',\n        type: 'select',\n        label: t('Store Native Crash Reports'),\n        help: ({organization}) =>\n          tct(\n            'Store native crash reports such as Minidumps for improved processing and download in issue details. Overrides [organizationSettingsLink: organization settings].',\n            {\n              organizationSettingsLink: (\n                <Link to={`/settings/${organization.slug}/security-and-privacy/`} />\n              ),\n            }\n          ),\n        visible: ({features}) => features.has('event-attachments'),\n        placeholder: ({organization, value}) => {\n          // empty value means that this project should inherit organization settings\n          if (value === '') {\n            return tct('Inherit organization settings ([organizationValue])', {\n              organizationValue: formatStoreCrashReports(organization.storeCrashReports),\n            });\n          }\n\n          // HACK: some organization can have limit of stored crash reports a number that's not in the options (legacy reasons),\n          // we therefore display it in a placeholder\n          return formatStoreCrashReports(value);\n        },\n        choices: ({organization}) =>\n          getStoreCrashReportsValues(SettingScope.Project).map(value => [\n            value,\n            formatStoreCrashReports(value, organization.storeCrashReports),\n          ]),\n      },\n    ],\n  },\n  {\n    title: t('Data Scrubbing'),\n    fields: [\n      {\n        name: 'dataScrubber',\n        type: 'boolean',\n        label: t('Data Scrubber'),\n        disabled: hasOrgOverride,\n        disabledReason: ORG_DISABLED_REASON,\n        help: t('Enable server-side data scrubbing'),\n        // `props` are the props given to FormField\n        setValue: (val, props) =>\n          (props.organization && props.organization[props.name]) || val,\n        confirm: {\n          false: t('Are you sure you want to disable server-side data scrubbing?'),\n        },\n      },\n      {\n        name: 'dataScrubberDefaults',\n        type: 'boolean',\n        disabled: hasOrgOverride,\n        disabledReason: ORG_DISABLED_REASON,\n        label: t('Use Default Scrubbers'),\n        help: t(\n          'Apply default scrubbers to prevent things like passwords and credit cards from being stored'\n        ),\n        // `props` are the props given to FormField\n        setValue: (val, props) =>\n          (props.organization && props.organization[props.name]) || val,\n        confirm: {\n          false: t('Are you sure you want to disable using default scrubbers?'),\n        },\n      },\n      {\n        name: 'scrubIPAddresses',\n        type: 'boolean',\n        disabled: hasOrgOverride,\n        disabledReason: ORG_DISABLED_REASON,\n        // `props` are the props given to FormField\n        setValue: (val, props) =>\n          (props.organization && props.organization[props.name]) || val,\n        label: t('Prevent Storing of IP Addresses'),\n        help: t('Preventing IP addresses from being stored for new events'),\n        confirm: {\n          false: t('Are you sure you want to disable scrubbing IP addresses?'),\n        },\n      },\n      {\n        name: 'sensitiveFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        rows: 1,\n        placeholder: t('email'),\n        label: t('Additional Sensitive Fields'),\n        help: t(\n          'Additional field names to match against when scrubbing data. Separate multiple entries with a newline'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n      {\n        name: 'safeFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        rows: 1,\n        placeholder: t('business-email'),\n        label: t('Safe Fields'),\n        help: t(\n          'Field names which data scrubbers should ignore. Separate multiple entries with a newline'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n    ],\n  },\n] as JsonFormObject[];\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport ProjectActions from 'sentry/actions/projectActions';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport Link from 'sentry/components/links/link';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport projectSecurityAndPrivacyGroups from 'sentry/data/forms/projectSecurityAndPrivacyGroups';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nimport DataScrubbing from '../components/dataScrubbing';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\nclass ProjectSecurityAndPrivacy extends Component<Props> {\n  handleUpdateProject = (data: Project) => {\n    // This will update our project global state\n    ProjectActions.updateSuccess(data);\n  };\n\n  render() {\n    const {organization, project} = this.props;\n    const initialData = project;\n    const projectSlug = project.slug;\n    const endpoint = `/projects/${organization.slug}/${projectSlug}/`;\n    const access = new Set(organization.access);\n    const features = new Set(organization.features);\n    const relayPiiConfig = project.relayPiiConfig;\n    const apiMethod = 'PUT';\n    const title = t('Security & Privacy');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectSlug} />\n        <SettingsPageHeader title={title} />\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={initialData}\n          apiMethod={apiMethod}\n          apiEndpoint={endpoint}\n          onSubmitSuccess={this.handleUpdateProject}\n          onSubmitError={() => addErrorMessage('Unable to save change')}\n        >\n          <JsonForm\n            additionalFieldProps={{organization}}\n            features={features}\n            disabled={!access.has('project:write')}\n            forms={projectSecurityAndPrivacyGroups}\n          />\n        </Form>\n        <DataScrubbing\n          additionalContext={\n            <span>\n              {tct(\n                'These rules can be configured at the organization level in [linkToOrganizationSecurityAndPrivacy].',\n                {\n                  linkToOrganizationSecurityAndPrivacy: (\n                    <Link to={`/settings/${organization.slug}/security-and-privacy/`}>\n                      {title}\n                    </Link>\n                  ),\n                }\n              )}\n            </span>\n          }\n          endpoint={endpoint}\n          relayPiiConfig={relayPiiConfig}\n          disabled={!access.has('project:write')}\n          organization={organization}\n          projectId={project.id}\n          onSubmitSuccess={this.handleUpdateProject}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default ProjectSecurityAndPrivacy;\n"],"names":["Link","t","tct","convertMultilineFieldValue","extractMultilineFields","formatStoreCrashReports","getStoreCrashReportsValues","SettingScope","route","ORG_DISABLED_REASON","hasOrgOverride","organization","name","title","fields","type","label","help","organizationSettingsLink","slug","visible","features","has","placeholder","value","organizationValue","storeCrashReports","choices","Project","map","disabled","disabledReason","setValue","val","props","confirm","false","multiline","autosize","maxRows","rows","getValue","Component","Fragment","addErrorMessage","ProjectActions","Form","JsonForm","SentryDocumentTitle","projectSecurityAndPrivacyGroups","SettingsPageHeader","DataScrubbing","ProjectSecurityAndPrivacy","data","updateSuccess","render","project","initialData","projectSlug","endpoint","access","Set","relayPiiConfig","apiMethod","handleUpdateProject","linkToOrganizationSecurityAndPrivacy","id"],"sourceRoot":""}