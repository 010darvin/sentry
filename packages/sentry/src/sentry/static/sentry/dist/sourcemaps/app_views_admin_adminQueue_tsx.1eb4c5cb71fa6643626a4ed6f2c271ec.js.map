{"version":3,"file":"chunks/app_views_admin_adminQueue_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/internalStatChart.tsx","webpack:///./app/views/admin/adminQueue.tsx","webpack:///./app/views/asyncView.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport {Client} from 'sentry/api';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  label: string;\n  resolution: string;\n  since: number;\n  stat: string;\n  height?: number;\n};\n\ntype State = {\n  data: [number, number][] | null;\n  error: boolean;\n  loading: boolean;\n};\n\nclass InternalStatChart extends Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  shouldComponentUpdate(_nextProps: Props, nextState: State) {\n    return this.state.loading !== nextState.loading;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.since !== this.props.since ||\n      prevProps.stat !== this.props.stat ||\n      prevProps.resolution !== this.props.resolution\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    this.setState({loading: true});\n    this.props.api.request('/internal/stats/', {\n      method: 'GET',\n      data: {\n        since: this.props.since,\n        resolution: this.props.resolution,\n        key: this.props.stat,\n      },\n      success: data =>\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n        }),\n      error: () => this.setState({error: true, loading: false}),\n    });\n  };\n\n  render() {\n    const {loading, error, data} = this.state;\n    const {label, height} = this.props;\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const series = {\n      seriesName: label,\n      data:\n        data?.map(([timestamp, value]) => ({\n          name: timestamp * 1000,\n          value,\n        })) ?? [],\n    };\n    return (\n      <MiniBarChart\n        height={height ?? 150}\n        series={[series]}\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(InternalStatChart);\n","import styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {SelectField} from 'sentry/components/deprecatedforms';\nimport InternalStatChart from 'sentry/components/internalStatChart';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport AsyncView from 'sentry/views/asyncView';\n\nconst TIME_WINDOWS = ['1h', '1d', '1w'] as const;\n\ntype TimeWindow = typeof TIME_WINDOWS[number];\n\ntype State = AsyncView['state'] & {\n  activeTask: string;\n  resolution: string;\n  since: number;\n  taskList: string[];\n  taskName: string;\n  timeWindow: TimeWindow;\n};\n\nexport default class AdminQueue extends AsyncView<{}, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      timeWindow: '1w',\n      since: new Date().getTime() / 1000 - 3600 * 24 * 7,\n      resolution: '1h',\n      taskName: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['taskList', '/internal/queue/tasks/']];\n  }\n\n  changeWindow(timeWindow: TimeWindow) {\n    let seconds: number;\n    if (timeWindow === '1h') {\n      seconds = 3600;\n    } else if (timeWindow === '1d') {\n      seconds = 3600 * 24;\n    } else if (timeWindow === '1w') {\n      seconds = 3600 * 24 * 7;\n    } else {\n      throw new Error('Invalid time window');\n    }\n    this.setState({\n      since: new Date().getTime() / 1000 - seconds,\n      timeWindow,\n    });\n  }\n\n  changeTask(value: string) {\n    this.setState({activeTask: value});\n  }\n\n  renderBody() {\n    const {activeTask, taskList} = this.state;\n\n    return (\n      <div>\n        <Header>\n          <h3>Queue Overview</h3>\n\n          <ButtonBar merged active={this.state.timeWindow}>\n            {TIME_WINDOWS.map(r => (\n              <Button size=\"sm\" barId={r} onClick={() => this.changeWindow(r)} key={r}>\n                {r}\n              </Button>\n            ))}\n          </ButtonBar>\n        </Header>\n\n        <Panel>\n          <PanelHeader>Global Throughput</PanelHeader>\n          <PanelBody withPadding>\n            <InternalStatChart\n              since={this.state.since}\n              resolution={this.state.resolution}\n              stat=\"jobs.all.started\"\n              label=\"jobs started\"\n            />\n          </PanelBody>\n        </Panel>\n\n        <h3>Task Details</h3>\n\n        <div>\n          <div className=\"m-b-1\">\n            <label>Show details for task:</label>\n            <SelectField\n              name=\"task\"\n              onChange={value => this.changeTask(value as string)}\n              value={activeTask}\n              clearable\n              options={taskList.map(t => ({\n                value: t,\n                label: t,\n              }))}\n            />\n          </div>\n          {activeTask ? (\n            <div>\n              <Panel key={`jobs.started.${activeTask}`}>\n                <PanelHeader>\n                  Jobs Started <small>{activeTask}</small>\n                </PanelHeader>\n                <PanelBody withPadding>\n                  <InternalStatChart\n                    since={this.state.since}\n                    resolution={this.state.resolution}\n                    stat={`jobs.started.${activeTask}`}\n                    label=\"jobs\"\n                    height={100}\n                  />\n                </PanelBody>\n              </Panel>\n              <Panel key={`jobs.finished.${activeTask}`}>\n                <PanelHeader>\n                  Jobs Finished <small>{activeTask}</small>\n                </PanelHeader>\n                <PanelBody withPadding>\n                  <InternalStatChart\n                    since={this.state.since}\n                    resolution={this.state.resolution}\n                    stat={`jobs.finished.${activeTask}`}\n                    label=\"jobs\"\n                    height={100}\n                  />\n                </PanelBody>\n              </Panel>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Header = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n"],"names":["Component","MiniBarChart","LoadingError","LoadingIndicator","withApi","InternalStatChart","error","loading","data","setState","props","api","request","method","since","resolution","key","stat","success","componentDidMount","fetchData","shouldComponentUpdate","_nextProps","nextState","state","componentDidUpdate","prevProps","render","label","height","series","seriesName","map","timestamp","value","name","Button","ButtonBar","SelectField","Panel","PanelBody","PanelHeader","AsyncView","TIME_WINDOWS","AdminQueue","getDefaultState","timeWindow","Date","getTime","taskName","getEndpoints","changeWindow","seconds","Error","changeTask","activeTask","renderBody","taskList","r","t","Header","AsyncComponent","SentryDocumentTitle","getTitle","renderComponent"],"sourceRoot":""}