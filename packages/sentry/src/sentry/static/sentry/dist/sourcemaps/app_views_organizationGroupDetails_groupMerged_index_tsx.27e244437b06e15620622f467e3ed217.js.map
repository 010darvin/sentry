{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupMerged_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/organizationGroupDetails/groupMerged/index.tsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedItem.tsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedList.tsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedToolbar.tsx"],"sourcesContent":["import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport * as qs from 'query-string';\n\nimport GroupingActions from 'sentry/actions/groupingActions';\nimport Alert from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport GroupingStore, {Fingerprint} from 'sentry/stores/groupingStore';\nimport {Group, Organization, Project} from 'sentry/types';\nimport {callIfFunction} from 'sentry/utils/callIfFunction';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport MergedList from './mergedList';\n\ntype Props = RouteComponentProps<\n  {groupId: Group['id']; orgId: Organization['slug']},\n  {}\n> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  mergedItems: Array<Fingerprint>;\n  query: string;\n  mergedLinks?: string;\n};\n\nclass GroupMergedView extends Component<Props, State> {\n  state: State = {\n    mergedItems: [],\n    loading: true,\n    error: false,\n    query: this.props.location.query.query || '',\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (\n      nextProps.params.groupId !== this.props.params.groupId ||\n      nextProps.location.search !== this.props.location.search\n    ) {\n      const queryParams = nextProps.location.query;\n      this.setState(\n        {\n          query: queryParams.query,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    callIfFunction(this.listener);\n  }\n\n  onGroupingChange = ({mergedItems, mergedLinks, loading, error}) => {\n    if (mergedItems) {\n      this.setState({\n        mergedItems,\n        mergedLinks,\n        loading: typeof loading !== 'undefined' ? loading : false,\n        error: typeof error !== 'undefined' ? error : false,\n      });\n    }\n  };\n\n  listener = GroupingStore.listen(this.onGroupingChange, undefined);\n\n  getEndpoint() {\n    const {params, location} = this.props;\n    const {groupId} = params;\n\n    const queryParams = {\n      ...location.query,\n      limit: 50,\n      query: this.state.query,\n    };\n\n    return `/issues/${groupId}/hashes/?${qs.stringify(queryParams)}`;\n  }\n\n  fetchData = () => {\n    GroupingActions.fetch([\n      {\n        endpoint: this.getEndpoint(),\n        dataKey: 'merged',\n        queryParams: this.props.location.query,\n      },\n    ]);\n  };\n\n  handleUnmerge = () => {\n    GroupingActions.unmerge({\n      groupId: this.props.params.groupId,\n      loadingMessage: t('Unmerging events\\u2026'),\n      successMessage: t('Events successfully queued for unmerging.'),\n      errorMessage: t('Unable to queue events for unmerging.'),\n    });\n  };\n\n  render() {\n    const {project, params} = this.props;\n    const {groupId} = params;\n    const {loading: isLoading, error, mergedItems, mergedLinks} = this.state;\n    const isError = error && !isLoading;\n    const isLoadedSuccessfully = !isError && !isLoading;\n\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <Alert type=\"warning\">\n            {t(\n              'This is an experimental feature. Data may not be immediately available while we process unmerges.'\n            )}\n          </Alert>\n\n          {isLoading && <LoadingIndicator />}\n          {isError && (\n            <LoadingError\n              message={t('Unable to load merged events, please try again later')}\n              onRetry={this.fetchData}\n            />\n          )}\n\n          {isLoadedSuccessfully && (\n            <MergedList\n              project={project}\n              fingerprints={mergedItems}\n              pageLinks={mergedLinks}\n              groupId={groupId}\n              onUnmerge={this.handleUnmerge}\n              onToggleCollapse={GroupingActions.toggleCollapseFingerprints}\n            />\n          )}\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n}\n\nexport {GroupMergedView};\n\nexport default withOrganization(GroupMergedView);\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport GroupingActions from 'sentry/actions/groupingActions';\nimport Checkbox from 'sentry/components/checkbox';\nimport EventOrGroupHeader from 'sentry/components/eventOrGroupHeader';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconChevron} from 'sentry/icons';\nimport GroupingStore, {Fingerprint} from 'sentry/stores/groupingStore';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\n\ntype Props = {\n  fingerprint: Fingerprint;\n  organization: Organization;\n};\n\ntype State = {\n  busy: boolean;\n  checked: boolean;\n  collapsed: boolean;\n};\n\nclass MergedItem extends Component<Props, State> {\n  state: State = {\n    collapsed: false,\n    checked: false,\n    busy: false,\n  };\n\n  listener = GroupingStore.listen(data => this.onGroupChange(data), undefined);\n\n  onGroupChange = ({unmergeState}) => {\n    if (!unmergeState) {\n      return;\n    }\n\n    const {fingerprint} = this.props;\n    const stateForId = unmergeState.has(fingerprint.id)\n      ? unmergeState.get(fingerprint.id)\n      : undefined;\n\n    if (!stateForId) {\n      return;\n    }\n\n    Object.keys(stateForId).forEach(key => {\n      if (stateForId[key] === this.state[key]) {\n        return;\n      }\n\n      this.setState(prevState => ({...prevState, [key]: stateForId[key]}));\n    });\n  };\n\n  handleToggleEvents = () => {\n    const {fingerprint} = this.props;\n    GroupingActions.toggleCollapseFingerprint(fingerprint.id);\n  };\n\n  // Disable default behavior of toggling checkbox\n  handleLabelClick(event: React.MouseEvent) {\n    event.preventDefault();\n  }\n\n  handleToggle = () => {\n    const {fingerprint} = this.props;\n    const {latestEvent} = fingerprint;\n\n    if (this.state.busy) {\n      return;\n    }\n\n    // clicking anywhere in the row will toggle the checkbox\n    GroupingActions.toggleUnmerge([fingerprint.id, latestEvent.id]);\n  };\n\n  handleCheckClick() {\n    // noop because of react warning about being a controlled input without `onChange`\n    // we handle change via row click\n  }\n\n  renderFingerprint(id: string, label?: string) {\n    if (!label) {\n      return id;\n    }\n\n    return (\n      <Tooltip title={id}>\n        <code>{label}</code>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const {fingerprint, organization} = this.props;\n    const {latestEvent, id, label} = fingerprint;\n    const {collapsed, busy, checked} = this.state;\n    const checkboxDisabled = busy;\n\n    // `latestEvent` can be null if last event w/ fingerprint is not within retention period\n    return (\n      <MergedGroup busy={busy}>\n        <Controls expanded={!collapsed}>\n          <ActionWrapper onClick={this.handleToggle}>\n            <Checkbox\n              id={id}\n              value={id}\n              checked={checked}\n              disabled={checkboxDisabled}\n              onChange={this.handleCheckClick}\n            />\n\n            <FingerprintLabel onClick={this.handleLabelClick} htmlFor={id}>\n              {this.renderFingerprint(id, label)}\n            </FingerprintLabel>\n          </ActionWrapper>\n\n          <div>\n            <Collapse onClick={this.handleToggleEvents}>\n              <IconChevron direction={collapsed ? 'down' : 'up'} size=\"xs\" />\n            </Collapse>\n          </div>\n        </Controls>\n\n        {!collapsed && (\n          <MergedEventList className=\"event-list\">\n            {latestEvent && (\n              <EventDetails className=\"event-details\">\n                <EventOrGroupHeader\n                  data={latestEvent}\n                  organization={organization}\n                  hideIcons\n                  hideLevel\n                />\n              </EventDetails>\n            )}\n          </MergedEventList>\n        )}\n      </MergedGroup>\n    );\n  }\n}\n\nconst MergedGroup = styled('div')<{busy: boolean}>`\n  ${p => p.busy && 'opacity: 0.2'};\n`;\n\nconst ActionWrapper = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  align-items: center;\n  gap: ${space(1)};\n\n  /* Can't use styled components for this because of broad selector */\n  input[type='checkbox'] {\n    margin: 0;\n  }\n`;\n\nconst Controls = styled('div')<{expanded: boolean}>`\n  display: flex;\n  justify-content: space-between;\n  border-top: 1px solid ${p => p.theme.innerBorder};\n  background-color: ${p => p.theme.backgroundSecondary};\n  padding: ${space(0.5)} ${space(1)};\n  ${p => p.expanded && `border-bottom: 1px solid ${p.theme.innerBorder}`};\n\n  ${MergedGroup} {\n    &:first-child & {\n      border-top: none;\n    }\n    &:last-child & {\n      border-top: none;\n      border-bottom: 1px solid ${p => p.theme.innerBorder};\n    }\n  }\n`;\n\nconst FingerprintLabel = styled('label')`\n  font-family: ${p => p.theme.text.familyMono};\n\n  ${/* sc-selector */ Controls} & {\n    font-weight: 400;\n    margin: 0;\n  }\n`;\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n\nconst MergedEventList = styled('div')`\n  overflow: hidden;\n  border: none;\n  background-color: ${p => p.theme.background};\n`;\n\nconst EventDetails = styled('div')`\n  display: flex;\n  justify-content: space-between;\n\n  .event-list & {\n    padding: ${space(1)};\n  }\n`;\n\nexport default MergedItem;\n","import {Fragment} from 'react';\n\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport QueryCount from 'sentry/components/queryCount';\nimport {t} from 'sentry/locale';\nimport {Fingerprint} from 'sentry/stores/groupingStore';\nimport {Group, Organization, Project} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport MergedItem from './mergedItem';\nimport MergedToolbar from './mergedToolbar';\n\ntype Props = {\n  groupId: Group['id'];\n  /*\n   * From GroupingActions.toggleCollapseFingerprints\n   */\n  onToggleCollapse: () => void;\n  /**\n   * From GroupMergedView -> handleUnmerge\n   */\n  onUnmerge: () => void;\n  organization: Organization;\n  project: Project;\n  fingerprints?: Fingerprint[];\n  pageLinks?: string;\n};\n\nfunction MergedList({\n  fingerprints = [],\n  pageLinks,\n  onToggleCollapse,\n  onUnmerge,\n  organization,\n  groupId,\n  project,\n}: Props) {\n  const fingerprintsWithLatestEvent = fingerprints.filter(\n    ({latestEvent}) => !!latestEvent\n  );\n  const hasResults = fingerprintsWithLatestEvent.length > 0;\n\n  if (!hasResults) {\n    return (\n      <Panel>\n        <EmptyStateWarning>\n          <p>{t(\"There don't seem to be any hashes for this issue.\")}</p>\n        </EmptyStateWarning>\n      </Panel>\n    );\n  }\n\n  return (\n    <Fragment>\n      <h4>\n        <span>{t('Merged fingerprints with latest event')}</span>{' '}\n        <QueryCount count={fingerprintsWithLatestEvent.length} />\n      </h4>\n\n      <Panel>\n        <MergedToolbar\n          onToggleCollapse={onToggleCollapse}\n          onUnmerge={onUnmerge}\n          orgId={organization.slug}\n          project={project}\n          groupId={groupId}\n        />\n\n        <PanelBody>\n          {fingerprintsWithLatestEvent.map(fingerprint => (\n            <MergedItem\n              key={fingerprint.id}\n              organization={organization}\n              fingerprint={fingerprint}\n            />\n          ))}\n        </PanelBody>\n      </Panel>\n      {pageLinks && <Pagination pageLinks={pageLinks} />}\n    </Fragment>\n  );\n}\n\nexport default withOrganization(MergedList);\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport pick from 'lodash/pick';\n\nimport {openDiffModal} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport {PanelHeader} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport GroupingStore from 'sentry/stores/groupingStore';\nimport space from 'sentry/styles/space';\nimport {Group, Organization, Project} from 'sentry/types';\n\ntype Props = {\n  groupId: Group['id'];\n  onToggleCollapse: () => void;\n  onUnmerge: () => void;\n  orgId: Organization['slug'];\n  project: Project;\n};\n\ntype State = {\n  enableFingerprintCompare: boolean;\n  unmergeDisabled: boolean;\n  unmergeLastCollapsed: boolean;\n  unmergeList: Map<any, any>;\n};\n\nclass MergedToolbar extends Component<Props, State> {\n  state: State = this.getInitialState();\n\n  getInitialState() {\n    // @ts-ignore GroupingStore types are not correct, store.init dinamically sets these\n    const {unmergeList, unmergeLastCollapsed, unmergeDisabled, enableFingerprintCompare} =\n      GroupingStore;\n\n    return {\n      enableFingerprintCompare,\n      unmergeList,\n      unmergeLastCollapsed,\n      unmergeDisabled,\n    };\n  }\n\n  componentWillUnmount() {\n    this.listener?.();\n  }\n\n  listener = GroupingStore.listen(data => this.onGroupChange(data), undefined);\n\n  onGroupChange = updateObj => {\n    const allowedKeys = [\n      'unmergeLastCollapsed',\n      'unmergeDisabled',\n      'unmergeList',\n      'enableFingerprintCompare',\n    ];\n\n    this.setState(pick(updateObj, allowedKeys));\n  };\n\n  handleShowDiff = (event: React.MouseEvent) => {\n    const {groupId, project, orgId} = this.props;\n    const {unmergeList} = this.state;\n\n    const entries = unmergeList.entries();\n\n    // `unmergeList` should only have 2 items in map\n    if (unmergeList.size !== 2) {\n      return;\n    }\n\n    // only need eventId, not fingerprint\n    const [baseEventId, targetEventId] = Array.from(entries).map(\n      ([, eventId]) => eventId\n    );\n\n    openDiffModal({\n      targetIssueId: groupId,\n      project,\n      baseIssueId: groupId,\n      orgId,\n      baseEventId,\n      targetEventId,\n    });\n\n    event.stopPropagation();\n  };\n\n  render() {\n    const {onUnmerge, onToggleCollapse} = this.props;\n\n    const {unmergeList, unmergeLastCollapsed, unmergeDisabled, enableFingerprintCompare} =\n      this.state;\n    const unmergeCount = (unmergeList && unmergeList.size) || 0;\n\n    return (\n      <PanelHeader hasButtons>\n        <div>\n          <Confirm\n            disabled={unmergeDisabled}\n            onConfirm={onUnmerge}\n            message={t(\n              'These events will be unmerged and grouped into a new issue. Are you sure you want to unmerge these events?'\n            )}\n          >\n            <Button\n              size=\"sm\"\n              title={tct('Unmerging [unmergeCount] events', {unmergeCount})}\n            >\n              {t('Unmerge')} ({unmergeCount || 0})\n            </Button>\n          </Confirm>\n\n          <CompareButton\n            size=\"sm\"\n            disabled={!enableFingerprintCompare}\n            onClick={this.handleShowDiff}\n          >\n            {t('Compare')}\n          </CompareButton>\n        </div>\n        <Button size=\"sm\" onClick={onToggleCollapse}>\n          {unmergeLastCollapsed ? t('Expand All') : t('Collapse All')}\n        </Button>\n      </PanelHeader>\n    );\n  }\n}\n\nexport default MergedToolbar;\n\nconst CompareButton = styled(Button)`\n  margin-left: ${space(1)};\n`;\n"],"names":["Component","qs","GroupingActions","Alert","Layout","LoadingError","LoadingIndicator","t","GroupingStore","callIfFunction","withOrganization","MergedList","GroupMergedView","mergedItems","loading","error","query","props","location","mergedLinks","setState","listen","onGroupingChange","undefined","fetch","endpoint","getEndpoint","dataKey","queryParams","unmerge","groupId","params","loadingMessage","successMessage","errorMessage","componentDidMount","fetchData","componentWillReceiveProps","nextProps","search","componentWillUnmount","listener","limit","state","stringify","render","project","isLoading","isError","isLoadedSuccessfully","handleUnmerge","toggleCollapseFingerprints","Checkbox","EventOrGroupHeader","Tooltip","IconChevron","space","MergedItem","collapsed","checked","busy","data","onGroupChange","unmergeState","fingerprint","stateForId","has","id","get","Object","keys","forEach","key","prevState","toggleCollapseFingerprint","latestEvent","toggleUnmerge","handleLabelClick","event","preventDefault","handleCheckClick","renderFingerprint","label","organization","checkboxDisabled","handleToggle","handleToggleEvents","MergedGroup","p","ActionWrapper","Controls","theme","innerBorder","backgroundSecondary","expanded","FingerprintLabel","text","familyMono","Collapse","MergedEventList","background","EventDetails","Fragment","EmptyStateWarning","Pagination","Panel","PanelBody","QueryCount","MergedToolbar","fingerprints","pageLinks","onToggleCollapse","onUnmerge","fingerprintsWithLatestEvent","filter","hasResults","length","slug","map","pick","openDiffModal","Button","Confirm","PanelHeader","tct","getInitialState","updateObj","allowedKeys","orgId","unmergeList","entries","size","baseEventId","targetEventId","Array","from","eventId","targetIssueId","baseIssueId","stopPropagation","unmergeLastCollapsed","unmergeDisabled","enableFingerprintCompare","unmergeCount","handleShowDiff","CompareButton"],"sourceRoot":""}