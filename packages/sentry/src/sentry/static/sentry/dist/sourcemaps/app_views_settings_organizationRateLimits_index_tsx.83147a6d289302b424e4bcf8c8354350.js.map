{"version":3,"file":"chunks/app_views_settings_organizationRateLimits_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/organizationRateLimits/index.tsx","webpack:///./app/views/settings/organizationRateLimits/organizationRateLimits.tsx"],"sourcesContent":["import withOrganization from 'sentry/utils/withOrganization';\n\nimport OrganizationRateLimits from './organizationRateLimits';\n\nconst OrganizationRateLimitsContainer = (\n  props: React.ComponentProps<typeof OrganizationRateLimits>\n) => (!props.organization ? null : <OrganizationRateLimits {...props} />);\n\nexport default withOrganization(OrganizationRateLimitsContainer);\n","import {RouteComponentProps} from 'react-router';\n\nimport Field from 'sentry/components/forms/field';\nimport Form from 'sentry/components/forms/form';\nimport RangeField from 'sentry/components/forms/rangeField';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = RouteComponentProps<{}, {}> & {\n  organization: Organization;\n};\n\nconst getRateLimitValues = () => {\n  const steps: number[] = [];\n  let i = 0;\n  while (i <= 1000000) {\n    steps.push(i);\n    if (i < 10000) {\n      i += 1000;\n    } else if (i < 100000) {\n      i += 10000;\n    } else {\n      i += 100000;\n    }\n  }\n  return steps;\n};\n\n// We can just generate this once\nconst ACCOUNT_RATE_LIMIT_VALUES = getRateLimitValues();\n\nconst OrganizationRateLimit = ({organization}: Props) => {\n  // TODO(billy): Update organization.quota in organizationStore with new values\n\n  const {quota} = organization;\n  const {maxRate, maxRateInterval, projectLimit, accountLimit} = quota;\n  const initialData = {\n    projectRateLimit: projectLimit || 100,\n    accountRateLimit: accountLimit,\n  };\n\n  return (\n    <div>\n      <SettingsPageHeader title={t('Rate Limits')} />\n\n      <Panel>\n        <PanelHeader>{t('Adjust Limits')}</PanelHeader>\n        <PanelBody>\n          <PanelAlert type=\"info\">\n            {t(`Rate limits allow you to control how much data is stored for this\n                organization. When a rate is exceeded the system will begin discarding\n                data until the next interval.`)}\n          </PanelAlert>\n\n          <Form\n            data-test-id=\"rate-limit-editor\"\n            saveOnBlur\n            allowUndo\n            apiMethod=\"PUT\"\n            apiEndpoint={`/organizations/${organization.slug}/`}\n            initialData={initialData}\n          >\n            {!maxRate ? (\n              <RangeField\n                name=\"accountRateLimit\"\n                label={t('Account Limit')}\n                min={0}\n                max={1000000}\n                allowedValues={ACCOUNT_RATE_LIMIT_VALUES}\n                help={t(\n                  'The maximum number of events to accept across this entire organization.'\n                )}\n                placeholder=\"e.g. 500\"\n                formatLabel={value =>\n                  !value\n                    ? t('No Limit')\n                    : tct('[number] per hour', {\n                        number: value.toLocaleString(),\n                      })\n                }\n              />\n            ) : (\n              <Field\n                label={t('Account Limit')}\n                help={t(\n                  'The maximum number of events to accept across this entire organization.'\n                )}\n              >\n                <TextBlock css={{marginBottom: 0}}>\n                  {tct(\n                    'Your account is limited to a maximum of [maxRate] events per [maxRateInterval] seconds.',\n                    {\n                      maxRate,\n                      maxRateInterval,\n                    }\n                  )}\n                </TextBlock>\n              </Field>\n            )}\n            <RangeField\n              name=\"projectRateLimit\"\n              label={t('Per-Project Limit')}\n              help={t(\n                'The maximum percentage of the account limit (set above) that an individual project can consume.'\n              )}\n              step={5}\n              min={50}\n              max={100}\n              formatLabel={value =>\n                value !== 100 ? (\n                  `${value}%`\n                ) : (\n                  <span\n                    dangerouslySetInnerHTML={{__html: `${t('No Limit')} &mdash; 100%`}}\n                  />\n                )\n              }\n            />\n          </Form>\n        </PanelBody>\n      </Panel>\n    </div>\n  );\n};\n\nexport default OrganizationRateLimit;\n"],"names":["withOrganization","OrganizationRateLimits","OrganizationRateLimitsContainer","props","organization","Field","Form","RangeField","Panel","PanelAlert","PanelBody","PanelHeader","t","tct","SettingsPageHeader","TextBlock","getRateLimitValues","steps","i","push","ACCOUNT_RATE_LIMIT_VALUES","OrganizationRateLimit","quota","maxRate","maxRateInterval","projectLimit","accountLimit","initialData","projectRateLimit","accountRateLimit","slug","value","number","toLocaleString","__html"],"sourceRoot":""}