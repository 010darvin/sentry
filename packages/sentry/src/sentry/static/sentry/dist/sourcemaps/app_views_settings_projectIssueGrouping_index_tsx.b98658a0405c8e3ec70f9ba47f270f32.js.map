{"version":3,"file":"chunks/app_views_settings_projectIssueGrouping_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectIssueGrouping/index.tsx","webpack:///./app/views/settings/projectIssueGrouping/upgradeGrouping.tsx","webpack:///./app/views/settings/projectIssueGrouping/utils.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport ProjectActions from 'sentry/actions/projectActions';\nimport Feature from 'sentry/components/acl/feature';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {fields} from 'sentry/data/forms/projectIssueGrouping';\nimport {t, tct} from 'sentry/locale';\nimport {EventGroupingConfig, Organization, Project} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nimport UpgradeGrouping from './upgradeGrouping';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  groupingConfigs: EventGroupingConfig[] | null;\n} & AsyncView['state'];\n\nclass ProjectIssueGrouping extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n\n    return routeTitleGen(t('Issue Grouping'), projectId, false);\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      groupingConfigs: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {projectId, orgId} = this.props.params;\n    return [['groupingConfigs', `/projects/${orgId}/${projectId}/grouping-configs/`]];\n  }\n\n  handleSubmit = (response: Project) => {\n    // This will update our project context\n    ProjectActions.updateSuccess(response);\n  };\n\n  renderBody() {\n    const {groupingConfigs} = this.state;\n    const {organization, project, params, location} = this.props;\n    const {orgId, projectId} = params;\n    const endpoint = `/projects/${orgId}/${projectId}/`;\n    const access = new Set(organization.access);\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n        groupingConfigs,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !access.has('project:write'),\n    };\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Issue Grouping')} />\n\n        <TextBlock>\n          {tct(\n            `All events have a fingerprint. Events with the same fingerprint are grouped together into an issue. To learn more about issue grouping, [link: read the docs].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/data-management-settings/event-grouping/\" />\n              ),\n            }\n          )}\n        </TextBlock>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={project}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={this.handleSubmit}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Fingerprint Rules')}\n            fields={[fields.fingerprintingRules]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Stack Trace Rules')}\n            fields={[fields.groupingEnhancements]}\n          />\n\n          <Feature features={['set-grouping-config']} organization={organization}>\n            <JsonForm\n              {...jsonFormProps}\n              title={t('Change defaults')}\n              fields={[\n                fields.groupingConfig,\n                fields.secondaryGroupingConfig,\n                fields.secondaryGroupingExpiry,\n              ]}\n            />\n          </Feature>\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Automatic Grouping Updates')}\n            fields={[fields.groupingAutoUpdate]}\n          />\n\n          <UpgradeGrouping\n            groupingConfigs={groupingConfigs ?? []}\n            organization={organization}\n            projectId={params.projectId}\n            project={project}\n            api={this.api}\n            onUpgrade={this.fetchData}\n            location={location}\n          />\n        </Form>\n      </Fragment>\n    );\n  }\n}\n\nexport default ProjectIssueGrouping;\n","import {Fragment, useEffect} from 'react';\nimport {Location} from 'history';\n\nimport {addLoadingMessage, clearIndicators} from 'sentry/actionCreators/indicator';\nimport ProjectActions from 'sentry/actions/projectActions';\nimport {Client} from 'sentry/api';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport {openConfirmModal} from 'sentry/components/confirm';\nimport Field from 'sentry/components/forms/field';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport {EventGroupingConfig, Organization, Project} from 'sentry/types';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport marked from 'sentry/utils/marked';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nimport {getGroupingChanges, getGroupingRisk} from './utils';\n\nconst upgradeGroupingId = 'upgrade-grouping';\n\ntype Props = {\n  api: Client;\n  groupingConfigs: EventGroupingConfig[];\n  location: Location;\n  onUpgrade: () => void;\n  organization: Organization;\n  project: Project;\n  projectId: string;\n};\n\nfunction UpgradeGrouping({\n  groupingConfigs,\n  organization,\n  projectId,\n  project,\n  onUpgrade,\n  api,\n  location,\n}: Props) {\n  const hasProjectWriteAccess = organization.access.includes('project:write');\n  const {updateNotes, riskLevel, latestGroupingConfig} = getGroupingChanges(\n    project,\n    groupingConfigs\n  );\n  const {riskNote, alertType} = getGroupingRisk(riskLevel);\n  const noUpdates = project.groupingAutoUpdate || !latestGroupingConfig;\n  const priority = riskLevel >= 2 ? 'danger' : 'primary';\n\n  useEffect(() => {\n    if (\n      location.hash !== `#${upgradeGroupingId}` ||\n      noUpdates ||\n      !groupingConfigs ||\n      !hasProjectWriteAccess\n    ) {\n      return;\n    }\n    handleOpenConfirmModal();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.hash]);\n\n  if (!groupingConfigs) {\n    return null;\n  }\n\n  async function handleConfirmUpgrade() {\n    const newData: Record<string, string | number> = {};\n\n    if (latestGroupingConfig) {\n      const now = Math.floor(new Date().getTime() / 1000);\n      const ninety_days = 3600 * 24 * 90;\n\n      newData.groupingConfig = latestGroupingConfig.id;\n      newData.secondaryGroupingConfig = project.groupingConfig;\n      newData.secondaryGroupingExpiry = now + ninety_days;\n    }\n\n    addLoadingMessage(t('Changing grouping\\u2026'));\n    try {\n      const response = await api.requestPromise(\n        `/projects/${organization.slug}/${projectId}/`,\n        {\n          method: 'PUT',\n          data: newData,\n        }\n      );\n      clearIndicators();\n      ProjectActions.updateSuccess(response);\n      onUpgrade();\n    } catch {\n      handleXhrErrorResponse(t('Unable to upgrade config'));\n    }\n  }\n\n  function handleOpenConfirmModal() {\n    openConfirmModal({\n      confirmText: t('Upgrade'),\n      priority,\n      onConfirm: handleConfirmUpgrade,\n      message: (\n        <Fragment>\n          <TextBlock>\n            <strong>{t('Upgrade Grouping Strategy')}</strong>\n          </TextBlock>\n          <TextBlock>\n            {t(\n              'You can upgrade the grouping strategy to the latest but this is an irreversible operation.'\n            )}\n          </TextBlock>\n          <TextBlock>\n            <strong>{t('New Behavior')}</strong>\n            <div dangerouslySetInnerHTML={{__html: marked(updateNotes)}} />\n          </TextBlock>\n          <TextBlock>\n            <Alert type={alertType}>{riskNote}</Alert>\n          </TextBlock>\n        </Fragment>\n      ),\n    });\n  }\n\n  function getButtonTitle() {\n    if (project.groupingAutoUpdate) {\n      return t('Disabled because automatic upgrading is enabled');\n    }\n\n    if (!hasProjectWriteAccess) {\n      return t('You do not have sufficient permissions to do this');\n    }\n\n    if (noUpdates) {\n      return t('You are already on the latest version');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <Panel id={upgradeGroupingId}>\n      <PanelHeader>{t('Upgrade Grouping')}</PanelHeader>\n      <PanelBody>\n        <Field\n          label={t('Upgrade Grouping Strategy')}\n          help={tct(\n            'If the project uses an old grouping strategy an update is possible.[linebreak]Doing so will cause new events to group differently.',\n            {\n              linebreak: <br />,\n            }\n          )}\n          disabled\n        >\n          <div>\n            <Button\n              onClick={handleOpenConfirmModal}\n              disabled={!hasProjectWriteAccess || noUpdates}\n              title={getButtonTitle()}\n              type=\"button\"\n              priority={priority}\n            >\n              {t('Upgrade Grouping Strategy')}\n            </Button>\n          </div>\n        </Field>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default UpgradeGrouping;\n","import Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {EventGroupingConfig, Project} from 'sentry/types';\n\nexport function getGroupingChanges(\n  project: Project,\n  groupingConfigs: EventGroupingConfig[]\n): {\n  latestGroupingConfig: EventGroupingConfig | null;\n  riskLevel: number;\n  updateNotes: string;\n} {\n  const byId: Record<string, EventGroupingConfig> = {};\n  let updateNotes: string = '';\n  let riskLevel: number = 0;\n  let latestGroupingConfig: EventGroupingConfig | null = null;\n\n  groupingConfigs.forEach(cfg => {\n    byId[cfg.id] = cfg;\n    if (cfg.latest && project.groupingConfig !== cfg.id) {\n      updateNotes = cfg.changelog;\n      latestGroupingConfig = cfg;\n      riskLevel = cfg.risk;\n    }\n  });\n\n  if (latestGroupingConfig) {\n    let next = (latestGroupingConfig as EventGroupingConfig).base ?? '';\n    while (next !== project.groupingConfig) {\n      const cfg = byId[next];\n      if (!cfg) {\n        break;\n      }\n      riskLevel = Math.max(riskLevel, cfg.risk);\n      updateNotes = cfg.changelog + '\\n' + updateNotes;\n      next = cfg.base ?? '';\n    }\n  }\n\n  return {updateNotes, riskLevel, latestGroupingConfig};\n}\n\nexport function getGroupingRisk(riskLevel: number): {\n  alertType: React.ComponentProps<typeof Alert>['type'];\n  riskNote: React.ReactNode;\n} {\n  switch (riskLevel) {\n    case 0:\n      return {\n        riskNote: t('This upgrade has the chance to create some new issues.'),\n        alertType: 'info',\n      };\n    case 1:\n      return {\n        riskNote: t('This upgrade will create some new issues.'),\n        alertType: 'warning',\n      };\n    case 2:\n      return {\n        riskNote: (\n          <strong>\n            {t(\n              'The new grouping strategy is incompatible with the current and will create entirely new issues.'\n            )}\n          </strong>\n        ),\n        alertType: 'error',\n      };\n    default:\n      return {riskNote: undefined, alertType: undefined};\n  }\n}\n"],"names":["routeTitleGen","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncComponent","SentryDocumentTitle","AsyncView","getTitle","render","renderComponent","Fragment","ProjectActions","Feature","Form","JsonForm","ExternalLink","fields","t","tct","SettingsPageHeader","TextBlock","UpgradeGrouping","ProjectIssueGrouping","response","updateSuccess","projectId","props","params","getDefaultState","groupingConfigs","getEndpoints","orgId","renderBody","state","organization","project","location","endpoint","access","Set","jsonFormProps","additionalFieldProps","features","disabled","has","link","handleSubmit","fingerprintingRules","groupingEnhancements","groupingConfig","secondaryGroupingConfig","secondaryGroupingExpiry","groupingAutoUpdate","api","fetchData","useEffect","addLoadingMessage","clearIndicators","Alert","Button","openConfirmModal","Field","Panel","PanelBody","PanelHeader","handleXhrErrorResponse","marked","getGroupingChanges","getGroupingRisk","upgradeGroupingId","onUpgrade","hasProjectWriteAccess","includes","updateNotes","riskLevel","latestGroupingConfig","riskNote","alertType","noUpdates","priority","hash","handleOpenConfirmModal","handleConfirmUpgrade","newData","now","Math","floor","Date","getTime","ninety_days","id","requestPromise","slug","method","data","confirmText","onConfirm","message","__html","getButtonTitle","undefined","linebreak","byId","forEach","cfg","latest","changelog","risk","next","base","max"],"sourceRoot":""}