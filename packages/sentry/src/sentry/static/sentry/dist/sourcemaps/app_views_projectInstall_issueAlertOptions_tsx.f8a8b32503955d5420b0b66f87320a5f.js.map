{"version":3,"file":"chunks/app_views_projectInstall_issueAlertOptions_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/MultipleCheckboxField.tsx","webpack:///./app/views/alerts/rules/metric/presets.tsx","webpack:///./app/views/projectInstall/issueAlertOptions.tsx"],"sourcesContent":["import {Key} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\nimport CheckboxFancy from '../checkboxFancy/checkboxFancy';\n\ntype CheckboxOption<T> = {\n  title: string;\n  value: T;\n  checked?: boolean;\n  disabled?: boolean;\n  intermediate?: boolean;\n};\n\ntype Props<T> = {\n  choices: CheckboxOption<T>[];\n  className?: string;\n  onClick?(item: T);\n  size?: string;\n};\n\nexport default function MultipleCheckboxField<T extends Key>(props: Props<T>) {\n  return (\n    <div className={props.className}>\n      {props.choices.map(option => (\n        <CheckboxWrapper key={option.value.toString()}>\n          <CheckboxFancy\n            size={props.size}\n            isDisabled={option.disabled}\n            isChecked={option.checked}\n            isIndeterminate={option.intermediate}\n            onClick={() => {\n              props.onClick?.(option.value);\n            }}\n          />\n          <CheckboxText>{option.title}</CheckboxText>\n        </CheckboxWrapper>\n      ))}\n    </div>\n  );\n}\n\nconst CheckboxWrapper = styled('div')`\n  margin-bottom: ${space(2)};\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst CheckboxText = styled('span')`\n  margin-left: ${space(1)};\n`;\n","import {Client} from 'sentry/api';\nimport {IconGraph} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {uniqueId} from 'sentry/utils/guid';\n\nimport {AlertType} from '../../wizard/options';\n\nimport {\n  ActionType,\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  Dataset,\n  EventTypes,\n  TargetType,\n  Trigger,\n} from './types';\n\nexport type PresetContext = {\n  aggregate: string;\n  comparisonType: AlertRuleComparisonType;\n  dataset: Dataset;\n  eventTypes: EventTypes[];\n  name: string;\n  thresholdType: AlertRuleThresholdType;\n\n  triggers: Trigger[];\n  comparisonDelta?: number;\n  query?: string;\n  timeWindow?: number;\n};\nexport type Preset = {\n  Icon: typeof IconGraph;\n  // Will be shown on the corresponding alert type in the wizard.\n  alertType: AlertType;\n  description: string;\n  id: string;\n  makeContext(\n    client: Client,\n    project: Project,\n    organization: Organization\n  ): Promise<PresetContext>;\n  makeUnqueriedContext(project: Project, organization: Organization): PresetContext;\n  title: string;\n};\n\nasync function getHighestVolumeTransaction(\n  client: Client,\n  organizationSlug: string,\n  projectId: string\n): Promise<[string, number] | null> {\n  const result = await client.requestPromise(\n    `/organizations/${organizationSlug}/events/`,\n    {\n      method: 'GET',\n      data: {\n        statsPeriod: '7d',\n        project: projectId,\n        field: ['count()', 'transaction'],\n        sort: '-count',\n        referrer: 'alert.presets.highest-volume',\n        query: 'event.type:transaction',\n        per_page: 1,\n      },\n    }\n  );\n  const transaction = result.data[0];\n  if (transaction) {\n    return [transaction.transaction, transaction['count()']];\n  }\n  return null;\n}\n\nfunction makeTeamCriticalAlert(project: Project, threshold: number = 200) {\n  return {\n    label: AlertRuleTriggerType.CRITICAL,\n    alertThreshold: threshold,\n    actions: project.teams.slice(0, 4).map(team => ({\n      type: ActionType.EMAIL,\n      targetType: TargetType.TEAM,\n      targetIdentifier: team.id,\n      unsavedDateCreated: new Date().toISOString(),\n      inputChannelId: null,\n      options: null,\n      unsavedId: uniqueId(),\n    })),\n  };\n}\nfunction makeTeamWarningAlert(threshold: number = 100) {\n  return {\n    label: AlertRuleTriggerType.WARNING,\n    alertThreshold: threshold,\n    actions: [],\n  };\n}\n\nexport const PRESET_AGGREGATES: readonly Preset[] = [\n  {\n    id: 'p95-highest-volume',\n    title: t('Slow transactions'),\n    description: 'Get notified when important transactions are slower on average',\n    Icon: IconGraph,\n    alertType: 'trans_duration',\n    makeUnqueriedContext(project, _) {\n      return {\n        name: t('p95 Alert for %s', [project.slug]),\n        aggregate: 'p95(transaction.duration)',\n        dataset: Dataset.TRANSACTIONS,\n        eventTypes: [EventTypes.TRANSACTION],\n        timeWindow: 60,\n        comparisonDelta: 1440,\n        comparisonType: AlertRuleComparisonType.CHANGE,\n        thresholdType: AlertRuleThresholdType.ABOVE,\n        triggers: [makeTeamCriticalAlert(project), makeTeamWarningAlert()],\n      };\n    },\n    async makeContext(client, project, organization) {\n      const transaction = (\n        await getHighestVolumeTransaction(client, organization.slug, project.id)\n      )?.[0];\n      return {\n        ...this.makeUnqueriedContext(project, organization),\n        query: 'transaction:' + transaction,\n      };\n    },\n  },\n  {\n    id: 'throughput-highest-volume',\n    title: t('Throttled throughput'),\n    description: 'Send an alert when transaction throughput drops significantly',\n    Icon: IconGraph,\n    alertType: 'throughput',\n    makeUnqueriedContext(project, _) {\n      return {\n        name: t('Throughput Alert for %s', [project.slug]),\n        aggregate: 'count()',\n        dataset: Dataset.TRANSACTIONS,\n        eventTypes: [EventTypes.TRANSACTION],\n        timeWindow: 30,\n        comparisonDelta: 24 * 60 * 7,\n        comparisonType: AlertRuleComparisonType.CHANGE,\n        thresholdType: AlertRuleThresholdType.BELOW,\n        triggers: [makeTeamCriticalAlert(project, 500), makeTeamWarningAlert(300)],\n      };\n    },\n    async makeContext(client, project, organization) {\n      const transaction = (\n        await getHighestVolumeTransaction(client, organization.slug, project.id)\n      )?.[0];\n      return {\n        ...this.makeUnqueriedContext(project, organization),\n        query: 'transaction:' + transaction,\n      };\n    },\n  },\n  {\n    id: 'apdex-highest-volume',\n    title: t('Apdex Score'),\n    description:\n      'Learn when the ratio of satisfactory, tolerable, and frustrated requests drop',\n    Icon: IconGraph,\n    alertType: 'apdex',\n    makeUnqueriedContext(project, _) {\n      return {\n        name: t('Apdex regression for %s', [project.slug]),\n        aggregate: 'apdex(300)',\n        dataset: Dataset.TRANSACTIONS,\n        eventTypes: [EventTypes.TRANSACTION],\n        timeWindow: 30,\n        comparisonDelta: 24 * 60 * 7,\n        comparisonType: AlertRuleComparisonType.CHANGE,\n        thresholdType: AlertRuleThresholdType.BELOW,\n        triggers: [makeTeamCriticalAlert(project), makeTeamWarningAlert()],\n      };\n    },\n    async makeContext(client, project, organization) {\n      const transaction = (\n        await getHighestVolumeTransaction(client, organization.slug, project.id)\n      )?.[0];\n      return {\n        ...this.makeUnqueriedContext(project, organization),\n        query: 'transaction:' + transaction,\n      };\n    },\n  },\n] as const;\n","import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport isEqual from 'lodash/isEqual';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport RadioGroup from 'sentry/components/forms/controls/radioGroup';\nimport MultipleCheckboxField from 'sentry/components/forms/MultipleCheckboxField';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport Input from 'sentry/components/input';\nimport PageHeading from 'sentry/components/pageHeading';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport {PRESET_AGGREGATES} from '../alerts/rules/metric/presets';\n\nenum MetricValues {\n  ERRORS,\n  USERS,\n}\nenum Actions {\n  ALERT_ON_EVERY_ISSUE,\n  CUSTOMIZED_ALERTS,\n  CREATE_ALERT_LATER,\n}\n\nconst UNIQUE_USER_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition';\nconst EVENT_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyCondition';\nconst NOTIFY_EVENT_ACTION = 'sentry.rules.actions.notify_event.NotifyEventAction';\nexport const EVENT_FREQUENCY_PERCENT_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyPercentCondition';\n\nconst METRIC_CONDITION_MAP = {\n  [MetricValues.ERRORS]: EVENT_FREQUENCY_CONDITION,\n  [MetricValues.USERS]: UNIQUE_USER_FREQUENCY_CONDITION,\n} as const;\n\nconst DEFAULT_PLACEHOLDER_VALUE = '10';\n\ntype StateUpdater = (updatedData: RequestDataFragment) => void;\ntype Props = AsyncComponent['props'] & {\n  onChange: StateUpdater;\n  organization: Organization;\n};\n\ntype State = AsyncComponent['state'] & {\n  alertSetting: string;\n  // TODO(ts): When we have alert conditional types, convert this\n  conditions: any;\n  interval: string;\n  intervalChoices: [string, string][] | undefined;\n  metric: MetricValues;\n  metricAlertPresets: Set<string>;\n\n  threshold: string;\n};\n\ntype RequestDataFragment = {\n  actionMatch: string;\n  actions: {id: string}[];\n  conditions: {id: string; interval: string; value: string}[] | undefined;\n  defaultRules: boolean;\n  frequency: number;\n  metricAlertPresets: string[];\n  name: string;\n  shouldCreateCustomRule: boolean;\n};\n\nfunction getConditionFrom(\n  interval: string,\n  metricValue: MetricValues,\n  threshold: string\n): {id: string; interval: string; value: string} {\n  let condition: string;\n  switch (metricValue) {\n    case MetricValues.ERRORS:\n      condition = EVENT_FREQUENCY_CONDITION;\n      break;\n    case MetricValues.USERS:\n      condition = UNIQUE_USER_FREQUENCY_CONDITION;\n      break;\n    default:\n      throw new RangeError('Supplied metric value is not handled');\n  }\n  return {\n    interval,\n    id: condition,\n    value: threshold,\n  };\n}\n\nfunction unpackConditions(conditions: any[]) {\n  const equalityReducer = (acc, curr) => {\n    if (!acc || !curr || !isEqual(acc, curr)) {\n      return null;\n    }\n    return acc;\n  };\n\n  const intervalChoices = conditions\n    .map(condition => condition.formFields?.interval?.choices)\n    .reduce(equalityReducer);\n  return {intervalChoices, interval: intervalChoices?.[0]?.[0]};\n}\n\nclass IssueAlertOptions extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      conditions: [],\n      intervalChoices: [],\n      alertSetting: Actions.CREATE_ALERT_LATER.toString(),\n      metric: MetricValues.ERRORS,\n      interval: '',\n      threshold: '',\n      metricAlertPresets: new Set(),\n    };\n  }\n\n  getAvailableMetricOptions() {\n    return [\n      {value: MetricValues.ERRORS, label: t('occurrences of')},\n      {value: MetricValues.USERS, label: t('users affected by')},\n    ].filter(({value}) => {\n      return this.state.conditions?.some?.(\n        object => object?.id === METRIC_CONDITION_MAP[value]\n      );\n    });\n  }\n\n  getIssueAlertsChoices(\n    hasProperlyLoadedConditions: boolean\n  ): [string, string | React.ReactElement][] {\n    const options: [string, React.ReactNode][] = [\n      [Actions.CREATE_ALERT_LATER.toString(), t(\"I'll create my own alerts later\")],\n      [Actions.ALERT_ON_EVERY_ISSUE.toString(), t('Alert me on every new issue')],\n    ];\n\n    if (hasProperlyLoadedConditions) {\n      options.push([\n        Actions.CUSTOMIZED_ALERTS.toString(),\n        <CustomizeAlertsGrid\n          key={Actions.CUSTOMIZED_ALERTS}\n          onClick={e => {\n            // XXX(epurkhiser): The `e.preventDefault` here is needed to stop\n            // propagation of the click up to the label, causing it to focus\n            // the radio input and lose focus on the select.\n            e.preventDefault();\n            const alertSetting = Actions.CUSTOMIZED_ALERTS.toString();\n            this.setStateAndUpdateParents({alertSetting});\n          }}\n        >\n          {t('When there are more than')}\n          <InlineInput\n            type=\"number\"\n            min=\"0\"\n            name=\"\"\n            placeholder={DEFAULT_PLACEHOLDER_VALUE}\n            value={this.state.threshold}\n            onChange={threshold =>\n              this.setStateAndUpdateParents({threshold: threshold.target.value})\n            }\n            data-test-id=\"range-input\"\n          />\n          <InlineSelectControl\n            value={this.state.metric}\n            options={this.getAvailableMetricOptions()}\n            onChange={metric => this.setStateAndUpdateParents({metric: metric.value})}\n            data-test-id=\"metric-select-control\"\n          />\n          {t('a unique error in')}\n          <InlineSelectControl\n            value={this.state.interval}\n            options={this.state.intervalChoices?.map(([value, label]) => ({\n              value,\n              label,\n            }))}\n            onChange={interval =>\n              this.setStateAndUpdateParents({interval: interval.value})\n            }\n            data-test-id=\"interval-select-control\"\n          />\n        </CustomizeAlertsGrid>,\n      ]);\n    }\n    return options.map(([choiceValue, node]) => [\n      choiceValue,\n      <RadioItemWrapper key={choiceValue}>{node}</RadioItemWrapper>,\n    ]);\n  }\n\n  getUpdatedData(): RequestDataFragment {\n    let defaultRules: boolean;\n    let shouldCreateCustomRule: boolean;\n    const alertSetting: Actions = parseInt(this.state.alertSetting, 10);\n    switch (alertSetting) {\n      case Actions.ALERT_ON_EVERY_ISSUE:\n        defaultRules = true;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CREATE_ALERT_LATER:\n        defaultRules = false;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CUSTOMIZED_ALERTS:\n        defaultRules = false;\n        shouldCreateCustomRule = true;\n        break;\n      default:\n        throw new RangeError('Supplied alert creation action is not handled');\n    }\n\n    return {\n      defaultRules,\n      shouldCreateCustomRule,\n      name: 'Send a notification for new issues',\n      conditions:\n        this.state.interval.length > 0 && this.state.threshold.length > 0\n          ? [\n              getConditionFrom(\n                this.state.interval,\n                this.state.metric,\n                this.state.threshold\n              ),\n            ]\n          : undefined,\n      actions: [{id: NOTIFY_EVENT_ACTION}],\n      actionMatch: 'all',\n      frequency: 5,\n      metricAlertPresets: Array.from(this.state.metricAlertPresets),\n    };\n  }\n\n  setStateAndUpdateParents<K extends keyof State>(\n    state:\n      | ((\n          prevState: Readonly<State>,\n          props: Readonly<Props>\n        ) => Pick<State, K> | State | null)\n      | Pick<State, K>\n      | State\n      | null,\n    callback?: () => void\n  ): void {\n    this.setState(state, () => {\n      callback?.();\n      this.props.onChange(this.getUpdatedData());\n    });\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['conditions', `/projects/${this.props.organization.slug}/rule-conditions/`]];\n  }\n\n  onLoadAllEndpointsSuccess(): void {\n    const conditions = this.state.conditions?.filter?.(object =>\n      Object.values(METRIC_CONDITION_MAP).includes(object?.id)\n    );\n\n    if (!conditions || conditions.length === 0) {\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    const {intervalChoices, interval} = unpackConditions(conditions);\n    if (!intervalChoices || !interval) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureException(\n          new Error('Interval choices or sent from API endpoint is inconsistent or empty')\n        );\n      });\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    this.setStateAndUpdateParents({\n      conditions,\n      intervalChoices,\n      interval,\n    });\n  }\n\n  renderBody(): React.ReactElement {\n    const issueAlertOptionsChoices = this.getIssueAlertsChoices(\n      this.state.conditions?.length > 0\n    );\n    const showMetricAlertSelections =\n      !!this.props.organization.experiments.MetricAlertOnProjectCreationExperiment;\n    return (\n      <Fragment>\n        <PageHeadingWithTopMargins withMargins>\n          {t('Set your default alert settings')}\n        </PageHeadingWithTopMargins>\n        <Content>\n          {showMetricAlertSelections && <Subheading>{t('Issue Alerts')}</Subheading>}\n          <RadioGroupWithPadding\n            choices={issueAlertOptionsChoices}\n            label={t('Options for creating an alert')}\n            onChange={alertSetting => this.setStateAndUpdateParents({alertSetting})}\n            value={this.state.alertSetting}\n          />\n          {showMetricAlertSelections && (\n            <Fragment>\n              <Subheading>{t('Performance Alerts')}</Subheading>\n              <MultipleCheckboxField\n                size=\"24px\"\n                choices={PRESET_AGGREGATES.map(agg => ({\n                  title: agg.description,\n                  value: agg.id,\n                  checked: this.state.metricAlertPresets.has(agg.id),\n                }))}\n                css={CheckboxFieldStyles}\n                onClick={selectedItem => {\n                  const next = new Set(this.state.metricAlertPresets);\n                  if (next.has(selectedItem)) {\n                    next.delete(selectedItem);\n                  } else {\n                    next.add(selectedItem);\n                  }\n                  this.setStateAndUpdateParents({\n                    metricAlertPresets: next,\n                  });\n                }}\n              />\n            </Fragment>\n          )}\n        </Content>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(IssueAlertOptions);\n\nconst CheckboxFieldStyles = css`\n  margin-top: ${space(1)};\n`;\n\nconst Content = styled('div')`\n  padding-top: ${space(2)};\n  padding-bottom: ${space(4)};\n`;\n\nconst CustomizeAlertsGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(5, max-content);\n  gap: ${space(1)};\n  align-items: center;\n`;\nconst InlineInput = styled(Input)`\n  width: 80px;\n`;\nconst InlineSelectControl = styled(SelectControl)`\n  width: 160px;\n`;\nconst RadioGroupWithPadding = styled(RadioGroup)`\n  margin-bottom: ${space(2)};\n`;\nconst PageHeadingWithTopMargins = styled(PageHeading)`\n  margin-top: 65px;\n  margin-bottom: 0;\n  padding-bottom: ${space(3)};\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n`;\nconst RadioItemWrapper = styled('div')`\n  min-height: 35px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\nconst Subheading = styled('b')`\n  display: block;\n`;\n"],"names":["space","CheckboxFancy","MultipleCheckboxField","props","className","choices","map","option","size","disabled","checked","intermediate","onClick","value","title","toString","CheckboxWrapper","CheckboxText","IconGraph","t","uniqueId","ActionType","AlertRuleComparisonType","AlertRuleThresholdType","AlertRuleTriggerType","Dataset","EventTypes","TargetType","getHighestVolumeTransaction","client","organizationSlug","projectId","result","requestPromise","method","data","statsPeriod","project","field","sort","referrer","query","per_page","transaction","makeTeamCriticalAlert","threshold","label","CRITICAL","alertThreshold","actions","teams","slice","team","type","EMAIL","targetType","TEAM","targetIdentifier","id","unsavedDateCreated","Date","toISOString","inputChannelId","options","unsavedId","makeTeamWarningAlert","WARNING","PRESET_AGGREGATES","description","Icon","alertType","makeUnqueriedContext","_","name","slug","aggregate","dataset","TRANSACTIONS","eventTypes","TRANSACTION","timeWindow","comparisonDelta","comparisonType","CHANGE","thresholdType","ABOVE","triggers","makeContext","organization","BELOW","Fragment","css","Sentry","isEqual","AsyncComponent","RadioGroup","SelectControl","Input","PageHeading","withOrganization","MetricValues","Actions","UNIQUE_USER_FREQUENCY_CONDITION","EVENT_FREQUENCY_CONDITION","NOTIFY_EVENT_ACTION","EVENT_FREQUENCY_PERCENT_CONDITION","METRIC_CONDITION_MAP","ERRORS","USERS","DEFAULT_PLACEHOLDER_VALUE","getConditionFrom","interval","metricValue","condition","RangeError","unpackConditions","conditions","equalityReducer","acc","curr","intervalChoices","formFields","reduce","IssueAlertOptions","getDefaultState","alertSetting","CREATE_ALERT_LATER","metric","metricAlertPresets","Set","getAvailableMetricOptions","filter","state","some","object","getIssueAlertsChoices","hasProperlyLoadedConditions","ALERT_ON_EVERY_ISSUE","push","CUSTOMIZED_ALERTS","e","preventDefault","setStateAndUpdateParents","target","choiceValue","node","getUpdatedData","defaultRules","shouldCreateCustomRule","parseInt","length","undefined","actionMatch","frequency","Array","from","callback","setState","onChange","getEndpoints","onLoadAllEndpointsSuccess","Object","values","includes","withScope","scope","setExtra","captureException","Error","renderBody","issueAlertOptionsChoices","showMetricAlertSelections","experiments","MetricAlertOnProjectCreationExperiment","agg","has","CheckboxFieldStyles","selectedItem","next","delete","add","Content","CustomizeAlertsGrid","InlineInput","InlineSelectControl","RadioGroupWithPadding","PageHeadingWithTopMargins","RadioItemWrapper","Subheading"],"sourceRoot":""}