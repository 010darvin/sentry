{"version":3,"file":"chunks/app_views_settings_account_accountSettingsLayout_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;;;AAMA,MAAMM,qBAAN,SAAoCN,4CAApC,CAAqD;EAKnDO,eAAe,GAAG;IAChB,OAAO;MACLC,YAAY,EAAE,KAAKC,KAAL,CAAWD;IADpB,CAAP;EAGD;;EAEDE,kBAAkB,CAACC,SAAD,EAAmB;IACnC,MAAM;MAACH;IAAD,IAAiB,KAAKC,KAA5B;;IACA,IAAIE,SAAS,CAACH,YAAV,KAA2BA,YAA/B,EAA6C;MAC3C;IACD,CAJkC,CAMnC;IACA;IACA;;;IACA,IAAIA,YAAY,IAAI,OAAOA,YAAY,CAACI,MAApB,KAA+B,WAAnD,EAAgE;MAC9DX,6FAAwB,CAACO,YAAY,CAACK,IAAd,EAAoB;QAC1CC,SAAS,EAAE,IAD+B;QAE1CC,YAAY,EAAE;MAF4B,CAApB,CAAxB;IAID;EACF;;EAEDC,MAAM,GAAG;IACP,MAAM;MAACR;IAAD,IAAiB,KAAKC,KAA5B;IAEA,OACE,gEAAC,uFAAD,OACM,KAAKA,KADX;MAEE,gBAAgB,EAAE,MAAM,gEAAC,+FAAD;QAA2B,YAAY,EAAED;MAAzC,EAF1B;MAAA,UAIG,KAAKC,KAAL,CAAWQ;IAJd,EADF;EAQD;;AAvCkD;;AAA/CX;;kFAAAA,4CACuB;EACzBE,YAAY,EAAEN,uEAAwBgB;AADb;;AAyC7B,iEAAef,0EAAiB,CAACG,qBAAD,CAAhC;;;;;;;;;;;;;;;;;ACtDA;AACA;;;AAMA,MAAMF,yBAAyB,GAAG;EAAA,IAAC;IAACI;EAAD,CAAD;EAAA,OAChC,gEAAC,2FAAD;IAAoB,iBAAiB,EAAEW,iGAAgB,CAAC;MAACX;IAAD,CAAD;EAAvD,EADgC;AAAA,CAAlC;;AAAMJ;AAIN,iEAAeA,yBAAf","sources":["webpack:///./app/views/settings/account/accountSettingsLayout.tsx","webpack:///./app/views/settings/account/accountSettingsNavigation.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport {fetchOrganizationDetails} from 'sentry/actionCreators/organizations';\nimport SentryTypes from 'sentry/sentryTypes';\nimport {Organization} from 'sentry/types';\nimport withLatestContext from 'sentry/utils/withLatestContext';\nimport AccountSettingsNavigation from 'sentry/views/settings/account/accountSettingsNavigation';\nimport SettingsLayout from 'sentry/views/settings/components/settingsLayout';\n\ntype Props = React.ComponentProps<typeof SettingsLayout> & {\n  organization: Organization;\n};\n\nclass AccountSettingsLayout extends Component<Props> {\n  static childContextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  getChildContext() {\n    return {\n      organization: this.props.organization,\n    };\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {organization} = this.props;\n    if (prevProps.organization === organization) {\n      return;\n    }\n\n    // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`\n    // (which queries the org index endpoint instead of org details)\n    // and does not have `access` info\n    if (organization && typeof organization.access === 'undefined') {\n      fetchOrganizationDetails(organization.slug, {\n        setActive: true,\n        loadProjects: true,\n      });\n    }\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <SettingsLayout\n        {...this.props}\n        renderNavigation={() => <AccountSettingsNavigation organization={organization} />}\n      >\n        {this.props.children}\n      </SettingsLayout>\n    );\n  }\n}\n\nexport default withLatestContext(AccountSettingsLayout);\n","import {Organization} from 'sentry/types';\nimport getConfiguration from 'sentry/views/settings/account/navigationConfiguration';\nimport SettingsNavigation from 'sentry/views/settings/components/settingsNavigation';\n\ntype Props = {\n  organization: Organization;\n};\n\nconst AccountSettingsNavigation = ({organization}: Props) => (\n  <SettingsNavigation navigationObjects={getConfiguration({organization})} />\n);\n\nexport default AccountSettingsNavigation;\n"],"names":["Component","fetchOrganizationDetails","SentryTypes","withLatestContext","AccountSettingsNavigation","SettingsLayout","AccountSettingsLayout","getChildContext","organization","props","componentDidUpdate","prevProps","access","slug","setActive","loadProjects","render","children","Organization","getConfiguration","SettingsNavigation"],"sourceRoot":""}