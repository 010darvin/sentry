{"version":3,"file":"chunks/app_views_settings_account_accountNotificationFineTuning_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/accountNotificationSettings.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountNotificationFineTuning.tsx","webpack:///./app/views/settings/account/notifications/fields.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByOrganization.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByProjects.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByType.tsx","webpack:///./app/views/settings/account/notifications/unlinkedAlert.tsx","webpack:///./app/views/settings/components/defaultSearchBar.tsx"],"sourcesContent":["import {Field} from 'sentry/components/forms/type';\nimport {t} from 'sentry/locale';\n\n// TODO: cleanup unused fields and exports\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/notifications/';\n\nexport const fields: {[key: string]: Field} = {\n  subscribeByDefault: {\n    name: 'subscribeByDefault',\n    type: 'boolean',\n    label: t('Send Me Alerts'),\n    // TODO(billy): Make this a real link\n    help: t(\n      'Enable this to receive notifications for Alerts sent to your teams. You will always receive alerts configured to be sent directly to you.'\n    ),\n  },\n  workflowNotifications: {\n    name: 'workflowNotifications',\n    type: 'radio',\n    label: t('Send Me Workflow Notifications'),\n    choices: [\n      [0, t('Always')],\n      [1, t('Only On Issues I Subscribe To')],\n      [2, t('Never')],\n    ],\n    help: t('E.g. changes in issue assignment, resolution status, and comments.'),\n  },\n  weeklyReports: {\n    // Form is not visible because currently not implemented\n    name: 'weeklyReports',\n    type: 'boolean',\n    label: t('Send Me Weekly Reports'),\n    help: t(\"Reports contain a summary of what's happened within your organization.\"),\n    disabled: true,\n  },\n  deployNotifications: {\n    name: 'deployNotifications',\n    type: 'radio',\n    label: t('Send Me Deploy Notifications'),\n    choices: [\n      [2, t('Always')],\n      [3, t('Only On Deploys With My Commits')],\n      [4, t('Never')],\n    ],\n    help: t('Deploy emails include release, environment and commit overviews.'),\n  },\n  personalActivityNotifications: {\n    name: 'personalActivityNotifications',\n    type: 'boolean',\n    label: t('Notify Me About My Own Activity'),\n    help: t('Enable this to receive notifications about your own actions on Sentry.'),\n  },\n  selfAssignOnResolve: {\n    name: 'selfAssignOnResolve',\n    type: 'boolean',\n    label: t(\"Claim Unassigned Issues I've Resolved\"),\n    help: t(\"You'll receive notifications about any changes that happen afterwards.\"),\n  },\n};\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport SelectField from 'sentry/components/forms/selectField';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {fields} from 'sentry/data/forms/accountNotificationSettings';\nimport {t} from 'sentry/locale';\nimport {Organization, Project, UserEmail} from 'sentry/types';\nimport withOrganizations from 'sentry/utils/withOrganizations';\nimport AsyncView from 'sentry/views/asyncView';\nimport {\n  ACCOUNT_NOTIFICATION_FIELDS,\n  FineTuneField,\n} from 'sentry/views/settings/account/notifications/fields';\nimport NotificationSettingsByType from 'sentry/views/settings/account/notifications/notificationSettingsByType';\nimport {\n  groupByOrganization,\n  isGroupedByProject,\n} from 'sentry/views/settings/account/notifications/utils';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nconst PanelBodyLineItem = styled(PanelBody)`\n  font-size: 1rem;\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\ntype ANBPProps = {\n  field: FineTuneField;\n  projects: Project[];\n};\n\nconst AccountNotificationsByProject = ({projects, field}: ANBPProps) => {\n  const projectsByOrg = groupByOrganization(projects);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = Object.values(projectsByOrg).map(org => ({\n    name: org.organization.name,\n    projects: org.projects.map(project => ({\n      ...fieldConfig,\n      // `name` key refers to field name\n      // we use project.id because slugs are not unique across orgs\n      name: project.id,\n      label: project.slug,\n    })),\n  }));\n\n  return (\n    <Fragment>\n      {data.map(({name, projects: projectFields}) => (\n        <div key={name}>\n          <PanelHeader>{name}</PanelHeader>\n          {projectFields.map(f => (\n            <PanelBodyLineItem key={f.name}>\n              <SelectField\n                defaultValue={f.defaultValue}\n                name={f.name}\n                options={f.options}\n                label={f.label}\n              />\n            </PanelBodyLineItem>\n          ))}\n        </div>\n      ))}\n    </Fragment>\n  );\n};\n\ntype ANBOProps = {\n  field: FineTuneField;\n  organizations: Organization[];\n};\n\nconst AccountNotificationsByOrganization = ({organizations, field}: ANBOProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = organizations.map(org => ({\n    ...fieldConfig,\n    // `name` key refers to field name\n    // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)\n    name: org.id,\n    label: org.slug,\n  }));\n\n  return (\n    <Fragment>\n      {data.map(f => (\n        <PanelBodyLineItem key={f.name}>\n          <SelectField\n            defaultValue={f.defaultValue}\n            name={f.name}\n            options={f.options}\n            label={f.label}\n          />\n        </PanelBodyLineItem>\n      ))}\n    </Fragment>\n  );\n};\n\nconst AccountNotificationsByOrganizationContainer = withOrganizations(\n  AccountNotificationsByOrganization\n);\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{fineTuneType: string}, {}> & {\n    organizations: Organization[];\n  };\n\ntype State = AsyncView['state'] & {\n  emails: UserEmail[] | null;\n  fineTuneData: Record<string, any> | null;\n  notifications: Record<string, any> | null;\n  projects: Project[] | null;\n};\n\nclass AccountNotificationFineTuning extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {fineTuneType} = this.props.params;\n    const endpoints = [\n      ['notifications', '/users/me/notifications/'],\n      ['fineTuneData', `/users/me/notifications/${fineTuneType}/`],\n    ];\n\n    if (isGroupedByProject(fineTuneType)) {\n      endpoints.push(['projects', '/projects/']);\n    }\n\n    endpoints.push(['emails', '/users/me/emails/']);\n    if (fineTuneType === 'email') {\n      endpoints.push(['emails', '/users/me/emails/']);\n    }\n\n    return endpoints as ReturnType<AsyncView['getEndpoints']>;\n  }\n\n  // Return a sorted list of user's verified emails\n  get emailChoices() {\n    return (\n      this.state.emails\n        ?.filter(({isVerified}) => isVerified)\n        ?.sort((a, b) => {\n          // Sort by primary -> email\n          if (a.isPrimary) {\n            return -1;\n          }\n          if (b.isPrimary) {\n            return 1;\n          }\n\n          return a.email < b.email ? -1 : 1;\n        }) ?? []\n    );\n  }\n\n  renderBody() {\n    const {params} = this.props;\n    const {fineTuneType} = params;\n\n    if (\n      ['alerts', 'deploy', 'workflow', 'activeRelease', 'approval', 'quota'].includes(\n        fineTuneType\n      )\n    ) {\n      return <NotificationSettingsByType notificationType={fineTuneType} />;\n    }\n\n    const {notifications, projects, fineTuneData, projectsPageLinks} = this.state;\n\n    const isProject = isGroupedByProject(fineTuneType);\n    const field = ACCOUNT_NOTIFICATION_FIELDS[fineTuneType];\n    const {title, description} = field;\n\n    const [stateKey, url] = isProject ? this.getEndpoints()[2] : [];\n    const hasProjects = !!projects?.length;\n\n    if (fineTuneType === 'email') {\n      // Fetch verified email addresses\n      field.options = this.emailChoices.map(({email}) => ({value: email, label: email}));\n    }\n\n    if (!notifications || !fineTuneData) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n\n        {field &&\n          field.defaultFieldName &&\n          // not implemented yet\n          field.defaultFieldName !== 'weeklyReports' && (\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint=\"/users/me/notifications/\"\n              initialData={notifications}\n            >\n              <JsonForm\n                title={`Default ${title}`}\n                fields={[fields[field.defaultFieldName]]}\n              />\n            </Form>\n          )}\n        <Panel>\n          <PanelBody>\n            <PanelHeader hasButtons={isProject}>\n              <Heading>{isProject ? t('Projects') : t('Organizations')}</Heading>\n              <div>\n                {isProject &&\n                  this.renderSearchInput({\n                    placeholder: t('Search Projects'),\n                    url,\n                    stateKey,\n                  })}\n              </div>\n            </PanelHeader>\n\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint={`/users/me/notifications/${fineTuneType}/`}\n              initialData={fineTuneData}\n            >\n              {isProject && hasProjects && (\n                <AccountNotificationsByProject projects={projects!} field={field} />\n              )}\n\n              {isProject && !hasProjects && (\n                <EmptyMessage>{t('No projects found')}</EmptyMessage>\n              )}\n\n              {!isProject && (\n                <AccountNotificationsByOrganizationContainer field={field} />\n              )}\n            </Form>\n          </PanelBody>\n        </Panel>\n\n        {projects && <Pagination pageLinks={projectsPageLinks} {...this.props} />}\n      </div>\n    );\n  }\n}\n\nconst Heading = styled('div')`\n  flex: 1;\n`;\n\nexport default AccountNotificationFineTuning;\n","import {t} from 'sentry/locale';\nimport {SelectValue} from 'sentry/types';\n\nexport type FineTuneField = {\n  description: string;\n  title: string;\n  type: 'select';\n  defaultFieldName?: string;\n  defaultValue?: string;\n  options?: SelectValue<string>[];\n};\n\n// TODO: clean up unused fields\nexport const ACCOUNT_NOTIFICATION_FIELDS: Record<string, FineTuneField> = {\n  alerts: {\n    title: t('Issue Alert Notifications'),\n    description: t(\n      'Notifications from Alert Rules that your team has setup. You’ll always receive notifications from Alerts configured to be sent directly to you.'\n    ),\n    type: 'select',\n    options: [\n      {value: '-1', label: t('Default')},\n      {value: '1', label: t('On')},\n      {value: '0', label: t('Off')},\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'subscribeByDefault',\n  },\n  workflow: {\n    title: t('Workflow Notifications'),\n    description: t(\n      'Control workflow notifications, e.g. changes in issue assignment, resolution status, and comments.'\n    ),\n    type: 'select',\n    options: [\n      {value: '-1', label: t('Default')},\n      {value: '0', label: t('Always')},\n      {value: '1', label: t('Only on issues I subscribe to')},\n      {value: '2', label: t('Never')},\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'workflowNotifications',\n  },\n  activeRelease: {\n    title: t('Release Issues'),\n    description: t('Notifications sent for issues likely caused by your code changes.'),\n    type: 'select',\n    defaultValue: '0',\n    options: [\n      {value: '1', label: t('On')},\n      {value: '0', label: t('Off')},\n    ],\n    defaultFieldName: 'activeReleaseNotifications',\n  },\n  deploy: {\n    title: t('Deploy Notifications'),\n    description: t(\n      'Control deploy notifications that include release, environment, and commit overviews.'\n    ),\n    type: 'select',\n    options: [\n      {value: '-1', label: t('Default')},\n      {value: '2', label: t('Always')},\n      {value: '3', label: t('Only on deploys with my commits')},\n      {value: '4', label: t('Never')},\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'deployNotifications',\n  },\n  reports: {\n    title: t('Weekly Reports'),\n    description: t(\n      \"Reports contain a summary of what's happened within the organization.\"\n    ),\n    type: 'select',\n    // API only saves organizations that have this disabled, so we should default to \"On\"\n    defaultValue: '1',\n    options: [\n      {value: '1', label: t('On')},\n      {value: '0', label: t('Off')},\n    ],\n    defaultFieldName: 'weeklyReports',\n  },\n  approval: {\n    title: t('Approvals'),\n    description: t('Notifications from teammates that require review or approval.'),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices,\n  },\n  quota: {\n    title: t('Quota Notifications'),\n    description: t(\n      'Control the notifications you receive for error, transaction, and attachment quota limits.'\n    ),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices,\n  },\n  email: {\n    title: t('Email Routing'),\n    description: t(\n      'On a per project basis, route emails to an alternative email address.'\n    ),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices\n  },\n};\n","import {Component} from 'react';\n\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {t} from 'sentry/locale';\nimport {OrganizationSummary} from 'sentry/types';\nimport withOrganizations from 'sentry/utils/withOrganizations';\nimport {\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'sentry/views/settings/account/notifications/constants';\nimport {\n  getParentData,\n  getParentField,\n} from 'sentry/views/settings/account/notifications/utils';\n\ntype Props = {\n  notificationSettings: NotificationSettingsObject;\n  notificationType: string;\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject;\n  onSubmitSuccess: () => void;\n  organizations: OrganizationSummary[];\n};\n\ntype State = {};\n\nclass NotificationSettingsByOrganization extends Component<Props, State> {\n  render() {\n    const {\n      notificationType,\n      notificationSettings,\n      onChange,\n      onSubmitSuccess,\n      organizations,\n    } = this.props;\n\n    return (\n      <Form\n        saveOnBlur\n        apiMethod=\"PUT\"\n        apiEndpoint=\"/users/me/notification-settings/\"\n        initialData={getParentData(notificationType, notificationSettings, organizations)}\n        onSubmitSuccess={onSubmitSuccess}\n      >\n        <JsonForm\n          title={t('Organizations')}\n          fields={organizations.map(organization =>\n            getParentField(notificationType, notificationSettings, organization, onChange)\n          )}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettingsByOrganization);\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport Pagination from 'sentry/components/pagination';\nimport {t} from 'sentry/locale';\nimport {Project} from 'sentry/types';\nimport {sortProjects} from 'sentry/utils';\nimport {\n  MIN_PROJECTS_FOR_PAGINATION,\n  MIN_PROJECTS_FOR_SEARCH,\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'sentry/views/settings/account/notifications/constants';\nimport {\n  getParentData,\n  getParentField,\n  groupByOrganization,\n} from 'sentry/views/settings/account/notifications/utils';\nimport {\n  RenderSearch,\n  SearchWrapper,\n} from 'sentry/views/settings/components/defaultSearchBar';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\ntype Props = {\n  notificationSettings: NotificationSettingsObject;\n  notificationType: string;\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject;\n  onSubmitSuccess: () => void;\n} & AsyncComponent['props'];\n\ntype State = {\n  projects: Project[];\n} & AsyncComponent['state'];\n\nclass NotificationSettingsByProjects extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      projects: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['projects', '/projects/']];\n  }\n\n  /**\n   * Check the notification settings for how many projects there are.\n   */\n  getProjectCount = (): number => {\n    const {notificationType, notificationSettings} = this.props;\n\n    return Object.values(notificationSettings[notificationType]?.project || {}).length;\n  };\n\n  /**\n   * The UI expects projects to be grouped by organization but can also use\n   * this function to make a single group with all organizations.\n   */\n  getGroupedProjects = (): {[key: string]: Project[]} => {\n    const {projects: stateProjects} = this.state;\n\n    return Object.fromEntries(\n      Object.values(groupByOrganization(sortProjects(stateProjects))).map(\n        ({organization, projects}) => [`${organization.name} Projects`, projects]\n      )\n    );\n  };\n\n  renderBody() {\n    const {notificationType, notificationSettings, onChange, onSubmitSuccess} =\n      this.props;\n    const {projects, projectsPageLinks} = this.state;\n\n    const canSearch = this.getProjectCount() >= MIN_PROJECTS_FOR_SEARCH;\n    const shouldPaginate = projects.length >= MIN_PROJECTS_FOR_PAGINATION;\n\n    const renderSearch: RenderSearch = ({defaultSearchBar}) => (\n      <StyledSearchWrapper>{defaultSearchBar}</StyledSearchWrapper>\n    );\n\n    return (\n      <Fragment>\n        {canSearch &&\n          this.renderSearchInput({\n            stateKey: 'projects',\n            url: '/projects/',\n            placeholder: t('Search Projects'),\n            children: renderSearch,\n          })}\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={getParentData(notificationType, notificationSettings, projects)}\n          onSubmitSuccess={onSubmitSuccess}\n        >\n          {projects.length === 0 ? (\n            <EmptyMessage>{t('No projects found')}</EmptyMessage>\n          ) : (\n            Object.entries(this.getGroupedProjects()).map(([groupTitle, parents]) => (\n              <JsonForm\n                collapsible\n                key={groupTitle}\n                title={groupTitle}\n                fields={parents.map(parent =>\n                  getParentField(notificationType, notificationSettings, parent, onChange)\n                )}\n              />\n            ))\n          )}\n        </Form>\n        {canSearch && shouldPaginate && (\n          <Pagination pageLinks={projectsPageLinks} {...this.props} />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default NotificationSettingsByProjects;\n\nconst StyledSearchWrapper = styled(SearchWrapper)`\n  * {\n    width: 100%;\n  }\n`;\n","import {Fragment} from 'react';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {Field} from 'sentry/components/forms/type';\nimport {t} from 'sentry/locale';\nimport {Organization, OrganizationSummary} from 'sentry/types';\nimport {OrganizationIntegration} from 'sentry/types/integrations';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withOrganizations from 'sentry/utils/withOrganizations';\nimport {\n  ALL_PROVIDER_NAMES,\n  CONFIRMATION_MESSAGE,\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'sentry/views/settings/account/notifications/constants';\nimport {ACCOUNT_NOTIFICATION_FIELDS} from 'sentry/views/settings/account/notifications/fields';\nimport {\n  NOTIFICATION_SETTING_FIELDS,\n  QUOTA_FIELDS,\n} from 'sentry/views/settings/account/notifications/fields2';\nimport NotificationSettingsByOrganization from 'sentry/views/settings/account/notifications/notificationSettingsByOrganization';\nimport NotificationSettingsByProjects from 'sentry/views/settings/account/notifications/notificationSettingsByProjects';\nimport {Identity} from 'sentry/views/settings/account/notifications/types';\nimport UnlinkedAlert from 'sentry/views/settings/account/notifications/unlinkedAlert';\nimport {\n  getCurrentDefault,\n  getCurrentProviders,\n  getParentIds,\n  getStateToPutForDefault,\n  getStateToPutForParent,\n  getStateToPutForProvider,\n  isEverythingDisabled,\n  isGroupedByProject,\n  isSufficientlyComplex,\n  mergeNotificationSettings,\n} from 'sentry/views/settings/account/notifications/utils';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = {\n  notificationType: string;\n  organizations: Organization[];\n} & AsyncComponent['props'];\n\ntype State = {\n  identities: Identity[];\n  notificationSettings: NotificationSettingsObject;\n  organizationIntegrations: OrganizationIntegration[];\n} & AsyncComponent['state'];\n\nconst typeMappedChildren = {\n  quota: ['quotaErrors', 'quotaTransactions', 'quotaAttachments', 'quotaWarnings'],\n};\n\nconst getQueryParams = (notificationType: string) => {\n  // if we need multiple settings on this page\n  // then omit the type so we can load all settings\n  if (notificationType in typeMappedChildren) {\n    return null;\n  }\n  return {type: notificationType};\n};\n\nclass NotificationSettingsByType extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      notificationSettings: {},\n      identities: [],\n      organizationIntegrations: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {notificationType} = this.props;\n    return [\n      [\n        'notificationSettings',\n        `/users/me/notification-settings/`,\n        {query: getQueryParams(notificationType)},\n      ],\n      ['identities', `/users/me/identities/`, {query: {provider: 'slack'}}],\n      [\n        'organizationIntegrations',\n        `/users/me/organization-integrations/`,\n        {query: {provider: 'slack'}},\n      ],\n    ];\n  }\n\n  componentDidMount() {\n    trackAdvancedAnalyticsEvent('notification_settings.tuning_page_viewed', {\n      organization: null,\n      notification_type: this.props.notificationType,\n    });\n  }\n\n  trackTuningUpdated(tuningFieldType: string) {\n    trackAdvancedAnalyticsEvent('notification_settings.updated_tuning_setting', {\n      organization: null,\n      notification_type: this.props.notificationType,\n      tuning_field_type: tuningFieldType,\n    });\n  }\n\n  /* Methods responsible for updating state and hitting the API. */\n\n  getStateToPutForProvider = (\n    changedData: NotificationSettingsByProviderObject\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForProvider(\n      notificationType,\n      notificationSettings,\n      changedData\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getStateToPutForDependentSetting = (\n    changedData: NotificationSettingsByProviderObject,\n    notificationType: string\n  ) => {\n    const value = changedData[notificationType];\n    const {notificationSettings} = this.state;\n\n    // parent setting will control the which providers we send to\n    // just set every provider to the same value for the child/dependent setting\n    const userSettings = ALL_PROVIDER_NAMES.reduce((accum, provider) => {\n      accum[provider] = value;\n      return accum;\n    }, {});\n\n    // setting is a user-only setting\n    const updatedNotificationSettings = {\n      [notificationType]: {\n        user: {\n          me: userSettings,\n        },\n      },\n    };\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getStateToPutForDefault = (\n    changedData: NotificationSettingsByProviderObject\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForDefault(\n      notificationType,\n      notificationSettings,\n      changedData,\n      getParentIds(notificationType, notificationSettings)\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getStateToPutForParent = (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForParent(\n      notificationType,\n      notificationSettings,\n      changedData,\n      parentId\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n    return updatedNotificationSettings;\n  };\n\n  /* Methods responsible for rendering the page. */\n\n  getInitialData(): {[key: string]: string | string[]} {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    // TODO: Backend should be in charge of providing defaults since it depends on the type\n    const provider = !isEverythingDisabled(notificationType, notificationSettings)\n      ? getCurrentProviders(notificationType, notificationSettings)\n      : ['email', 'slack'];\n\n    const childTypes: string[] = typeMappedChildren[notificationType] || [];\n    const childTypesDefaults = Object.fromEntries(\n      childTypes.map(childType => [\n        childType,\n        getCurrentDefault(childType, notificationSettings),\n      ])\n    );\n\n    return {\n      [notificationType]: getCurrentDefault(notificationType, notificationSettings),\n      provider,\n      ...childTypesDefaults,\n    };\n  }\n\n  getFields(): Field[] {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const help = isGroupedByProject(notificationType)\n      ? t('This is the default for all projects.')\n      : t('This is the default for all organizations.');\n\n    const defaultField: Field = Object.assign(\n      {},\n      NOTIFICATION_SETTING_FIELDS[notificationType],\n      {\n        help,\n        getData: data => this.getStateToPutForDefault(data),\n      }\n    );\n    if (isSufficientlyComplex(notificationType, notificationSettings)) {\n      defaultField.confirm = {never: CONFIRMATION_MESSAGE};\n    }\n\n    const fields: Field[] = [defaultField];\n    if (!isEverythingDisabled(notificationType, notificationSettings)) {\n      fields.push(\n        Object.assign(\n          {\n            help: t('Where personal notifications will be sent.'),\n            getData: data => this.getStateToPutForProvider(data),\n          },\n          NOTIFICATION_SETTING_FIELDS.provider\n        )\n      );\n    }\n\n    // if a quota notification is not disabled, add in our dependent fields\n    if (\n      notificationType === 'quota' &&\n      !isEverythingDisabled(notificationType, notificationSettings)\n    ) {\n      fields.push(\n        ...QUOTA_FIELDS.map(field => ({\n          ...field,\n          type: 'select' as const,\n          getData: data =>\n            this.getStateToPutForDependentSetting(\n              data as NotificationSettingsByProviderObject,\n              field.name\n            ),\n        }))\n      );\n    }\n\n    return fields;\n  }\n\n  getUnlinkedOrgs = (): OrganizationSummary[] => {\n    const {organizations} = this.props;\n    const {identities, organizationIntegrations} = this.state;\n    const integrationExternalIDsByOrganizationID = Object.fromEntries(\n      organizationIntegrations.map(organizationIntegration => [\n        organizationIntegration.organizationId,\n        organizationIntegration.externalId,\n      ])\n    );\n\n    const identitiesByExternalId = Object.fromEntries(\n      identities.map(identity => [identity?.identityProvider?.externalId, identity])\n    );\n\n    return organizations.filter(organization => {\n      const externalID = integrationExternalIDsByOrganizationID[organization.id];\n      const identity = identitiesByExternalId[externalID];\n      return identity === undefined || identity === null;\n    });\n  };\n\n  renderBody() {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n    const hasSlack = getCurrentProviders(notificationType, notificationSettings).includes(\n      'slack'\n    );\n    const unlinkedOrgs = this.getUnlinkedOrgs();\n    const {title, description} = ACCOUNT_NOTIFICATION_FIELDS[notificationType];\n    return (\n      <Fragment>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n        {hasSlack && unlinkedOrgs.length > 0 && (\n          <UnlinkedAlert organizations={unlinkedOrgs} />\n        )}\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={this.getInitialData()}\n          onSubmitSuccess={() => this.trackTuningUpdated('general')}\n        >\n          <JsonForm\n            title={\n              isGroupedByProject(notificationType)\n                ? t('All Projects')\n                : t('All Organizations')\n            }\n            fields={this.getFields()}\n          />\n        </Form>\n        {!isEverythingDisabled(notificationType, notificationSettings) &&\n          (isGroupedByProject(notificationType) ? (\n            <NotificationSettingsByProjects\n              notificationType={notificationType}\n              notificationSettings={notificationSettings}\n              onChange={this.getStateToPutForParent}\n              onSubmitSuccess={() => this.trackTuningUpdated('project')}\n            />\n          ) : (\n            <NotificationSettingsByOrganization\n              notificationType={notificationType}\n              notificationSettings={notificationSettings}\n              onChange={this.getStateToPutForParent}\n              onSubmitSuccess={() => this.trackTuningUpdated('organization')}\n            />\n          ))}\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettingsByType);\n","import styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {OrganizationSummary} from 'sentry/types';\n\ntype Props = {\n  organizations: OrganizationSummary[];\n};\n\nfunction UnlinkedAlert({organizations}: Props) {\n  return (\n    <StyledAlert type=\"warning\" showIcon>\n      {t(\n        'You\\'ve selected Slack as your delivery method, but do not have a linked account for the following organizations. You\\'ll receive email notifications instead until you type \"/sentry link\" into your Slack workspace to link your account. If slash commands are not working, please re-install the Slack integration.'\n      )}\n      <ul>\n        {organizations.map(organization => (\n          <li key={organization.id}>{organization.slug}</li>\n        ))}\n      </ul>\n    </StyledAlert>\n  );\n}\n\nconst StyledAlert = styled(Alert)`\n  margin: 20px 0px;\n`;\n\nexport default UnlinkedAlert;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport AsyncView from 'sentry/views/asyncView';\n\nexport type RenderSearch = React.ComponentProps<\n  typeof AsyncView.prototype.renderSearchInput\n>['children'];\n\nexport const SearchWrapper = styled('div')`\n  display: flex;\n  grid-template-columns: 1fr max-content;\n  gap: ${space(1.5)};\n  margin-top: ${space(4)};\n  margin-bottom: ${space(1.5)};\n  position: relative;\n`;\n"],"names":["t","route","fields","subscribeByDefault","name","type","label","help","workflowNotifications","choices","weeklyReports","disabled","deployNotifications","personalActivityNotifications","selfAssignOnResolve","AsyncComponent","SentryDocumentTitle","AsyncView","getTitle","render","renderComponent","Fragment","Form","JsonForm","SelectField","Pagination","Panel","PanelBody","PanelHeader","withOrganizations","ACCOUNT_NOTIFICATION_FIELDS","NotificationSettingsByType","groupByOrganization","isGroupedByProject","EmptyMessage","SettingsPageHeader","TextBlock","PanelBodyLineItem","p","theme","innerBorder","AccountNotificationsByProject","projects","field","projectsByOrg","title","description","fieldConfig","data","Object","values","map","org","organization","project","id","slug","projectFields","f","defaultValue","options","AccountNotificationsByOrganization","organizations","AccountNotificationsByOrganizationContainer","AccountNotificationFineTuning","getEndpoints","fineTuneType","props","params","endpoints","push","emailChoices","state","emails","filter","isVerified","sort","a","b","isPrimary","email","renderBody","includes","notifications","fineTuneData","projectsPageLinks","isProject","stateKey","url","hasProjects","length","value","defaultFieldName","renderSearchInput","placeholder","Heading","alerts","workflow","activeRelease","deploy","reports","approval","quota","Component","getParentData","getParentField","NotificationSettingsByOrganization","notificationType","notificationSettings","onChange","onSubmitSuccess","sortProjects","MIN_PROJECTS_FOR_PAGINATION","MIN_PROJECTS_FOR_SEARCH","SearchWrapper","NotificationSettingsByProjects","stateProjects","fromEntries","getDefaultState","canSearch","getProjectCount","shouldPaginate","renderSearch","defaultSearchBar","children","entries","getGroupedProjects","groupTitle","parents","parent","StyledSearchWrapper","trackAdvancedAnalyticsEvent","ALL_PROVIDER_NAMES","CONFIRMATION_MESSAGE","NOTIFICATION_SETTING_FIELDS","QUOTA_FIELDS","UnlinkedAlert","getCurrentDefault","getCurrentProviders","getParentIds","getStateToPutForDefault","getStateToPutForParent","getStateToPutForProvider","isEverythingDisabled","isSufficientlyComplex","mergeNotificationSettings","typeMappedChildren","getQueryParams","changedData","updatedNotificationSettings","setState","userSettings","reduce","accum","provider","user","me","parentId","identities","organizationIntegrations","integrationExternalIDsByOrganizationID","organizationIntegration","organizationId","externalId","identitiesByExternalId","identity","identityProvider","externalID","undefined","query","componentDidMount","notification_type","trackTuningUpdated","tuningFieldType","tuning_field_type","getInitialData","childTypes","childTypesDefaults","childType","getFields","defaultField","assign","getData","confirm","never","getStateToPutForDependentSetting","hasSlack","unlinkedOrgs","getUnlinkedOrgs","Alert","StyledAlert","space"],"sourceRoot":""}