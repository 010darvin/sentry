{"version":3,"file":"chunks/app_components_externalIssues_abstractExternalIssueForm_tsx-app_utils_discover_charts_tsx-app-f327ac.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/externalIssues/abstractExternalIssueForm.tsx","webpack:///./app/utils/discover/charts.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/utils/replaceAtArrayIndex.tsx","webpack:///./app/views/organizationIntegrations/sentryAppExternalForm.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport debounce from 'lodash/debounce';\nimport * as qs from 'query-string';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport FieldFromConfig from 'sentry/components/forms/fieldFromConfig';\nimport Form from 'sentry/components/forms/form';\nimport FormModel, {FieldValue} from 'sentry/components/forms/model';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {tct} from 'sentry/locale';\nimport {\n  Choices,\n  IntegrationIssueConfig,\n  IssueConfigField,\n  SelectValue,\n} from 'sentry/types';\nimport {FormField} from 'sentry/views/alerts/rules/issue/ruleNode';\n\nexport type ExternalIssueAction = 'create' | 'link';\n\nexport type ExternalIssueFormErrors = {[key: string]: React.ReactNode};\n\ntype Props = ModalRenderProps & AsyncComponent['props'];\n\ntype State = {\n  action: ExternalIssueAction;\n  /**\n   * Object of fields where `updatesFrom` is true, by field name. Derived from\n   * `integrationDetails` when it loads. Null until set.\n   */\n  dynamicFieldValues: {[key: string]: FieldValue | null} | null;\n  /**\n   * Cache of options fetched for async fields.\n   */\n  fetchedFieldOptionsCache: Record<string, Choices>;\n  /**\n   * Fetched via endpoint, null until set.\n   */\n  integrationDetails: IntegrationIssueConfig | null;\n} & AsyncComponent['state'];\n\nconst DEBOUNCE_MS = 200;\n/**\n * @abstract\n */\nexport default class AbstractExternalIssueForm<\n  P extends Props = Props,\n  S extends State = State\n> extends AsyncComponent<P, S> {\n  shouldRenderBadRequests = true;\n  model = new FormModel();\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      action: 'create',\n      dynamicFieldValues: null,\n      fetchedFieldOptionsCache: {},\n      integrationDetails: null,\n    };\n  }\n\n  refetchConfig = () => {\n    const {action, dynamicFieldValues} = this.state;\n    const query = {action, ...dynamicFieldValues};\n    const endpoint = this.getEndPointString();\n\n    this.api.request(endpoint, {\n      method: 'GET',\n      query,\n      success: (data, _, resp) => {\n        this.handleRequestSuccess({stateKey: 'integrationDetails', data, resp}, true);\n      },\n      error: error => {\n        this.handleError(error, ['integrationDetails', endpoint, null, null]);\n      },\n    });\n  };\n\n  getConfigName = (): 'createIssueConfig' | 'linkIssueConfig' => {\n    // Explicitly returning a non-interpolated string for clarity.\n    const {action} = this.state;\n    switch (action) {\n      case 'create':\n        return 'createIssueConfig';\n      case 'link':\n        return 'linkIssueConfig';\n      default:\n        throw new Error('illegal action');\n    }\n  };\n\n  /**\n   * Convert IntegrationIssueConfig to an object that maps field names to the\n   * values of fields where `updatesFrom` is true. This function prefers to read\n   * configs from its parameters and otherwise falls back to reading from state.\n   * @param integrationDetailsParam\n   * @returns Object of field names to values.\n   */\n  getDynamicFields = (\n    integrationDetailsParam?: IntegrationIssueConfig\n  ): {[key: string]: FieldValue | null} => {\n    const {integrationDetails: integrationDetailsFromState} = this.state;\n    const integrationDetails = integrationDetailsParam || integrationDetailsFromState;\n    const config = (integrationDetails || {})[this.getConfigName()];\n    return Object.fromEntries(\n      (config || [])\n        .filter((field: IssueConfigField) => field.updatesForm)\n        .map((field: IssueConfigField) => [field.name, field.default || null])\n    );\n  };\n\n  onRequestSuccess = ({stateKey, data}) => {\n    if (stateKey === 'integrationDetails') {\n      this.handleReceiveIntegrationDetails(data);\n      this.setState({\n        dynamicFieldValues: this.getDynamicFields(data),\n      });\n    }\n  };\n\n  /**\n   * If this field should updateForm, updateForm. Otherwise, do nothing.\n   */\n  onFieldChange = (fieldName: string, value: FieldValue) => {\n    const {dynamicFieldValues} = this.state;\n    const dynamicFields = this.getDynamicFields();\n    if (dynamicFields.hasOwnProperty(fieldName) && dynamicFieldValues) {\n      dynamicFieldValues[fieldName] = value;\n      this.setState(\n        {\n          dynamicFieldValues,\n          reloading: true,\n          error: false,\n          remainingRequests: 1,\n        },\n        this.refetchConfig\n      );\n    }\n  };\n\n  /**\n   * For fields with dynamic fields, cache the fetched choices.\n   */\n  updateFetchedFieldOptionsCache = (\n    field: IssueConfigField,\n    result: SelectValue<string | number>[]\n  ): void => {\n    const {fetchedFieldOptionsCache} = this.state;\n    this.setState({\n      fetchedFieldOptionsCache: {\n        ...fetchedFieldOptionsCache,\n        [field.name]: result.map(obj => [obj.value, obj.label]),\n      },\n    });\n  };\n\n  /**\n   * Ensures current result from Async select fields is never discarded. Without this method,\n   * searching in an async select field without selecting one of the returned choices will\n   * result in a value saved to the form, and no associated label; appearing empty.\n   * @param field The field being examined\n   * @param result The result from it's asynchronous query\n   * @returns The result with a tooltip attached to the current option\n   */\n  ensureCurrentOption = (\n    field: IssueConfigField,\n    result: SelectValue<string | number>[]\n  ): SelectValue<string | number>[] => {\n    const currentOption = this.getDefaultOptions(field).find(\n      option => option.value === this.model.getValue(field.name)\n    );\n    if (!currentOption) {\n      return result;\n    }\n    if (typeof currentOption.label === 'string') {\n      currentOption.label = (\n        <Fragment>\n          <QuestionTooltip\n            title={tct('This is your current [label].', {\n              label: field.label,\n            })}\n            size=\"xs\"\n          />{' '}\n          {currentOption.label}\n        </Fragment>\n      );\n    }\n    const currentOptionResultIndex = result.findIndex(\n      obj => obj.value === currentOption?.value\n    );\n    // Has a selected option, and it is in API results\n    if (currentOptionResultIndex >= 0) {\n      const newResult = result;\n      newResult[currentOptionResultIndex] = currentOption;\n      return newResult;\n    }\n    // Has a selected option, and it is not in API results\n\n    return [...result, currentOption];\n  };\n\n  /**\n   * Get the list of options for a field via debounced API call. For example,\n   * the list of users that match the input string. The Promise rejects if there\n   * are any errors.\n   */\n  getOptions = (field: IssueConfigField, input: string) =>\n    new Promise((resolve, reject) => {\n      if (!input) {\n        return resolve(this.getDefaultOptions(field));\n      }\n      return this.debouncedOptionLoad(field, input, (err, result) => {\n        if (err) {\n          reject(err);\n        } else {\n          result = this.ensureCurrentOption(field, result);\n          this.updateFetchedFieldOptionsCache(field, result);\n          resolve(result);\n        }\n      });\n    });\n\n  debouncedOptionLoad = debounce(\n    async (\n      field: IssueConfigField,\n      input: string,\n      cb: (err: Error | null, result?: any) => void\n    ) => {\n      const {dynamicFieldValues} = this.state;\n      const query = qs.stringify({\n        ...dynamicFieldValues,\n        field: field.name,\n        query: input,\n      });\n\n      const url = field.url || '';\n      const separator = url.includes('?') ? '&' : '?';\n      // We can't use the API client here since the URL is not scoped under the\n      // API endpoints (which the client prefixes)\n      try {\n        const response = await fetch(url + separator + query);\n        cb(null, response.ok ? await response.json() : []);\n      } catch (err) {\n        cb(err);\n      }\n    },\n    DEBOUNCE_MS,\n    {trailing: true}\n  );\n\n  getDefaultOptions = (field: IssueConfigField) => {\n    const choices =\n      (field.choices as Array<[number | string, number | string | React.ReactElement]>) ||\n      [];\n    return choices.map(([value, label]) => ({value, label}));\n  };\n\n  /**\n   * If this field is an async select (field.url is not null), add async props.\n   */\n  getFieldProps = (field: IssueConfigField) =>\n    field.url\n      ? {\n          async: true,\n          autoload: true,\n          cache: false,\n          loadOptions: (input: string) => this.getOptions(field, input),\n          defaultOptions: this.getDefaultOptions(field),\n          onBlurResetsInput: false,\n          onCloseResetsInput: false,\n          onSelectResetsInput: false,\n        }\n      : {};\n\n  // Abstract methods.\n  handleReceiveIntegrationDetails = (_data: any) => {\n    // Do nothing.\n  };\n  getEndPointString(): string {\n    throw new Error(\"Method 'getEndPointString()' must be implemented.\");\n  }\n  renderNavTabs = (): React.ReactNode => null;\n  renderBodyText = (): React.ReactNode => null;\n  getTitle = () => tct('Issue Link Settings', {});\n  getFormProps = (): Form['props'] => {\n    throw new Error(\"Method 'getFormProps()' must be implemented.\");\n  };\n\n  getDefaultFormProps = (): Form['props'] => {\n    return {\n      footerClass: 'modal-footer',\n      onFieldChange: this.onFieldChange,\n      submitDisabled: this.state.reloading,\n      model: this.model,\n      // Other form props implemented by child classes.\n    };\n  };\n\n  getCleanedFields = (): IssueConfigField[] => {\n    const {fetchedFieldOptionsCache, integrationDetails} = this.state;\n\n    const configsFromAPI = (integrationDetails || {})[this.getConfigName()];\n    return (configsFromAPI || []).map(field => {\n      const fieldCopy = {...field};\n      // Overwrite choices from cache.\n      if (fetchedFieldOptionsCache?.hasOwnProperty(field.name)) {\n        fieldCopy.choices = fetchedFieldOptionsCache[field.name];\n      }\n\n      return fieldCopy;\n    });\n  };\n\n  renderComponent() {\n    return this.state.error\n      ? this.renderError(new Error('Unable to load all required endpoints'))\n      : this.renderBody();\n  }\n\n  renderForm = (\n    formFields?: IssueConfigField[],\n    errors: ExternalIssueFormErrors = {}\n  ) => {\n    const initialData: {[key: string]: any} = (formFields || []).reduce(\n      (accumulator, field: FormField) => {\n        accumulator[field.name] =\n          // Passing an empty array breaks MultiSelect.\n          field.multiple && field.default === [] ? '' : field.default;\n        return accumulator;\n      },\n      {}\n    );\n\n    const {Header, Body} = this.props as ModalRenderProps;\n\n    return (\n      <Fragment>\n        <Header closeButton>{this.getTitle()}</Header>\n        {this.renderNavTabs()}\n        <Body>\n          {this.shouldRenderLoading ? (\n            this.renderLoading()\n          ) : (\n            <Fragment>\n              {this.renderBodyText()}\n              <Form initialData={initialData} {...this.getFormProps()}>\n                {(formFields || [])\n                  .filter((field: FormField) => field.hasOwnProperty('name'))\n                  .map(fields => ({\n                    ...fields,\n                    noOptionsMessage: () => 'No options. Type to search.',\n                  }))\n                  .map((field, i) => {\n                    return (\n                      <Fragment key={`${field.name}-${i}`}>\n                        <FieldFromConfig\n                          disabled={this.state.reloading}\n                          field={field}\n                          flexibleControlStateSize\n                          inline={false}\n                          stacked\n                          {...this.getFieldProps(field)}\n                        />\n                        {errors[field.name] && errors[field.name]}\n                      </Fragment>\n                    );\n                  })}\n              </Form>\n            </Fragment>\n          )}\n        </Body>\n      </Fragment>\n    );\n  };\n}\n","import {LegendComponentOption} from 'echarts';\n\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {defined, formatBytesBase2} from 'sentry/utils';\nimport {AggregationOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(\n  value: number | null,\n  outputType: AggregationOutputType = 'number'\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  return tooltipFormatterUsingAggregateOutputType(value, outputType);\n}\n\n/**\n * Formatter for chart tooltips that takes the aggregate output type directly\n */\nexport function tooltipFormatterUsingAggregateOutputType(\n  value: number | null,\n  type: string\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    case 'size':\n      return formatBytesBase2(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  outputType: AggregationOutputType,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  return axisLabelFormatterUsingAggregateOutputType(\n    value,\n    outputType,\n    abbreviation,\n    durationUnit\n  );\n}\n\n/**\n * Formatter for chart axis labels that takes the aggregate output type directly\n */\nexport function axisLabelFormatterUsingAggregateOutputType(\n  value: number,\n  type: string,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value, durationUnit);\n    case 'size':\n      return formatBytesBase2(value, 0);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number, durationUnit?: number): string {\n  durationUnit ??= categorizeDuration(value);\n  if (value === 0) {\n    return '0';\n  }\n  switch (durationUnit) {\n    case WEEK: {\n      const label = (value / WEEK).toFixed(0);\n      return t('%swk', label);\n    }\n    case DAY: {\n      const label = (value / DAY).toFixed(0);\n      return t('%sd', label);\n    }\n    case HOUR: {\n      const label = (value / HOUR).toFixed(0);\n      return t('%shr', label);\n    }\n    case MINUTE: {\n      const label = (value / MINUTE).toFixed(0);\n      return t('%smin', label);\n    }\n    case SECOND: {\n      const label = (value / SECOND).toFixed(0);\n      return t('%ss', label);\n    }\n    default:\n      const label = value.toFixed(0);\n      return t('%sms', label);\n  }\n}\n\n/**\n * Given an array of series and an eCharts legend object,\n * finds the range of y values (min and max) based on which series is selected in the legend\n * Assumes series[0] > series[1] > ...\n * @param series Array of eCharts series\n * @param legend eCharts legend object\n * @returns\n */\nexport function findRangeOfMultiSeries(series: Series[], legend?: LegendComponentOption) {\n  let range: {max: number; min: number} | undefined;\n  if (series[0]?.data) {\n    let minSeries = series[0];\n    let maxSeries;\n    series.forEach(({seriesName, data}, idx) => {\n      if (legend?.selected?.[seriesName] !== false && data.length) {\n        minSeries = series[idx];\n        maxSeries ??= series[idx];\n      }\n    });\n    if (maxSeries?.data) {\n      const max = Math.max(\n        ...maxSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      const min = Math.min(\n        ...minSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      range = {max, min};\n    }\n  }\n  return range;\n}\n\n/**\n * Given a eCharts series and legend, returns the unit to be used on the yAxis for a duration chart\n * @param series eCharts series array\n * @param legend eCharts legend object\n * @returns\n */\nexport function getDurationUnit(\n  series: Series[],\n  legend?: LegendComponentOption\n): number {\n  let durationUnit = 0;\n  const range = findRangeOfMultiSeries(series, legend);\n  if (range) {\n    const avg = (range.max + range.min) / 2;\n    durationUnit = categorizeDuration((range.max - range.min) / 5); // avg of 5 yAxis ticks per chart\n\n    const numOfDigits = (avg / durationUnit).toFixed(0).length;\n    if (numOfDigits > 6) {\n      durationUnit = categorizeDuration(avg);\n    }\n  }\n  return durationUnit;\n}\n\n/**\n * Categorizes the duration by Second, Minute, Hour, etc\n * Ex) categorizeDuration(1200) = MINUTE\n * @param value Duration in ms\n */\nexport function categorizeDuration(value): number {\n  if (value >= WEEK) {\n    return WEEK;\n  }\n  if (value >= DAY) {\n    return DAY;\n  }\n  if (value >= HOUR) {\n    return HOUR;\n  }\n  if (value >= MINUTE) {\n    return MINUTE;\n  }\n  if (value >= SECOND) {\n    return SECOND;\n  }\n  return 1;\n}\n","import {Environment} from 'sentry/types';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Partial<Environment>) {\n  if (env.name) {\n    return encodeURIComponent(env.name);\n  }\n\n  if (env.displayName) {\n    return encodeURIComponent(env.displayName);\n  }\n  return DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Partial<Environment>) {\n  return env.name || env.displayName || DEFAULT_EMPTY_ENV_NAME;\n}\n","/**\n * Replace item at `index` in `array` with `obj`\n */\nexport function replaceAtArrayIndex<T>(array: T[], index: number, obj: T): T[] {\n  const newArray = [...array];\n  newArray.splice(index, 1, obj);\n  return newArray;\n}\n","import {Component} from 'react';\nimport {createFilter} from 'react-select';\nimport debounce from 'lodash/debounce';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport FieldFromConfig from 'sentry/components/forms/fieldFromConfig';\nimport Form from 'sentry/components/forms/form';\nimport FormModel from 'sentry/components/forms/model';\nimport {GeneralSelectValue} from 'sentry/components/forms/selectControl';\nimport {Field, FieldValue} from 'sentry/components/forms/type';\nimport {t} from 'sentry/locale';\nimport {replaceAtArrayIndex} from 'sentry/utils/replaceAtArrayIndex';\nimport withApi from 'sentry/utils/withApi';\n\n// 0 is a valid choice but empty string, undefined, and null are not\nconst hasValue = value => !!value || value === 0;\n\n// See docs: https://docs.sentry.io/product/integrations/integration-platform/ui-components/formfield/\nexport type FieldFromSchema = Omit<Field, 'choices' | 'type'> & {\n  type: 'select' | 'textarea' | 'text';\n  async?: boolean;\n  choices?: Array<[any, string]>;\n  default?: 'issue.title' | 'issue.description';\n  depends_on?: string[];\n  uri?: string;\n};\n\nexport type SchemaFormConfig = {\n  description: string | null;\n  uri: string;\n  optional_fields?: FieldFromSchema[];\n  required_fields?: FieldFromSchema[];\n};\n\ntype SentryAppSetting = {\n  name: string;\n  value: any;\n  label?: string;\n};\n\n// only need required_fields and optional_fields\ntype State = Omit<SchemaFormConfig, 'uri' | 'description'> & {\n  optionsByField: Map<string, Array<{label: string; value: any}>>;\n  selectedOptions: {[name: string]: GeneralSelectValue};\n};\n\ntype Props = {\n  action: 'create' | 'link';\n  api: Client;\n  appName: string;\n  config: SchemaFormConfig;\n  element: 'issue-link' | 'alert-rule-action';\n  onSubmitSuccess: Function;\n  sentryAppInstallationUuid: string;\n  /**\n   * Additional form data to submit with the request\n   */\n  extraFields?: {[key: string]: any};\n  /**\n   * Additional body parameters to submit with the request\n   */\n  extraRequestBody?: {[key: string]: any};\n  /**\n   * Function to provide fields with pre-written data if a default is specified\n   */\n  getFieldDefault?: (field: FieldFromSchema) => string;\n  /**\n   * Object containing reset values for fields if previously entered, in case this form is unmounted\n   */\n  resetValues?: {\n    [key: string]: any;\n    settings?: SentryAppSetting[];\n  };\n};\n\n/**\n *  This component is the result of a refactor of sentryAppExternalIssueForm.tsx.\n *  Most of it contains a direct copy of the code from that original file (comments included)\n *  to allow for an abstract way of turning Sentry App Schema -> Form UI, rather than being\n *  specific to Issue Linking.\n *\n *  See (#28465) for more details.\n */\nexport class SentryAppExternalForm extends Component<Props, State> {\n  state: State = {optionsByField: new Map(), selectedOptions: {}};\n\n  componentDidMount() {\n    this.resetStateFromProps();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.action !== this.props.action) {\n      this.model.reset();\n      this.resetStateFromProps();\n    }\n  }\n\n  model = new FormModel();\n\n  // reset the state when we mount or the action changes\n  resetStateFromProps() {\n    const {config, action, extraFields, element} = this.props;\n    this.setState({\n      required_fields: config.required_fields,\n      optional_fields: config.optional_fields,\n    });\n    // For alert-rule-actions, the forms are entirely custom, extra fields are\n    // passed in on submission, not as part of the form. See handleAlertRuleSubmit().\n    if (element === 'alert-rule-action') {\n      const defaultResetValues = (this.props.resetValues || {}).settings || [];\n      const initialData = defaultResetValues.reduce((acc, curr) => {\n        acc[curr.name] = curr.value;\n        return acc;\n      }, {});\n      this.model.setInitialData({...initialData});\n    } else {\n      this.model.setInitialData({\n        ...extraFields,\n        // we need to pass these fields in the API so just set them as values so we don't need hidden form fields\n        action,\n        uri: config.uri,\n      });\n    }\n  }\n\n  onSubmitError = () => {\n    const {action, appName} = this.props;\n    addErrorMessage(t('Unable to %s %s %s.', action, appName, this.getElementText()));\n  };\n\n  getOptions = (field: FieldFromSchema, input: string) =>\n    new Promise(resolve => {\n      this.debouncedOptionLoad(field, input, resolve);\n    });\n\n  getElementText = () => {\n    const {element} = this.props;\n    switch (element) {\n      case 'issue-link':\n        return 'issue';\n      case 'alert-rule-action':\n        return 'alert';\n      default:\n        return 'connection';\n    }\n  };\n\n  getDefaultOptions = (field: FieldFromSchema) => {\n    const savedOption = ((this.props.resetValues || {}).settings || []).find(\n      value => value.name === field.name\n    );\n    const currentOptions = (field.choices || []).map(([value, label]) => ({\n      value,\n      label,\n    }));\n\n    const shouldAddSavedOption =\n      // We only render saved options if they have preserved the label, otherwise it appears unselcted.\n      // The next time the user saves, the label should be preserved.\n      savedOption?.value &&\n      savedOption?.label &&\n      // The option isn't in the current options already\n      !currentOptions.some(option => option.value === savedOption?.value);\n\n    return shouldAddSavedOption\n      ? [{value: savedOption.value, label: savedOption.label}, ...currentOptions]\n      : currentOptions;\n  };\n\n  getDefaultFieldValue = (field: FieldFromSchema) => {\n    // Interpret the default if a getFieldDefault function is provided.\n    const {resetValues, getFieldDefault} = this.props;\n    let defaultValue = field?.defaultValue;\n\n    // Override this default if a reset value is provided\n    if (field.default && getFieldDefault) {\n      defaultValue = getFieldDefault(field);\n    }\n\n    const reset = ((resetValues || {}).settings || []).find(\n      value => value.name === field.name\n    );\n\n    if (reset) {\n      defaultValue = reset.value;\n    }\n    return defaultValue;\n  };\n\n  debouncedOptionLoad = debounce(\n    // debounce is used to prevent making a request for every input change and\n    // instead makes the requests every 200ms\n    async (field: FieldFromSchema, input, resolve) => {\n      const choices = await this.makeExternalRequest(field, input);\n      const options = choices.map(([value, label]) => ({value, label}));\n      const optionsByField = new Map(this.state.optionsByField);\n      optionsByField.set(field.name, options);\n      this.setState({\n        optionsByField,\n      });\n      return resolve(options);\n    },\n    200,\n    {trailing: true}\n  );\n\n  makeExternalRequest = async (field: FieldFromSchema, input: FieldValue) => {\n    const {extraRequestBody = {}, sentryAppInstallationUuid} = this.props;\n    const query: {[key: string]: any} = {\n      ...extraRequestBody,\n      uri: field.uri,\n      query: input,\n    };\n\n    if (field.depends_on) {\n      const dependentData = field.depends_on.reduce((accum, dependentField: string) => {\n        accum[dependentField] = this.model.getValue(dependentField);\n        return accum;\n      }, {});\n      // stringify the data\n      query.dependentData = JSON.stringify(dependentData);\n    }\n\n    const {choices} = await this.props.api.requestPromise(\n      `/sentry-app-installations/${sentryAppInstallationUuid}/external-requests/`,\n      {query}\n    );\n    return choices || [];\n  };\n\n  /**\n   * This function determines which fields need to be reset and new options fetched\n   * based on the dependencies defined with the depends_on attribute.\n   * This is done because the autoload flag causes fields to load at different times\n   * if you have multiple dependent fields while this solution updates state at once.\n   */\n  handleFieldChange = async (id: string) => {\n    const config = this.state;\n\n    let requiredFields = config.required_fields || [];\n    let optionalFields = config.optional_fields || [];\n\n    const fieldList: FieldFromSchema[] = requiredFields.concat(optionalFields);\n\n    // could have multiple impacted fields\n    const impactedFields = fieldList.filter(({depends_on}) => {\n      if (!depends_on) {\n        return false;\n      }\n      // must be dependent on the field we just set\n      return depends_on.includes(id);\n    });\n\n    // load all options in parallel\n    const choiceArray = await Promise.all(\n      impactedFields.map(field => {\n        // reset all impacted fields first\n        this.model.setValue(field.name || '', '', {quiet: true});\n        return this.makeExternalRequest(field, '');\n      })\n    );\n\n    this.setState(state => {\n      // pull the field lists from latest state\n      requiredFields = state.required_fields || [];\n      optionalFields = state.optional_fields || [];\n      // iterate through all the impacted fields and get new values\n      impactedFields.forEach((impactedField, i) => {\n        const choices = choiceArray[i];\n        const requiredIndex = requiredFields.indexOf(impactedField);\n        const optionalIndex = optionalFields.indexOf(impactedField);\n\n        const updatedField = {...impactedField, choices};\n\n        // immutably update the lists with the updated field depending where we got it from\n        if (requiredIndex > -1) {\n          requiredFields = replaceAtArrayIndex(\n            requiredFields,\n            requiredIndex,\n            updatedField\n          );\n        } else if (optionalIndex > -1) {\n          optionalFields = replaceAtArrayIndex(\n            optionalFields,\n            optionalIndex,\n            updatedField\n          );\n        }\n      });\n      return {\n        required_fields: requiredFields,\n        optional_fields: optionalFields,\n      };\n    });\n  };\n\n  createPreserveOptionFunction = (name: string) => (option, _event) => {\n    this.setState({\n      selectedOptions: {\n        ...this.state.selectedOptions,\n        [name]: option,\n      },\n    });\n  };\n\n  renderField = (field: FieldFromSchema, required: boolean) => {\n    // This function converts the field we get from the backend into\n    // the field we need to pass down\n    let fieldToPass: Field = {\n      ...field,\n      inline: false,\n      stacked: true,\n      flexibleControlStateSize: true,\n      required,\n    };\n    if (field?.uri && field?.async) {\n      fieldToPass.type = 'select_async';\n    }\n    if (['select', 'select_async'].includes(fieldToPass.type || '')) {\n      // find the options from state to pass down\n      const defaultOptions = this.getDefaultOptions(field);\n      const options = this.state.optionsByField.get(field.name) || defaultOptions;\n\n      fieldToPass = {\n        ...fieldToPass,\n        options,\n        defaultOptions,\n        defaultValue: this.getDefaultFieldValue(field),\n        // filter by what the user is typing\n        filterOption: createFilter({}),\n        allowClear: !required,\n        placeholder: 'Type to search',\n      } as Field;\n      if (field.depends_on) {\n        // check if this is dependent on other fields which haven't been set yet\n        const shouldDisable = field.depends_on.some(\n          dependentField => !hasValue(this.model.getValue(dependentField))\n        );\n        if (shouldDisable) {\n          fieldToPass = {...fieldToPass, disabled: true};\n        }\n      }\n    }\n    if (['text', 'textarea'].includes(fieldToPass.type || '')) {\n      fieldToPass = {\n        ...fieldToPass,\n        defaultValue: this.getDefaultFieldValue(field),\n      };\n    }\n\n    // if we have a uri, we need to set extra parameters\n    const extraProps = field.uri\n      ? {\n          loadOptions: (input: string) => this.getOptions(field, input),\n          async: field?.async ?? true,\n          cache: false,\n          onSelectResetsInput: false,\n          onCloseResetsInput: false,\n          onBlurResetsInput: false,\n          autoload: false,\n          onChangeOption: this.createPreserveOptionFunction(field.name),\n        }\n      : {};\n\n    return (\n      <FieldFromConfig\n        key={field.name}\n        field={fieldToPass}\n        data-test-id={field.name}\n        {...extraProps}\n      />\n    );\n  };\n\n  handleAlertRuleSubmit = (formData, onSubmitSuccess) => {\n    const {sentryAppInstallationUuid} = this.props;\n    if (this.model.validateForm()) {\n      onSubmitSuccess({\n        // The form data must be nested in 'settings' to ensure they don't overlap with any other field names.\n        settings: Object.entries(formData).map(([name, value]) => {\n          const savedSetting: SentryAppSetting = {name, value};\n          const stateOption = this.state.selectedOptions[name];\n          // If the field is a SelectAsync, we need to preserve the label since the next time it's rendered,\n          // we can't be sure the options will contain this selection\n          if (stateOption?.value === value) {\n            savedSetting.label = `${stateOption?.label}`;\n          }\n          return savedSetting;\n        }),\n        sentryAppInstallationUuid,\n        // Used on the backend to explicitly associate with a different rule than those without a custom form.\n        hasSchemaFormConfig: true,\n      });\n    }\n  };\n\n  render() {\n    const {sentryAppInstallationUuid, action, element, onSubmitSuccess} = this.props;\n\n    const requiredFields = this.state.required_fields || [];\n    const optionalFields = this.state.optional_fields || [];\n\n    if (!sentryAppInstallationUuid) {\n      return '';\n    }\n\n    return (\n      <Form\n        key={action}\n        apiEndpoint={`/sentry-app-installations/${sentryAppInstallationUuid}/external-issue-actions/`}\n        apiMethod=\"POST\"\n        // Without defining onSubmit, the Form will send an `apiMethod` request to the above `apiEndpoint`\n        onSubmit={\n          element === 'alert-rule-action' ? this.handleAlertRuleSubmit : undefined\n        }\n        onSubmitSuccess={(...params) => {\n          onSubmitSuccess(...params);\n        }}\n        onSubmitError={this.onSubmitError}\n        onFieldChange={this.handleFieldChange}\n        model={this.model}\n      >\n        {requiredFields.map((field: FieldFromSchema) => {\n          return this.renderField(field, true);\n        })}\n\n        {optionalFields.map((field: FieldFromSchema) => {\n          return this.renderField(field, false);\n        })}\n      </Form>\n    );\n  }\n}\n\nexport default withApi(SentryAppExternalForm);\n"],"names":["Fragment","debounce","qs","AsyncComponent","FieldFromConfig","Form","FormModel","QuestionTooltip","tct","DEBOUNCE_MS","AbstractExternalIssueForm","action","dynamicFieldValues","state","query","endpoint","getEndPointString","api","request","method","success","data","_","resp","handleRequestSuccess","stateKey","error","handleError","Error","integrationDetailsParam","integrationDetails","integrationDetailsFromState","config","getConfigName","Object","fromEntries","filter","field","updatesForm","map","name","default","handleReceiveIntegrationDetails","setState","getDynamicFields","fieldName","value","dynamicFields","hasOwnProperty","reloading","remainingRequests","refetchConfig","result","fetchedFieldOptionsCache","obj","label","currentOption","getDefaultOptions","find","option","model","getValue","currentOptionResultIndex","findIndex","newResult","input","Promise","resolve","reject","debouncedOptionLoad","err","ensureCurrentOption","updateFetchedFieldOptionsCache","cb","stringify","url","separator","includes","response","fetch","ok","json","trailing","choices","async","autoload","cache","loadOptions","getOptions","defaultOptions","onBlurResetsInput","onCloseResetsInput","onSelectResetsInput","_data","footerClass","onFieldChange","submitDisabled","configsFromAPI","fieldCopy","formFields","errors","initialData","reduce","accumulator","multiple","Header","Body","props","getTitle","renderNavTabs","shouldRenderLoading","renderLoading","renderBodyText","getFormProps","fields","noOptionsMessage","i","getFieldProps","getDefaultState","renderComponent","renderError","renderBody","t","defined","formatBytesBase2","DAY","formatAbbreviatedNumber","formatPercentage","getDuration","HOUR","MINUTE","SECOND","WEEK","tooltipFormatter","outputType","tooltipFormatterUsingAggregateOutputType","type","toLocaleString","toString","axisLabelFormatter","abbreviation","durationUnit","axisLabelFormatterUsingAggregateOutputType","axisDuration","categorizeDuration","toFixed","findRangeOfMultiSeries","series","legend","range","minSeries","maxSeries","forEach","idx","seriesName","selected","length","max","Math","min","getDurationUnit","avg","numOfDigits","DEFAULT_EMPTY_ROUTING_NAME","DEFAULT_EMPTY_ENV_NAME","getUrlRoutingName","env","encodeURIComponent","displayName","getDisplayName","replaceAtArrayIndex","array","index","newArray","splice","Component","createFilter","addErrorMessage","withApi","hasValue","SentryAppExternalForm","optionsByField","Map","selectedOptions","appName","getElementText","element","savedOption","resetValues","settings","currentOptions","shouldAddSavedOption","some","getFieldDefault","defaultValue","reset","makeExternalRequest","options","set","extraRequestBody","sentryAppInstallationUuid","uri","depends_on","dependentData","accum","dependentField","JSON","requestPromise","id","requiredFields","required_fields","optionalFields","optional_fields","fieldList","concat","impactedFields","choiceArray","all","setValue","quiet","impactedField","requiredIndex","indexOf","optionalIndex","updatedField","_event","required","fieldToPass","inline","stacked","flexibleControlStateSize","get","getDefaultFieldValue","filterOption","allowClear","placeholder","shouldDisable","disabled","extraProps","onChangeOption","createPreserveOptionFunction","formData","onSubmitSuccess","validateForm","entries","savedSetting","stateOption","hasSchemaFormConfig","componentDidMount","resetStateFromProps","componentDidUpdate","prevProps","extraFields","defaultResetValues","acc","curr","setInitialData","render","handleAlertRuleSubmit","undefined","onSubmitError","handleFieldChange","renderField"],"sourceRoot":""}