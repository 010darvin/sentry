{"version":3,"file":"chunks/app_views_settings_projectSecurityHeaders_expectCt_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/previewFeature.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectSecurityHeaders/expectCt.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.tsx"],"sourcesContent":["import Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  type?: React.ComponentProps<typeof Alert>['type'];\n};\n\nconst PreviewFeature = ({type = 'info'}: Props) => (\n  <Alert type={type} showIcon>\n    {t(\n      'This feature is a preview and may change in the future. Thanks for being an early adopter!'\n    )}\n  </Alert>\n);\n\nexport default PreviewFeature;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport PreviewFeature from 'sentry/components/previewFeature';\nimport {t, tct} from 'sentry/locale';\nimport {ProjectKey} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ReportUri, {\n  getSecurityDsn,\n} from 'sentry/views/settings/projectSecurityHeaders/reportUri';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  keyList: null | ProjectKey[];\n} & AsyncView['state'];\n\nexport default class ProjectExpectCtReports extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Certificate Transparency (Expect-CT)'), projectId, false);\n  }\n\n  getInstructions(keyList: ProjectKey[]) {\n    return `Expect-CT: report-uri=\"${getSecurityDsn(keyList)}\"`;\n  }\n\n  renderBody() {\n    const {params} = this.props;\n    const {keyList} = this.state;\n    if (!keyList) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Certificate Transparency')} />\n\n        <PreviewFeature />\n\n        <ReportUri keyList={keyList} orgId={params.orgId} projectId={params.orgId} />\n\n        <Panel>\n          <PanelHeader>{'About'}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {tct(\n                `[link:Certificate Transparency]\n      (CT) is a security standard which helps track and identify valid certificates, allowing identification of maliciously issued certificates`,\n                {\n                  link: (\n                    <ExternalLink href=\"https://en.wikipedia.org/wiki/Certificate_Transparency\" />\n                  ),\n                }\n              )}\n            </p>\n            <p>\n              {tct(\n                \"To configure reports in Sentry, you'll need to configure the [header] a header from your server:\",\n                {\n                  header: <code>Expect-CT</code>,\n                }\n              )}\n            </p>\n\n            <pre>{this.getInstructions(keyList)}</pre>\n\n            <p>\n              {tct('For more information, see [link:the article on MDN].', {\n                link: (\n                  <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT\" />\n                ),\n              })}\n            </p>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n","import Field from 'sentry/components/forms/field';\nimport TextCopyInput from 'sentry/components/forms/textCopyInput';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport {ProjectKey} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport function getSecurityDsn(keyList: ProjectKey[]) {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n}\n\ntype Props = {\n  keyList: ProjectKey[];\n  orgId: string;\n  projectId: string;\n};\n\nexport default function ReportUri({keyList, orgId, projectId}: Props) {\n  return (\n    <Panel>\n      <PanelHeader>{t('Report URI')}</PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"info\">\n          {tct(\n            \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n            {\n              link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n            }\n          )}\n        </PanelAlert>\n        <Field inline={false} flexibleControlStateSize>\n          <TextCopyInput>{getSecurityDsn(keyList)}</TextCopyInput>\n        </Field>\n      </PanelBody>\n    </Panel>\n  );\n}\n"],"names":["Alert","t","PreviewFeature","type","routeTitleGen","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncComponent","SentryDocumentTitle","AsyncView","getTitle","render","renderComponent","ExternalLink","Panel","PanelBody","PanelHeader","tct","SettingsPageHeader","ReportUri","getSecurityDsn","ProjectExpectCtReports","getEndpoints","orgId","projectId","props","params","getInstructions","keyList","renderBody","state","link","header","Field","TextCopyInput","Link","PanelAlert","getDynamicText","DEFAULT_ENDPOINT","endpoint","length","dsn","security","value","fixed"],"sourceRoot":""}