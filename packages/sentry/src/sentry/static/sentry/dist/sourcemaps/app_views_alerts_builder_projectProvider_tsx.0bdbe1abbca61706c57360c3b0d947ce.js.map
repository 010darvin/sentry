{"version":3,"file":"chunks/app_views_alerts_builder_projectProvider_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAYA,SAASY,2BAAT,CAAqCC,KAArC,EAAmD;EAAA;;EACjD,MAAMC,GAAG,GAAGL,+DAAM,EAAlB;EACAE,uEAAc,CAAC;IAACI,QAAQ,EAAEF,KAAK,CAACE;EAAjB,CAAD,CAAd;EAEA,MAAM;IAACC,QAAD;IAAWC,MAAX;IAAmBC,YAAnB;IAAiC,GAAGC;EAApC,IAA6CN,KAAnD;EACA,MAAMO,SAAS,GAAGH,MAAM,CAACG,SAAP,IAAoBP,KAAK,CAACE,QAAN,CAAeM,KAAf,CAAqBC,OAA3D;EACA,MAAMC,eAAe,GAAGH,SAAS,KAAKI,SAAtC,CANiD,CAQjD;;EACA,MAAM;IAACC,QAAD;IAAWC,eAAX;IAA4BC,QAA5B;IAAsCC;EAAtC,IAAoDlB,oEAAW,CACnEa,eAAe,GACXC,SADW,GAEX;IACEK,KAAK,EAAE,CAACT,SAAD;EADT,CAH+D,CAArE;EAOA,MAAME,OAAO,GAAGC,eAAe,qBAC3BE,QAAQ,CAACK,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAACC,QAArB,CAD2B,2DACQP,QAAQ,CAACQ,MAAT,IAAmBR,QAAQ,CAAC,CAAD,CADnC,GAE3BA,QAAQ,CAACK,IAAT,CAAc;IAAA,IAAC;MAACI;IAAD,CAAD;IAAA,OAAYA,IAAI,KAAKd,SAArB;EAAA,CAAd,CAFJ;EAIAjB,gDAAS,CAAC,MAAM;IACd,IAAI,CAACmB,OAAL,EAAc;MACZ;IACD,CAHa,CAKd;;;IACAlB,8EAAe,CAACU,GAAD,EAAMI,YAAY,CAACgB,IAAnB,EAAyB,CAACZ,OAAO,CAACa,EAAT,CAAzB,CAAf;EACD,CAPQ,EAON,CAACrB,GAAD,EAAMI,YAAN,EAAoBI,OAApB,CAPM,CAAT;;EASA,IAAI,CAACI,eAAD,IAAoBC,QAAxB,EAAkC;IAChC,OAAO,gEAAC,0EAAD,KAAP;EACD,CA/BgD,CAiCjD;;;EACA,IAAI,CAACL,OAAD,IAAY,CAACM,UAAjB,EAA6B;IAC3BvB,4EAAU,CACP,kBAAiBa,YAAY,CAACgB,IAAK,4BAA2BrB,KAAK,CAACE,QAAN,CAAeM,KAAf,CAAqBe,QAAS,qBADrF,EAERvB,KAAK,CAACwB,MAFE,CAAV;EAID,CAvCgD,CAyCjD;;;EACA,IAAI,CAACf,OAAD,IAAYM,UAAhB,EAA4B;IAC1B,OACE,gEAAC,+DAAD;MAAO,IAAI,EAAC,SAAZ;MAAA,UAAuBpB,gDAAC,CAAC,iDAAD;IAAxB,EADF;EAGD;;EAED,OACE,gEAAC,2CAAD;IAAA,UACGQ,QAAQ,iBAAId,qDAAc,CAACc,QAAD,CAA1B,gBACGhB,mDAAY,CAACgB,QAAD,EAAW,EACrB,GAAGG,KADkB;MAErB,GAAGH,QAAQ,CAACH,KAFS;MAGrBS,OAHqB;MAIrBF,SAAS,EAAEG,eAAe,GAAGD,OAAO,CAACY,IAAX,GAAkBd,SAJvB;MAKrBF;IALqB,CAAX,CADf,GAQGF;EATN,EADF;AAaD;;AA7DQJ;AA+DT,iEAAeA,2BAAf","sources":["webpack:///./app/views/alerts/builder/projectProvider.tsx"],"sourcesContent":["import {cloneElement, Fragment, isValidElement, useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {fetchOrgMembers} from 'sentry/actionCreators/members';\nimport {navigateTo} from 'sentry/actionCreators/navigation';\nimport Alert from 'sentry/components/alert';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport useProjects from 'sentry/utils/useProjects';\nimport useScrollToTop from 'sentry/utils/useScrollToTop';\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  hasMetricAlerts: boolean;\n  organization: Organization;\n  children?: React.ReactNode;\n};\n\ntype RouteParams = {\n  projectId?: string;\n};\n\nfunction AlertBuilderProjectProvider(props: Props) {\n  const api = useApi();\n  useScrollToTop({location: props.location});\n\n  const {children, params, organization, ...other} = props;\n  const projectId = params.projectId || props.location.query.project;\n  const useFirstProject = projectId === undefined;\n\n  // calling useProjects() without args fetches all projects\n  const {projects, initiallyLoaded, fetching, fetchError} = useProjects(\n    useFirstProject\n      ? undefined\n      : {\n          slugs: [projectId],\n        }\n  );\n  const project = useFirstProject\n    ? projects.find(p => p.isMember) ?? (projects.length && projects[0])\n    : projects.find(({slug}) => slug === projectId);\n\n  useEffect(() => {\n    if (!project) {\n      return;\n    }\n\n    // fetch members list for mail action fields\n    fetchOrgMembers(api, organization.slug, [project.id]);\n  }, [api, organization, project]);\n\n  if (!initiallyLoaded || fetching) {\n    return <LoadingIndicator />;\n  }\n\n  // If there's no project show the project selector modal\n  if (!project && !fetchError) {\n    navigateTo(\n      `/organizations/${organization.slug}/alerts/wizard/?referrer=${props.location.query.referrer}&project=:projectId`,\n      props.router\n    );\n  }\n\n  // if loaded, but project fetching states incomplete or project can't be found, project doesn't exist\n  if (!project || fetchError) {\n    return (\n      <Alert type=\"warning\">{t('The project you were looking for was not found.')}</Alert>\n    );\n  }\n\n  return (\n    <Fragment>\n      {children && isValidElement(children)\n        ? cloneElement(children, {\n            ...other,\n            ...children.props,\n            project,\n            projectId: useFirstProject ? project.slug : projectId,\n            organization,\n          })\n        : children}\n    </Fragment>\n  );\n}\n\nexport default AlertBuilderProjectProvider;\n"],"names":["cloneElement","Fragment","isValidElement","useEffect","fetchOrgMembers","navigateTo","Alert","LoadingIndicator","t","useApi","useProjects","useScrollToTop","AlertBuilderProjectProvider","props","api","location","children","params","organization","other","projectId","query","project","useFirstProject","undefined","projects","initiallyLoaded","fetching","fetchError","slugs","find","p","isMember","length","slug","id","referrer","router"],"sourceRoot":""}