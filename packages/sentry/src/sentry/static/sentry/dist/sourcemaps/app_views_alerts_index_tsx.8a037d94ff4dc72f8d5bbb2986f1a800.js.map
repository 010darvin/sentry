{"version":3,"file":"chunks/app_views_alerts_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;;;AAMA,SAASI,eAAT,OAA4C;EAAA,IAAnB;IAACC;EAAD,CAAmB;EAC1C,MAAMC,YAAY,GAAGH,wEAAe,EAApC;EACA,MAAMI,eAAe,GAAGD,YAAY,CAACE,QAAb,CAAsBC,QAAtB,CAA+B,WAA/B,CAAxB;EAEA,MAAMC,OAAO,GACXL,QAAQ,iBAAIH,qDAAc,CAACG,QAAD,CAA1B,gBACIL,mDAAY,CAACK,QAAD,EAAW;IACrBC,YADqB;IAErBC;EAFqB,CAAX,CADhB,GAKIF,QANN;EAQA,OAAO,gEAAC,2CAAD;IAAA,UAAWK;EAAX,EAAP;AACD;;AAbQN;AAeT,iEAAeA,eAAf","sources":["webpack:///./app/views/alerts/index.tsx"],"sourcesContent":["import {cloneElement, Fragment, isValidElement} from 'react';\n\nimport useOrganization from 'sentry/utils/useOrganization';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nfunction AlertsContainer({children}: Props) {\n  const organization = useOrganization();\n  const hasMetricAlerts = organization.features.includes('incidents');\n\n  const content =\n    children && isValidElement(children)\n      ? cloneElement(children, {\n          organization,\n          hasMetricAlerts,\n        })\n      : children;\n\n  return <Fragment>{content}</Fragment>;\n}\n\nexport default AlertsContainer;\n"],"names":["cloneElement","Fragment","isValidElement","useOrganization","AlertsContainer","children","organization","hasMetricAlerts","features","includes","content"],"sourceRoot":""}