{"version":3,"file":"chunks/app_components_acl_featureDisabled_tsx-app_components_hookOrDefault_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/featureDisabled.tsx","webpack:///./app/components/hookOrDefault.tsx"],"sourcesContent":["import {Fragment, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport Button, {ButtonLabel} from 'sentry/components/button';\nimport Clipboard from 'sentry/components/clipboard';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {CONFIG_DOCS_URL} from 'sentry/constants';\nimport {IconChevron, IconCopy} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {selectText} from 'sentry/utils/selectText';\n\nconst installText = (features: string[], featureName: string): string =>\n  `# ${t('Enables the %s feature', featureName)}\\n${features\n    .map(f => `SENTRY_FEATURES['${f}'] = True`)\n    .join('\\n')}`;\n\ntype Props = {\n  /**\n   * The English name of the feature. This is used in the comment that will\n   * be outputted above the example line of code to enable the feature.\n   */\n  featureName: string;\n  /**\n   * The feature flag keys that should be displayed in the code example for\n   * enabling the feature.\n   */\n  features: string[];\n  /**\n   * Render the disabled message within a warning Alert. A custom Alert\n   * component may be provided.\n   *\n   * Attaches additional styles to the FeatureDisabled component to make it\n   * look consistent within the Alert.\n   */\n  alert?: boolean | React.ElementType;\n  /**\n   * Do not show the help toggle. The description will always be rendered.\n   */\n  hideHelpToggle?: boolean;\n  /**\n   * A custom message to display. Defaults to a generic disabled message.\n   */\n  message?: string;\n};\n\n/**\n * DisabledInfo renders a component informing that a feature has been disabled.\n *\n * By default this component will render a help button which toggles more\n * information about why the feature is disabled, showing the missing feature\n * flag and linking to documentation for managing sentry server feature flags.\n */\nfunction FeatureDisabled({\n  features,\n  featureName,\n  alert,\n  hideHelpToggle,\n  message = t('This feature is not enabled on your Sentry installation.'),\n}: Props) {\n  const [showHelp, setShowHelp] = useState(false);\n\n  function renderHelp() {\n    return (\n      <Fragment>\n        <HelpText>\n          {tct(\n            `Enable this feature on your sentry installation by adding the\n              following configuration into your [configFile:sentry.conf.py].\n              See [configLink:the configuration documentation] for more\n              details.`,\n            {\n              configFile: <code />,\n              configLink: <ExternalLink href={CONFIG_DOCS_URL} />,\n            }\n          )}\n        </HelpText>\n        <Clipboard hideUnsupported value={installText(features, featureName)}>\n          <CopyButton borderless size=\"xs\" icon={<IconCopy size=\"xs\" />}>\n            {t('Copy to Clipboard')}\n          </CopyButton>\n        </Clipboard>\n        <Pre onClick={e => selectText(e.target as HTMLElement)}>\n          <code>{installText(features, featureName)}</code>\n        </Pre>\n      </Fragment>\n    );\n  }\n\n  if (!alert) {\n    const showDescription = hideHelpToggle || showHelp;\n    return (\n      <Fragment>\n        <FeatureDisabledMessage>\n          {message}\n          {!hideHelpToggle && (\n            <ToggleButton\n              priority=\"link\"\n              size=\"xs\"\n              onClick={() => setShowHelp(!showHelp)}\n            >\n              {t('Help')}\n              <IconChevron direction={showDescription ? 'up' : 'down'} />\n            </ToggleButton>\n          )}\n        </FeatureDisabledMessage>\n        {showDescription && <HelpDescription>{renderHelp()}</HelpDescription>}\n      </Fragment>\n    );\n  }\n\n  const AlertComponent = typeof alert === 'boolean' ? Alert : alert;\n  return (\n    <AlertComponent type=\"warning\" showIcon expand={renderHelp()}>\n      {message}\n    </AlertComponent>\n  );\n}\n\nconst FeatureDisabledMessage = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  line-height: ${p => p.theme.text.lineHeightBody};\n`;\n\nconst HelpDescription = styled('div')`\n  margin-top: ${space(1)};\n\n  pre,\n  code {\n    margin-bottom: 0;\n    white-space: pre;\n  }\n\n  button {\n    margin-bottom: ${space(0.5)};\n  }\n`;\n\nconst HelpText = styled('p')`\n  margin-bottom: ${space(1)};\n`;\n\nconst ToggleButton = styled(Button)`\n  color: ${p => p.theme.active};\n  height: ${p => p.theme.text.lineHeightBody}em;\n  min-height: ${p => p.theme.text.lineHeightBody}em;\n\n  &:hover {\n    color: ${p => p.theme.activeHover};\n  }\n\n  ${ButtonLabel} {\n    display: grid;\n    grid-auto-flow: column;\n    gap: ${space(1)};\n  }\n`;\n\nconst CopyButton = styled(Button)`\n  margin-left: auto;\n`;\n\nconst Pre = styled('pre')`\n  margin-bottom: 0;\n`;\n\nexport default FeatureDisabled;\n","import {Component, lazy, Suspense} from 'react';\n\nimport HookStore from 'sentry/stores/hookStore';\nimport {HookName, Hooks} from 'sentry/types/hooks';\n\ntype Params<H extends HookName> = {\n  /**\n   * The name of the hook as listed in hookstore.add(hookName, callback)\n   */\n  hookName: H;\n  /**\n   * Component that will be shown if no hook is available\n   */\n  defaultComponent?: ReturnType<Hooks[H]>;\n  /**\n   * This is a function that returns a promise (more specifically a function\n   * that returns the result of a dynamic import using `import()`. This will\n   * use React.Suspense and React.lazy to render the component.\n   */\n  defaultComponentPromise?: () => Promise<ReturnType<Hooks[H]>>;\n};\n\n/**\n * Use this instead of the usual ternery operator when using getsentry hooks.\n * So in lieu of:\n *\n *  HookStore.get('component:org-auth-view').length\n *   ? HookStore.get('component:org-auth-view')[0]()\n *   : OrganizationAuth\n *\n * do this instead:\n *\n *   const HookedOrganizationAuth = HookOrDefault({\n *     hookName:'component:org-auth-view',\n *     defaultComponent: OrganizationAuth,\n *   })\n *\n * Note, you will need to add the hookstore function in getsentry [0] first and\n * then register the types [2] and validHookName [1] in sentry.\n *\n * [0] /getsentry/static/getsentry/gsApp/registerHooks.jsx\n * [1] /sentry/app/stores/hookStore.tsx\n * [2] /sentry/app/types/hooks.ts\n */\nfunction HookOrDefault<H extends HookName>({\n  hookName,\n  defaultComponent,\n  defaultComponentPromise,\n}: Params<H>) {\n  type Props = React.ComponentProps<ReturnType<Hooks[H]>>;\n  type State = {hooks: Hooks[H][]};\n\n  class HookOrDefaultComponent extends Component<Props, State> {\n    static displayName = `HookOrDefaultComponent(${hookName})`;\n\n    state: State = {\n      hooks: HookStore.get(hookName),\n    };\n\n    componentWillUnmount() {\n      this.unlistener?.();\n    }\n\n    unlistener = HookStore.listen(\n      (name: string, hooks: Hooks[HookName][]) =>\n        name === hookName && this.setState({hooks}),\n      undefined\n    );\n\n    get defaultComponent() {\n      // If `defaultComponentPromise` is passed, then return a Suspended component\n      if (defaultComponentPromise) {\n        const DefaultComponent = lazy(defaultComponentPromise);\n\n        return (props: Props) => (\n          <Suspense fallback={null}>\n            <DefaultComponent {...props} />\n          </Suspense>\n        );\n      }\n\n      return defaultComponent;\n    }\n\n    render() {\n      const hookExists = this.state.hooks && this.state.hooks.length;\n      const componentFromHook = this.state.hooks[0]?.();\n      const HookComponent =\n        hookExists && componentFromHook ? componentFromHook : this.defaultComponent;\n\n      return HookComponent ? <HookComponent {...this.props} /> : null;\n    }\n  }\n\n  return HookOrDefaultComponent;\n}\n\nexport default HookOrDefault;\n"],"names":["Fragment","useState","Alert","Button","ButtonLabel","Clipboard","ExternalLink","CONFIG_DOCS_URL","IconChevron","IconCopy","t","tct","space","selectText","installText","features","featureName","map","f","join","FeatureDisabled","alert","hideHelpToggle","message","showHelp","setShowHelp","renderHelp","configFile","configLink","e","target","showDescription","AlertComponent","FeatureDisabledMessage","p","theme","text","lineHeightBody","HelpDescription","HelpText","ToggleButton","active","activeHover","CopyButton","Pre","Component","lazy","Suspense","HookStore","HookOrDefault","hookName","defaultComponent","defaultComponentPromise","HookOrDefaultComponent","hooks","get","listen","name","setState","undefined","componentWillUnmount","unlistener","DefaultComponent","props","render","hookExists","state","length","componentFromHook","HookComponent"],"sourceRoot":""}