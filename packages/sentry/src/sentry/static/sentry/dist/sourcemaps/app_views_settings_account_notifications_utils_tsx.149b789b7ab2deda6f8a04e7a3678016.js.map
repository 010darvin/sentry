{"version":3,"file":"chunks/app_views_settings_account_notifications_utils_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAEO,MAAMC,aAAa,GAAG;EAC3BC,KAAK,EAAE,SADoB;EAE3BC,KAAK,EAAE,OAFoB;EAG3BC,OAAO,EAAE;AAHkB,CAAtB;AAKA,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,IAAP,CAAYN,aAAZ,CAA3B;AAEP;AACA;AACA;;AACO,MAAMO,aAAa,GAAG;EAC3BC,OAAO,EAAE,CADkB;EAE3BC,KAAK,EAAE,EAFoB;EAG3BC,MAAM,EAAE,EAHmB;EAI3BC,cAAc,EAAE,EAJW;EAK3BC,cAAc,EAAE;AALW,CAAtB;AAQA,MAAMC,6BAA6B,GAAG,CAAtC;AACA,MAAMC,uBAAuB,GAAG,CAAhC;AACA,MAAMC,2BAA2B,GAAG,GAApC;AAOA,MAAMC,2BAA2B,GAAG,CACzC,QADyC,EAEzC,eAFyC,EAGzC,UAHyC,EAIzC,QAJyC,EAKzC,UALyC,EAMzC,OANyC,EAOzC,SAPyC,EAQzC,OARyC,CAApC;AAWA,MAAMC,gCAAgC,GAAG,CAC9C,+BAD8C,EAE9C,qBAF8C,CAAzC;AAKA,MAAMC,oBAAoB,GAC/B;EAAA,WACE;IAAG,KAAK,EAAE;MAACC,YAAY,EAAE;IAAf,CAAV;IAAA,UACE;MAAA;IAAA;EADF,EADF,EAIE;IAAA,UACGpB,gDAAC,CACA,yFADA;EADJ,EAJF;AAAA,EADK;;;;;;;;;;;;;;;;;;;;;;;;AC7CP;AAEA;AAEA;AACA;AACA;;;AAEO,MAAM0B,2BAAkD,GAAG;EAChEC,MAAM,EAAE;IACNC,IAAI,EAAE,QADA;IAENC,IAAI,EAAE,QAFA;IAGNC,KAAK,EAAE9B,gDAAC,CAAC,cAAD,CAHF;IAIN+B,OAAO,EAAE,CACP,CAAC,QAAD,EAAW/B,gDAAC,CAAC,IAAD,CAAZ,CADO,EAEP,CAAC,OAAD,EAAUA,gDAAC,CAAC,KAAD,CAAX,CAFO,CAJH;IAQNgC,IAAI,EAAEhC,gDAAC,CAAC,gEAAD;EARD,CADwD;EAWhEiC,aAAa,EAAE;IACbL,IAAI,EAAE,eADO;IAEbC,IAAI,EAAE,QAFO;IAGbC,KAAK,EACH,iEAAC,2CAAD;MAAA,WACG9B,gDAAC,CAAC,gBAAD,CADJ,OACwB,gEAAC,sEAAD;QAAc,IAAI,EAAC;MAAnB,EADxB;IAAA,EAJW;IAQb+B,OAAO,EAAE,CACP,CAAC,QAAD,EAAW/B,gDAAC,CAAC,IAAD,CAAZ,CADO,EAEP,CAAC,OAAD,EAAUA,gDAAC,CAAC,KAAD,CAAX,CAFO,CARI;IAYbgC,IAAI,EAAEhC,gDAAC,CAAC,mEAAD;EAZM,CAXiD;EAyBhEkC,QAAQ,EAAE;IACRN,IAAI,EAAE,UADE;IAERC,IAAI,EAAE,QAFE;IAGRC,KAAK,EAAE9B,gDAAC,CAAC,gBAAD,CAHA;IAIR+B,OAAO,EAAE,CACP,CAAC,QAAD,EAAW/B,gDAAC,CAAC,IAAD,CAAZ,CADO,EAEP,CAAC,gBAAD,EAAmBA,gDAAC,CAAC,wBAAD,CAApB,CAFO,EAGP,CAAC,OAAD,EAAUA,gDAAC,CAAC,KAAD,CAAX,CAHO,CAJD;IASRgC,IAAI,EAAEhC,gDAAC,CAAC,+DAAD;EATC,CAzBsD;EAoChEmC,MAAM,EAAE;IACNP,IAAI,EAAE,QADA;IAENC,IAAI,EAAE,QAFA;IAGNC,KAAK,EAAE9B,gDAAC,CAAC,SAAD,CAHF;IAIN+B,OAAO,EAAE,CACP,CAAC,QAAD,EAAW/B,gDAAC,CAAC,IAAD,CAAZ,CADO,EAEP,CAAC,gBAAD,EAAmBA,gDAAC,CAAC,0BAAD,CAApB,CAFO,EAGP,CAAC,OAAD,EAAUA,gDAAC,CAAC,KAAD,CAAX,CAHO,CAJH;IASNgC,IAAI,EAAEhC,gDAAC,CAAC,6CAAD;EATD,CApCwD;EA+ChEoC,QAAQ,EAAE;IACRR,IAAI,EAAE,UADE;IAERC,IAAI,EAAE,QAFE;IAGRC,KAAK,EAAE9B,gDAAC,CAAC,iBAAD,CAHA;IAIR+B,OAAO,EAAE,CACP,CAAC,OAAD,EAAU/B,gDAAC,CAAC,OAAD,CAAX,CADO,EAEP,CAAC,OAAD,EAAUA,gDAAC,CAAC,OAAD,CAAX,CAFO,EAGP,CAAC,SAAD,EAAYA,gDAAC,CAAC,iBAAD,CAAb,CAHO,CAJD;IASRqC,QAAQ,EAAE,IATF;IAURC,QAAQ,EAAEC,GAAG,IAAI;MACf;MACA;MACA,IAAI,CAACA,GAAD,IAAQA,GAAG,CAACC,MAAJ,KAAe,CAA3B,EAA8B;QAC5B,MAAMC,KAAK,CAAC,2CAAD,CAAX;MACD;IACF;EAhBO,CA/CsD;EAiEhEC,QAAQ,EAAE;IACRd,IAAI,EAAE,UADE;IAERC,IAAI,EAAE,QAFE;IAGRC,KAAK,EAAE9B,gDAAC,CAAC,WAAD,CAHA;IAIR+B,OAAO,EAAE,CACP,CAAC,QAAD,EAAW/B,gDAAC,CAAC,IAAD,CAAZ,CADO,EAEP,CAAC,OAAD,EAAUA,gDAAC,CAAC,KAAD,CAAX,CAFO,CAJD;IAQRgC,IAAI,EAAEhC,gDAAC,CAAC,+DAAD;EARC,CAjEsD;EA2EhE2C,KAAK,EAAE;IACLf,IAAI,EAAE,OADD;IAELC,IAAI,EAAE,QAFD;IAGLC,KAAK,EAAE9B,gDAAC,CAAC,OAAD,CAHH;IAIL+B,OAAO,EAAE,CACP,CAAC,QAAD,EAAW/B,gDAAC,CAAC,IAAD,CAAZ,CADO,EAEP,CAAC,OAAD,EAAUA,gDAAC,CAAC,KAAD,CAAX,CAFO,CAJJ;IAQLgC,IAAI,EAAEhC,gDAAC,CAAC,kDAAD;EARF,CA3EyD;EAqFhE4C,OAAO,EAAE;IACPhB,IAAI,EAAE,gBADC;IAEPC,IAAI,EAAE,OAFC;IAGPC,KAAK,EAAE9B,gDAAC,CAAC,gBAAD,CAHD;IAIPgC,IAAI,EAAEhC,gDAAC,CAAC,iDAAD;EAJA,CArFuD;EA2FhEE,KAAK,EAAE;IACL0B,IAAI,EAAE,eADD;IAELC,IAAI,EAAE,OAFD;IAGLC,KAAK,EAAE9B,gDAAC,CAAC,eAAD,CAHH;IAILgC,IAAI,EAAEhC,gDAAC,CAAC,uDAAD;EAJF,CA3FyD;EAiGhE6C,6BAA6B,EAAE;IAC7BjB,IAAI,EAAE,+BADuB;IAE7BC,IAAI,EAAE,QAFuB;IAG7BC,KAAK,EAAE9B,gDAAC,CAAC,iBAAD,CAHqB;IAI7B+B,OAAO,EAAE,CACP,CAAC,IAAD,EAAc/B,gDAAC,CAAC,IAAD,CAAf,CADO,EAEP,CAAC,KAAD,EAAeA,gDAAC,CAAC,KAAD,CAAhB,CAFO,CAJoB;IAQ7BgC,IAAI,EAAEhC,gDAAC,CAAC,iDAAD;EARsB,CAjGiC;EA2GhE8C,mBAAmB,EAAE;IACnBlB,IAAI,EAAE,qBADa;IAEnBC,IAAI,EAAE,QAFa;IAGnBC,KAAK,EAAE9B,gDAAC,CAAC,uCAAD,CAHW;IAInB+B,OAAO,EAAE,CACP,CAAC,IAAD,EAAc/B,gDAAC,CAAC,IAAD,CAAf,CADO,EAEP,CAAC,KAAD,EAAeA,gDAAC,CAAC,KAAD,CAAhB,CAFO,CAJU;IAQnBgC,IAAI,EAAEhC,gDAAC,CAAC,wEAAD;EARY;AA3G2C,CAA3D,EAuHP;;AACO,MAAM+C,YAAY,GAAG,CAC1B;EACEnB,IAAI,EAAE,eADR;EAEEE,KAAK,EAAE9B,gDAAC,CAAC,iBAAD,CAFV;EAGEgC,IAAI,EAAEhC,gDAAC,CACL,6EADK,CAHT;EAME+B,OAAO,EAAE,CACP,CAAC,QAAD,EAAW/B,gDAAC,CAAC,cAAD,CAAZ,CADO,EAEP,CAAC,OAAD,EAAUA,gDAAC,CAAC,MAAD,CAAX,CAFO;AANX,CAD0B,EAY1B;EACE4B,IAAI,EAAE,aADR;EAEEE,KAAK,EAAE9B,gDAAC,CAAC,QAAD,CAFV;EAGEgC,IAAI,EAAER,kDAAG,CAAC,uEAAD,EAA0E;IACjFwB,SAAS,EAAE,gEAAC,4EAAD;MAAc,IAAI,EAAEvB,0GAAuB,CAAC,OAAD;IAA3C;EADsE,CAA1E,CAHX;EAMEM,OAAO,EAAE,CACP,CAAC,QAAD,EAAW/B,gDAAC,CAAC,IAAD,CAAZ,CADO,EAEP,CAAC,OAAD,EAAUA,gDAAC,CAAC,KAAD,CAAX,CAFO;AANX,CAZ0B,EAuB1B;EACE4B,IAAI,EAAE,mBADR;EAEEE,KAAK,EAAE9B,gDAAC,CAAC,cAAD,CAFV;EAGEgC,IAAI,EAAER,kDAAG,CACP,4EADO,EAEP;IACEwB,SAAS,EAAE,gEAAC,4EAAD;MAAc,IAAI,EAAEvB,0GAAuB,CAAC,aAAD;IAA3C;EADb,CAFO,CAHX;EASEM,OAAO,EAAE,CACP,CAAC,QAAD,EAAW/B,gDAAC,CAAC,IAAD,CAAZ,CADO,EAEP,CAAC,OAAD,EAAUA,gDAAC,CAAC,KAAD,CAAX,CAFO;AATX,CAvB0B,EAqC1B;EACE4B,IAAI,EAAE,kBADR;EAEEE,KAAK,EAAE9B,gDAAC,CAAC,aAAD,CAFV;EAGEgC,IAAI,EAAER,kDAAG,CACP,2EADO,EAEP;IACEwB,SAAS,EAAE,gEAAC,4EAAD;MAAc,IAAI,EAAEvB,0GAAuB,CAAC,YAAD;IAA3C;EADb,CAFO,CAHX;EASEM,OAAO,EAAE,CACP,CAAC,QAAD,EAAW/B,gDAAC,CAAC,IAAD,CAAZ,CADO,EAEP,CAAC,OAAD,EAAUA,gDAAC,CAAC,KAAD,CAAX,CAFO;AATX,CArC0B,CAArB;;;;;;;;;;;;;;;;;;;;AC9HP;AACA;AAEA;;;;AAOA;AACA,MAAMoD,WAAW,GAAG;EAAA,IAAC;IAACC,gBAAD;IAAmBC;EAAnB,CAAD;EAAA,OAClB,iEAAC,UAAD;IAAA,WACE,gEAAC,gEAAD;MAEI,CAACH,+FAAY,CAACE,gBAAD,CAAb,GAAkCC;IAFtC,EADF,EAME;MAAA,UAAOA,MAAM,CAACC;IAAd,EANF;EAAA,EADkB;AAAA,CAApB;;AAAMH;;AAWN,MAAMI,UAAU,GAAG,8EAAO,KAAP;EAAA;AAAA,MAAH,sBAEPN,+DAAK,CAAC,GAAD,CAFE,0CAAhB;;AAMA,iEAAeE,WAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AAGA;AAEA;AAOA;AACA;AAEA;AACA;AACA;;;AACO,MAAMM,kBAAkB,GAAIL,gBAAD,IAChC,CAAC,QAAD,EAAW,OAAX,EAAoB,UAApB,EAAgC,eAAhC,EAAiDM,QAAjD,CAA0DN,gBAA1D,CADK;AAGA,MAAMF,YAAY,GAAIE,gBAAD,IAAsC;EAChE,OAAOK,kBAAkB,CAACL,gBAAD,CAAlB,GAAuC,SAAvC,GAAmD,cAA1D;AACD,CAFM;AAIA,MAAMO,mBAAmB,GAC9BC,QADiC,IAE4C;EAC7E,OAAOA,QAAQ,CAACC,MAAT,CAEL,CAACC,GAAD,EAAMC,OAAN,KAAkB;IAClB,MAAMC,OAAO,GAAGD,OAAO,CAACE,YAAR,CAAqBX,IAArC;;IACA,IAAIQ,GAAG,CAACI,cAAJ,CAAmBF,OAAnB,CAAJ,EAAiC;MAC/BF,GAAG,CAACE,OAAD,CAAH,CAAaJ,QAAb,CAAsBO,IAAtB,CAA2BJ,OAA3B;IACD,CAFD,MAEO;MACLD,GAAG,CAACE,OAAD,CAAH,GAAe;QACbC,YAAY,EAAEF,OAAO,CAACE,YADT;QAEbL,QAAQ,EAAE,CAACG,OAAD;MAFG,CAAf;IAID;;IACD,OAAOD,GAAP;EACD,CAbM,EAaJ,EAbI,CAAP;AAcD,CAjBM;AAmBA,MAAMM,gBAAgB,GAAIhB,gBAAD,IAAsC;EACpE,QAAQA,gBAAR;IACE,KAAK,QAAL;MACE,OAAO,QAAP;;IACF,KAAK,QAAL;MACE,OAAO,gBAAP;;IACF,KAAK,UAAL;MACE,OAAO,gBAAP;;IACF;MACE,OAAO,EAAP;EARJ;AAUD,CAXM;AAaA,MAAMiB,oBAAoB,GAAIC,SAAD,IAAiC;EACnE,OAAOA,SAAS,CAACC,IAAV,GAAiBC,IAAjB,CAAsB,GAAtB,CAAP;AACD,CAFM;AAIA,MAAMC,eAAe,GAAG,CAAC3C,OAAD,EAAsB4C,GAAtB,KAA8C;EAC3E,IAAI,CAAC5C,OAAL,EAAc;IACZ,OAAO,SAAP;EACD;;EACD,MAAM6C,KAAK,GAAG7C,OAAO,CAAC8C,IAAR,CAAaC,GAAG,IAAIA,GAAG,CAAC,CAAD,CAAH,KAAWH,GAA/B,CAAd;;EACA,IAAI,CAACC,KAAL,EAAY;IACV,MAAM,IAAInC,KAAJ,CAAW,kBAAiBkC,GAAI,EAAhC,CAAN;EACD;;EAED,OAAOC,KAAK,CAAC,CAAD,CAAZ;AACD,CAVM;;AAYP,MAAMG,cAAc,GAAIC,IAAD,IACrB,CAAC,CAAC1E,MAAM,CAACC,IAAP,CAAYyE,IAAZ,EAAkBxC,MAApB,IAA8BlC,MAAM,CAAC2E,MAAP,CAAcD,IAAd,EAAoBE,KAApB,CAA0BC,KAAK,IAAIA,KAAK,KAAK,OAA7C,CADhC;;AAGA,MAAMC,gBAAgB,GAAIJ,IAAD,IACvB1E,MAAM,CAAC2E,MAAP,CAAcD,IAAd,EAAoBlB,MAApB,CACE,CAACuB,aAAD,EAA+BC,YAA/B,KACEA,YAAY,KAAK,OAAjB,GAA2BD,aAA3B,GAA2CC,YAF/C,EAGE,IAHF,CADF;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMC,oCAAoC,GAAG,CAClDP,IADkD,EAElDQ,YAFkD,EAGlDC,aAHkD,EAIlDC,SAJkD,KAKT;EACzC;EACA,IAAIC,aAAJ;;EACA,IAAID,SAAS,KAAK,MAAlB,EAA0B;IACxBC,aAAa,GAAGZ,cAAc,CAACC,IAAD,CAAd,GACZS,aADY,GAEZL,gBAAgB,CAACJ,IAAD,CAAhB,IAA0BS,aAF9B;EAGD,CAJD,MAIO;IACLE,aAAa,GAAGZ,cAAc,CAACC,IAAD,CAAd,GAAuB,OAAvB,GAAiCI,gBAAgB,CAACJ,IAAD,CAAhB,IAA0B,SAA3E;EACD,CATwC,CAWzC;;;EACA,OAAO1E,MAAM,CAACsF,WAAP,CACLtF,MAAM,CAACC,IAAP,CAAYN,gGAAZ,EAA2B4F,GAA3B,CAA+BzD,QAAQ,IAAI,CACzCA,QADyC,EAEzCoD,YAAY,CAAC7B,QAAb,CAAsBvB,QAAtB,IAAkCuD,aAAlC,GAAkD,OAFT,CAA3C,CADK,CAAP;AAMD,CAvBM;AAyBP;AACA;AACA;;AACO,MAAMG,yBAAyB,GAAG,YAER;EAC/B,MAAMC,MAAkC,GAAG,EAA3C;;EAD+B,kCAD5BC,OAC4B;IAD5BA,OAC4B;EAAA;;EAG/BA,OAAO,CAACC,OAAR,CAAgBC,cAAc,IAC5B5F,MAAM,CAAC6F,OAAP,CAAeD,cAAf,EAA+BD,OAA/B,CAAuC;IAAA,IAAC,CAACpE,IAAD,EAAOuE,mBAAP,CAAD;IAAA,OACrC9F,MAAM,CAAC6F,OAAP,CAAeC,mBAAf,EAAoCH,OAApC,CAA4C;MAAA,IAAC,CAACP,SAAD,EAAYW,iBAAZ,CAAD;MAAA,OAC1C/F,MAAM,CAAC6F,OAAP,CAAeE,iBAAf,EAAkCJ,OAAlC,CAA0C,SAAmC;QAAA,IAAlC,CAACK,OAAD,EAAUC,kBAAV,CAAkC;QAC3E9C,iDAAG,CAACsC,MAAD,EAAS,CAAClE,IAAD,EAAO6D,SAAP,EAAkBY,OAAlB,EAA2B7B,IAA3B,CAAgC,GAAhC,CAAT,EAA+C8B,kBAA/C,CAAH;MACD,CAFD,CAD0C;IAAA,CAA5C,CADqC;EAAA,CAAvC,CADF;EAUA,OAAOR,MAAP;AACD,CAhBM;AAkBP;AACA;AACA;AACA;AACA;;AACO,MAAMS,oBAAoB,GAAG,CAClCnD,gBADkC,EAElCoD,oBAFkC,KAGO;EAAA;;EACzC,OACEnG,MAAM,CAAC2E,MAAP,CAAc,0BAAAwB,oBAAoB,CAACpD,gBAAD,CAApB,gFAAwCqD,IAAxC,KAAgD,EAA9D,EAAkEC,GAAlE,MACArG,MAAM,CAACsF,WAAP,CACEtF,MAAM,CAAC6F,OAAP,CAAelG,gGAAf,EAA8B4F,GAA9B,CAAkC;IAAA,IAAC,CAACzD,QAAD,EAAW+C,KAAX,CAAD;IAAA,OAAuB,CACvD/C,QADuD,EAEvD+C,KAAK,KAAK,SAAV,GAAsBd,gBAAgB,CAAChB,gBAAD,CAAtC,GAA2D8B,KAFJ,CAAvB;EAAA,CAAlC,CADF,CAFF;AASD,CAbM;AAeP;AACA;AACA;;AACO,MAAMyB,mBAAmB,GAAG,CACjCvD,gBADiC,EAEjCoD,oBAFiC,KAGpB;EACb,MAAMI,QAAQ,GAAGL,oBAAoB,CAACnD,gBAAD,EAAmBoD,oBAAnB,CAArC;EAEA,OAAOnG,MAAM,CAAC6F,OAAP,CAAeU,QAAf,EACJC,MADI,CACG;IAAA,IAAC,CAACC,CAAD,EAAI5B,KAAJ,CAAD;IAAA,OAAgB,CAAC,CAAC,OAAD,EAAUxB,QAAV,CAAmBwB,KAAnB,CAAjB;EAAA,CADH,EAEJU,GAFI,CAEA;IAAA,IAAC,CAACzD,QAAD,EAAW2E,CAAX,CAAD;IAAA,OAAmB3E,QAAnB;EAAA,CAFA,CAAP;AAGD,CATM;AAWP;AACA;AACA;;AACO,MAAM4E,iBAAiB,GAAG,CAC/B3D,gBAD+B,EAE/BoD,oBAF+B,KAGpB;EACX,MAAMQ,aAAa,GAAGL,mBAAmB,CAACvD,gBAAD,EAAmBoD,oBAAnB,CAAzC;EACA,OAAOQ,aAAa,CAACzE,MAAd,GACHgE,oBAAoB,CAACnD,gBAAD,EAAmBoD,oBAAnB,CAApB,CAA6DQ,aAAa,CAAC,CAAD,CAA1E,CADG,GAEH,OAFJ;AAGD,CARM;AAUP;AACA;AACA;AACA;AACA;;AACO,MAAMC,aAAa,GAAG,CAC3B7D,gBAD2B,EAE3BoD,oBAF2B,KAGhB;EAAA;;EACX,MAAMU,OAAO,GAAG,CAACC,CAAD,EAAYC,CAAZ,KAAkC7G,gGAAa,CAAC4G,CAAD,CAAb,GAAmB5G,gGAAa,CAAC6G,CAAD,CAAlF;;EAEA,MAAMC,wBAAwB,GAC5BhH,MAAM,CAAC2E,MAAP,CAAcuB,oBAAoB,CAACnD,gBAAD,EAAmBoD,oBAAnB,CAAlC,EACGjC,IADH,CACQ2C,OADR,EAEGR,GAFH,MAEY,OAHd;;EAKA,IAAIW,wBAAwB,KAAK,OAAjC,EAA0C;IACxC,OAAOA,wBAAP;EACD;;EAED,MAAMC,qBAAqB,GACzBjH,MAAM,CAAC2E,MAAP,CACE,2BAAAwB,oBAAoB,CAACpD,gBAAD,CAApB,kFAAyCF,YAAY,CAACE,gBAAD,CAArD,MAA4E,EAD9E,EAGGmE,OAHH,CAGWjB,kBAAkB,IAAIjG,MAAM,CAAC2E,MAAP,CAAcsB,kBAAd,CAHjC,EAIG/B,IAJH,CAIQ2C,OAJR,EAKGR,GALH,MAKY,SANd;EAQA,OAAOY,qBAAqB,KAAK,SAA1B,GAAsC,OAAtC,GAAgDA,qBAAvD;AACD,CAxBM;AA0BP;AACA;AACA;AACA;AACA;;AACO,MAAME,oBAAoB,GAAG,CAClCpE,gBADkC,EAElCoD,oBAFkC,KAIlC,CAAC,OAAD,EAAU,SAAV,EAAqB9C,QAArB,CAA8BuD,aAAa,CAAC7D,gBAAD,EAAmBoD,oBAAnB,CAA3C,CAJK;AAMP;AACA;AACA;AACA;AACA;;AACO,MAAMiB,YAAY,GAAG,CAC1BrE,gBAD0B,EAE1BoD,oBAF0B;EAAA;;EAAA,OAI1BnG,MAAM,CAACC,IAAP,CACE,2BAAAkG,oBAAoB,CAACpD,gBAAD,CAApB,kFAAyCF,YAAY,CAACE,gBAAD,CAArD,MAA4E,EAD9E,CAJ0B;AAAA,CAArB;AAQA,MAAMsE,eAAe,GAAG,CAC7BtE,gBAD6B,EAE7BoD,oBAF6B,EAG7BmB,QAH6B;EAAA;;EAAA,OAK7B,2BAAAnB,oBAAoB,CAACpD,gBAAD,CAApB,4GAAyCF,YAAY,CAACE,gBAAD,CAArD,mFACEuE,QADF,MAEK;IACH1H,KAAK,EAAE;EADJ,CAPwB;AAAA,CAAxB;AAWP;AACA;AACA;AACA;;AACO,MAAM2H,aAAa,GAAG,CAC3BxE,gBAD2B,EAE3BoD,oBAF2B,EAG3BqB,OAH2B,KAIc;EACzC,MAAM1F,QAAQ,GAAGwE,mBAAmB,CAACvD,gBAAD,EAAmBoD,oBAAnB,CAAnB,CAA4D,CAA5D,CAAjB;EAEA,OAAOnG,MAAM,CAACsF,WAAP,CACLkC,OAAO,CAACjC,GAAR,CAAYvC,MAAM,IAAI,CACpBA,MAAM,CAACyE,EADa,EAEpBJ,eAAe,CAACtE,gBAAD,EAAmBoD,oBAAnB,EAAyCnD,MAAM,CAACyE,EAAhD,CAAf,CAAmE3F,QAAnE,CAFoB,CAAtB,CADK,CAAP;AAMD,CAbM;AAeP;AACA;AACA;;AACO,MAAM4F,qBAAqB,GAAG,CACnC3E,gBADmC,EAEnCoD,oBAFmC,KAInCiB,YAAY,CAACrE,gBAAD,EAAmBoD,oBAAnB,CAAZ,CAAqDjE,MAArD,GACA1B,gHALK;AAOP;AACA;AACA;AACA;AACA;;AACO,MAAMmH,wBAAwB,GAAG,CACtC5E,gBADsC,EAEtCoD,oBAFsC,EAGtCyB,WAHsC,KAIP;EAC/B,MAAM1C,YAAsB,GAAG0C,WAAW,CAAC9F,QAAZ,GAC3B9B,MAAM,CAAC2E,MAAP,CAAciD,WAAW,CAAC9F,QAA1B,CAD2B,GAE3B,EAFJ;EAGA,MAAMqD,aAAa,GAAGpB,gBAAgB,CAAChB,gBAAD,CAAtC,CAJ+B,CAM/B;;EACA,IAAI,CAAC/C,MAAM,CAACC,IAAP,CAAYkG,oBAAZ,EAAkCjE,MAAvC,EAA+C;IAC7C,OAAO;MACL,CAACa,gBAAD,GAAoB;QAClBqD,IAAI,EAAE;UACJyB,EAAE,EAAE7H,MAAM,CAACsF,WAAP,CAAmBJ,YAAY,CAACK,GAAb,CAAiBzD,QAAQ,IAAI,CAACA,QAAD,EAAWqD,aAAX,CAA7B,CAAnB;QADA;MADY;IADf,CAAP;EAOD;;EAED,OAAO;IACL,CAACpC,gBAAD,GAAoB/C,MAAM,CAACsF,WAAP,CAClBtF,MAAM,CAAC6F,OAAP,CAAeM,oBAAoB,CAACpD,gBAAD,CAAnC,EAAuDwC,GAAvD,CACE;MAAA,IAAC,CAACH,SAAD,EAAY0C,aAAZ,CAAD;MAAA,OAAgC,CAC9B1C,SAD8B,EAE9BpF,MAAM,CAACsF,WAAP,CACEtF,MAAM,CAAC6F,OAAP,CAAeiC,aAAf,EAA8BvC,GAA9B,CAAkC;QAAA,IAAC,CAACS,OAAD,EAAU+B,WAAV,CAAD;QAAA,OAA4B,CAC5D/B,OAD4D,EAE5Df,oCAAoC,CAClC8C,WADkC,EAElC7C,YAFkC,EAGlCC,aAHkC,EAIlCC,SAJkC,CAFwB,CAA5B;MAAA,CAAlC,CADF,CAF8B,CAAhC;IAAA,CADF,CADkB;EADf,CAAP;AAoBD,CAzCM;AA2CP;AACA;AACA;AACA;AACA;AACA;;AACO,MAAM4C,uBAAuB,GAAG,CACrCjF,gBADqC,EAErCoD,oBAFqC,EAGrCyB,WAHqC,EAIrCK,SAJqC,KAKN;EAC/B,MAAMC,QAAQ,GAAGlI,MAAM,CAAC2E,MAAP,CAAciD,WAAd,EAA2B,CAA3B,CAAjB;EACA,IAAI1C,YAAY,GAAGoB,mBAAmB,CAACvD,gBAAD,EAAmBoD,oBAAnB,CAAtC;;EACA,IAAI,CAACjB,YAAY,CAAChD,MAAlB,EAA0B;IACxBgD,YAAY,GAAG,CAAC,OAAD,CAAf;EACD;;EAED,MAAMiD,2BAA2B,GAAG;IAClC,CAACpF,gBAAD,GAAoB;MAClBqD,IAAI,EAAE;QACJyB,EAAE,EAAE7H,MAAM,CAACsF,WAAP,CAAmBJ,YAAY,CAACK,GAAb,CAAiBzD,QAAQ,IAAI,CAACA,QAAD,EAAWoG,QAAX,CAA7B,CAAnB;MADA;IADY;EADc,CAApC;;EAQA,IAAIA,QAAQ,KAAK,OAAjB,EAA0B;IACxBC,2BAA2B,CAACpF,gBAAD,CAA3B,CAA8CF,YAAY,CAACE,gBAAD,CAA1D,IACE/C,MAAM,CAACsF,WAAP,CACE2C,SAAS,CAAC1C,GAAV,CAAc+B,QAAQ,IAAI,CACxBA,QADwB,EAExBtH,MAAM,CAACsF,WAAP,CAAmBJ,YAAY,CAACK,GAAb,CAAiBzD,QAAQ,IAAI,CAACA,QAAD,EAAW,SAAX,CAA7B,CAAnB,CAFwB,CAA1B,CADF,CADF;EAOD;;EAED,OAAOqG,2BAAP;AACD,CA/BM;AAiCP;AACA;AACA;;AACO,MAAMC,sBAAsB,GAAG,CACpCrF,gBADoC,EAEpCoD,oBAFoC,EAGpCyB,WAHoC,EAIpCN,QAJoC,KAKL;EAC/B,MAAMpC,YAAY,GAAGoB,mBAAmB,CAACvD,gBAAD,EAAmBoD,oBAAnB,CAAxC;EACA,MAAM+B,QAAQ,GAAGlI,MAAM,CAAC2E,MAAP,CAAciD,WAAd,EAA2B,CAA3B,CAAjB;EAEA,OAAO;IACL,CAAC7E,gBAAD,GAAoB;MAClB,CAACF,YAAY,CAACE,gBAAD,CAAb,GAAkC;QAChC,CAACuE,QAAD,GAAYtH,MAAM,CAACsF,WAAP,CACVJ,YAAY,CAACK,GAAb,CAAiBzD,QAAQ,IAAI,CAACA,QAAD,EAAWoG,QAAX,CAA7B,CADU;MADoB;IADhB;EADf,CAAP;AASD,CAlBM;AAoBP;AACA;AACA;;AACO,MAAMG,cAAc,GAAG,CAC5BtF,gBAD4B,EAE5BoD,oBAF4B,EAG5BnD,MAH4B,EAI5BhB,QAJ4B,KAQZ;EAChB,MAAMsG,aAAa,GAAGlH,4GAA2B,CAAC2B,gBAAD,CAAjD;EAEA,IAAItB,OAAO,GAAG6G,aAAa,CAAC7G,OAA5B;;EACA,IAAI8G,KAAK,CAACC,OAAN,CAAc/G,OAAd,CAAJ,EAA4B;IAC1BA,OAAO,GAAGA,OAAO,CAACgH,MAAR,CAAe,CACvB,CACE,SADF,EAEG,GAAE/I,gDAAC,CAAC,SAAD,CAAY,KAAI0E,eAAe,CACjC3C,OADiC,EAEjCiF,iBAAiB,CAAC3D,gBAAD,EAAmBoD,oBAAnB,CAFgB,CAGjC,GALJ,CADuB,CAAf,CAAV;EASD;;EAED,OAAOnG,MAAM,CAAC0I,MAAP,CAAc,EAAd,EAAkBJ,aAAlB,EAAiC;IACtC9G,KAAK,EAAE,gEAAC,+FAAD;MAAa,MAAM,EAAEwB,MAArB;MAA6B,gBAAgB,EAAED;IAA/C,EAD+B;IAEtC4F,OAAO,EAAEjE,IAAI,IAAI1C,QAAQ,CAAC0C,IAAD,EAAO1B,MAAM,CAACyE,EAAd,CAFa;IAGtCnG,IAAI,EAAE0B,MAAM,CAACyE,EAHyB;IAItChG,OAJsC;IAKtCmH,YAAY,EAAE,SALwB;IAMtClH,IAAI,EAAEmH;EANgC,CAAjC,CAAP;AAQD,CAhCM;AAkCP;AACA;AACA;;AACO,SAAS1H,uBAAT,CAAiC2H,KAAjC,EAAgF;EACrF,QAAQA,KAAR;IACE,KAAK,aAAL;MACE,OAAO,uFAAP;;IACF,KAAK,YAAL;MACE,OAAO,0FAAP;;IACF;MACE,OAAO,2HAAP;EANJ;AAQD","sources":["webpack:///./app/views/settings/account/notifications/constants.tsx","webpack:///./app/views/settings/account/notifications/fields2.tsx","webpack:///./app/views/settings/account/notifications/parentLabel.tsx","webpack:///./app/views/settings/account/notifications/utils.tsx"],"sourcesContent":["import {t} from 'sentry/locale';\n\nexport const ALL_PROVIDERS = {\n  email: 'default',\n  slack: 'never',\n  msteams: 'never',\n};\nexport const ALL_PROVIDER_NAMES = Object.keys(ALL_PROVIDERS);\n\n/**\n * These values are stolen from the DB.\n */\nexport const VALUE_MAPPING = {\n  default: 0,\n  never: 10,\n  always: 20,\n  subscribe_only: 30,\n  committed_only: 40,\n};\n\nexport const MIN_PROJECTS_FOR_CONFIRMATION = 3;\nexport const MIN_PROJECTS_FOR_SEARCH = 3;\nexport const MIN_PROJECTS_FOR_PAGINATION = 100;\n\nexport type NotificationSettingsByProviderObject = {[key: string]: string};\nexport type NotificationSettingsObject = {\n  [key: string]: {[key: string]: {[key: string]: NotificationSettingsByProviderObject}};\n};\n\nexport const NOTIFICATION_SETTINGS_TYPES = [\n  'alerts',\n  'activeRelease',\n  'workflow',\n  'deploy',\n  'approval',\n  'quota',\n  'reports',\n  'email',\n];\n\nexport const SELF_NOTIFICATION_SETTINGS_TYPES = [\n  'personalActivityNotifications',\n  'selfAssignOnResolve',\n];\n\nexport const CONFIRMATION_MESSAGE = (\n  <div>\n    <p style={{marginBottom: '20px'}}>\n      <strong>Are you sure you want to disable these notifications?</strong>\n    </p>\n    <p>\n      {t(\n        'Turning this off will irreversibly overwrite all of your fine-tuning settings to \"off\".'\n      )}\n    </p>\n  </div>\n);\n","import {Fragment} from 'react';\n\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport {Field} from 'sentry/components/forms/type';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport {getDocsLinkForEventType} from 'sentry/views/settings/account/notifications/utils';\n\nexport const NOTIFICATION_SETTING_FIELDS: Record<string, Field> = {\n  alerts: {\n    name: 'alerts',\n    type: 'select',\n    label: t('Issue Alerts'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Notifications sent from Alert rules that your team has set up.'),\n  },\n  activeRelease: {\n    name: 'activeRelease',\n    type: 'select',\n    label: (\n      <Fragment>\n        {t('Release Issues')} <FeatureBadge type=\"alpha\" />\n      </Fragment>\n    ),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Notifications sent for issues likely caused by your code changes.'),\n  },\n  workflow: {\n    name: 'workflow',\n    type: 'select',\n    label: t('Issue Workflow'),\n    choices: [\n      ['always', t('On')],\n      ['subscribe_only', t('Only Subscribed Issues')],\n      ['never', t('Off')],\n    ],\n    help: t('Changes in issue assignment, resolution status, and comments.'),\n  },\n  deploy: {\n    name: 'deploy',\n    type: 'select',\n    label: t('Deploys'),\n    choices: [\n      ['always', t('On')],\n      ['committed_only', t('Releases with My Commits')],\n      ['never', t('Off')],\n    ],\n    help: t('Release, environment, and commit overviews.'),\n  },\n  provider: {\n    name: 'provider',\n    type: 'select',\n    label: t('Delivery Method'),\n    choices: [\n      ['email', t('Email')],\n      ['slack', t('Slack')],\n      ['msteams', t('Microsoft Teams')],\n    ],\n    multiple: true,\n    onChange: val => {\n      // This is a little hack to prevent this field from being empty.\n      // TODO(nisanthan): need to prevent showing the clearable on. the multi-select when its only 1 value.\n      if (!val || val.length === 0) {\n        throw Error('Invalid selection. Field cannot be empty.');\n      }\n    },\n  },\n  approval: {\n    name: 'approval',\n    type: 'select',\n    label: t('Approvals'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Notifications from teammates that require review or approval.'),\n  },\n  quota: {\n    name: 'quota',\n    type: 'select',\n    label: t('Quota'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Error, transaction, and attachment quota limits.'),\n  },\n  reports: {\n    name: 'weekly reports',\n    type: 'blank',\n    label: t('Weekly Reports'),\n    help: t('A summary of the past week for an organization.'),\n  },\n  email: {\n    name: 'email routing',\n    type: 'blank',\n    label: t('Email Routing'),\n    help: t('Change the email address that receives notifications.'),\n  },\n  personalActivityNotifications: {\n    name: 'personalActivityNotifications',\n    type: 'select',\n    label: t('My Own Activity'),\n    choices: [\n      [true as any, t('On')],\n      [false as any, t('Off')],\n    ],\n    help: t('Notifications about your own actions on Sentry.'),\n  },\n  selfAssignOnResolve: {\n    name: 'selfAssignOnResolve',\n    type: 'select',\n    label: t('Claim Unassigned Issues I’ve Resolved'),\n    choices: [\n      [true as any, t('On')],\n      [false as any, t('Off')],\n    ],\n    help: t('You’ll receive notifications about any changes that happen afterwards.'),\n  },\n};\n\n// partial field definition for quota sub-categories\nexport const QUOTA_FIELDS = [\n  {\n    name: 'quotaWarnings',\n    label: t('Set Quota Limit'),\n    help: t(\n      'Receive notifications when your organization exceeeds the following limits.'\n    ),\n    choices: [\n      ['always', t('100% and 80%')],\n      ['never', t('100%')],\n    ] as const,\n  },\n  {\n    name: 'quotaErrors',\n    label: t('Errors'),\n    help: tct('Receive notifications about your error quotas. [learnMore:Learn more]', {\n      learnMore: <ExternalLink href={getDocsLinkForEventType('error')} />,\n    }),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ] as const,\n  },\n  {\n    name: 'quotaTransactions',\n    label: t('Transactions'),\n    help: tct(\n      'Receive notifications about your transaction quota. [learnMore:Learn more]',\n      {\n        learnMore: <ExternalLink href={getDocsLinkForEventType('transaction')} />,\n      }\n    ),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ] as const,\n  },\n  {\n    name: 'quotaAttachments',\n    label: t('Attachments'),\n    help: tct(\n      'Receive notifications about your attachment quota. [learnMore:Learn more]',\n      {\n        learnMore: <ExternalLink href={getDocsLinkForEventType('attachment')} />,\n      }\n    ),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ] as const,\n  },\n];\n","import styled from '@emotion/styled';\n\nimport Avatar from 'sentry/components/avatar';\nimport space from 'sentry/styles/space';\nimport {OrganizationSummary, Project} from 'sentry/types';\nimport {getParentKey} from 'sentry/views/settings/account/notifications/utils';\n\ntype Props = {\n  notificationType: string;\n  parent: OrganizationSummary | Project;\n};\n\n// TODO(mgaeta): Infer parentKey from parent.\nconst ParentLabel = ({notificationType, parent}: Props) => (\n  <FieldLabel>\n    <Avatar\n      {...{\n        [getParentKey(notificationType)]: parent,\n      }}\n    />\n    <span>{parent.slug}</span>\n  </FieldLabel>\n);\n\nconst FieldLabel = styled('div')`\n  display: flex;\n  gap: ${space(0.5)};\n  line-height: 16px;\n`;\n\nexport default ParentLabel;\n","import set from 'lodash/set';\n\nimport {FieldObject} from 'sentry/components/forms/type';\nimport {t} from 'sentry/locale';\nimport {OrganizationSummary, Project} from 'sentry/types';\nimport {\n  ALL_PROVIDERS,\n  MIN_PROJECTS_FOR_CONFIRMATION,\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n  VALUE_MAPPING,\n} from 'sentry/views/settings/account/notifications/constants';\nimport {NOTIFICATION_SETTING_FIELDS} from 'sentry/views/settings/account/notifications/fields2';\nimport ParentLabel from 'sentry/views/settings/account/notifications/parentLabel';\n\n/**\n * Which fine-tuning parts are grouped by project\n */\nexport const isGroupedByProject = (notificationType: string): boolean =>\n  ['alerts', 'email', 'workflow', 'activeRelease'].includes(notificationType);\n\nexport const getParentKey = (notificationType: string): string => {\n  return isGroupedByProject(notificationType) ? 'project' : 'organization';\n};\n\nexport const groupByOrganization = (\n  projects: Project[]\n): Record<string, {organization: OrganizationSummary; projects: Project[]}> => {\n  return projects.reduce<\n    Record<string, {organization: OrganizationSummary; projects: Project[]}>\n  >((acc, project) => {\n    const orgSlug = project.organization.slug;\n    if (acc.hasOwnProperty(orgSlug)) {\n      acc[orgSlug].projects.push(project);\n    } else {\n      acc[orgSlug] = {\n        organization: project.organization,\n        projects: [project],\n      };\n    }\n    return acc;\n  }, {});\n};\n\nexport const getFallBackValue = (notificationType: string): string => {\n  switch (notificationType) {\n    case 'alerts':\n      return 'always';\n    case 'deploy':\n      return 'committed_only';\n    case 'workflow':\n      return 'subscribe_only';\n    default:\n      return '';\n  }\n};\n\nexport const providerListToString = (providers: string[]): string => {\n  return providers.sort().join('+');\n};\n\nexport const getChoiceString = (choices: string[][], key: string): string => {\n  if (!choices) {\n    return 'default';\n  }\n  const found = choices.find(row => row[0] === key);\n  if (!found) {\n    throw new Error(`Could not find ${key}`);\n  }\n\n  return found[1];\n};\n\nconst isDataAllNever = (data: {[key: string]: string}): boolean =>\n  !!Object.keys(data).length && Object.values(data).every(value => value === 'never');\n\nconst getNonNeverValue = (data: {[key: string]: string}): string | null =>\n  Object.values(data).reduce(\n    (previousValue: string | null, currentValue) =>\n      currentValue === 'never' ? previousValue : currentValue,\n    null\n  );\n\n/**\n * Transform `data`, a mapping of providers to values, so that all providers in\n * `providerList` are \"on\" in the resulting object. The \"on\" value is\n * determined by checking `data` for non-\"never\" values and falling back to the\n * value `fallbackValue`. The \"off\" value is either \"default\" or \"never\"\n * depending on whether `scopeType` is \"parent\" or \"user\" respectively.\n */\nexport const backfillMissingProvidersWithFallback = (\n  data: {[key: string]: string},\n  providerList: string[],\n  fallbackValue: string,\n  scopeType: string\n): NotificationSettingsByProviderObject => {\n  // First pass: What was this scope's previous value?\n  let existingValue;\n  if (scopeType === 'user') {\n    existingValue = isDataAllNever(data)\n      ? fallbackValue\n      : getNonNeverValue(data) || fallbackValue;\n  } else {\n    existingValue = isDataAllNever(data) ? 'never' : getNonNeverValue(data) || 'default';\n  }\n\n  // Second pass: Fill in values for every provider.\n  return Object.fromEntries(\n    Object.keys(ALL_PROVIDERS).map(provider => [\n      provider,\n      providerList.includes(provider) ? existingValue : 'never',\n    ])\n  );\n};\n\n/**\n * Deeply merge N notification settings objects (usually just 2).\n */\nexport const mergeNotificationSettings = (\n  ...objects: NotificationSettingsObject[]\n): NotificationSettingsObject => {\n  const output: NotificationSettingsObject = {};\n\n  objects.forEach(settingsByType =>\n    Object.entries(settingsByType).forEach(([type, settingsByScopeType]) =>\n      Object.entries(settingsByScopeType).forEach(([scopeType, settingsByScopeId]) =>\n        Object.entries(settingsByScopeId).forEach(([scopeId, settingsByProvider]) => {\n          set(output, [type, scopeType, scopeId].join('.'), settingsByProvider);\n        })\n      )\n    )\n  );\n\n  return output;\n};\n\n/**\n * Get the mapping of providers to values that describe a user's parent-\n * independent notification preferences. The data from the API uses the user ID\n * rather than \"me\" so we assume the first ID is the user's.\n */\nexport const getUserDefaultValues = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): NotificationSettingsByProviderObject => {\n  return (\n    Object.values(notificationSettings[notificationType]?.user || {}).pop() ||\n    Object.fromEntries(\n      Object.entries(ALL_PROVIDERS).map(([provider, value]) => [\n        provider,\n        value === 'default' ? getFallBackValue(notificationType) : value,\n      ])\n    )\n  );\n};\n\n/**\n * Get the list of providers currently active on this page. Note: this can be empty.\n */\nexport const getCurrentProviders = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string[] => {\n  const userData = getUserDefaultValues(notificationType, notificationSettings);\n\n  return Object.entries(userData)\n    .filter(([_, value]) => !['never'].includes(value))\n    .map(([provider, _]) => provider);\n};\n\n/**\n * Calculate the currently selected provider.\n */\nexport const getCurrentDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string => {\n  const providersList = getCurrentProviders(notificationType, notificationSettings);\n  return providersList.length\n    ? getUserDefaultValues(notificationType, notificationSettings)[providersList[0]]\n    : 'never';\n};\n\n/**\n * For a given notificationType, are the parent-independent setting \"never\" for\n * all providers and are the parent-specific settings \"default\" or \"never\". If\n * so, the API is telling us that the user has opted out of all notifications.\n */\nexport const decideDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string => {\n  const compare = (a: string, b: string): number => VALUE_MAPPING[a] - VALUE_MAPPING[b];\n\n  const parentIndependentSetting =\n    Object.values(getUserDefaultValues(notificationType, notificationSettings))\n      .sort(compare)\n      .pop() || 'never';\n\n  if (parentIndependentSetting !== 'never') {\n    return parentIndependentSetting;\n  }\n\n  const parentSpecificSetting =\n    Object.values(\n      notificationSettings[notificationType]?.[getParentKey(notificationType)] || {}\n    )\n      .flatMap(settingsByProvider => Object.values(settingsByProvider))\n      .sort(compare)\n      .pop() || 'default';\n\n  return parentSpecificSetting === 'default' ? 'never' : parentSpecificSetting;\n};\n\n/**\n * For a given notificationType, are the parent-independent setting \"never\" for\n * all providers and are the parent-specific settings \"default\" or \"never\"? If\n * so, the API is telling us that the user has opted out of all notifications.\n */\nexport const isEverythingDisabled = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): boolean =>\n  ['never', 'default'].includes(decideDefault(notificationType, notificationSettings));\n\n/**\n * Extract either the list of project or organization IDs from the notification\n * settings in state. This assumes that the notification settings object is\n * fully backfilled with settings for every parent.\n */\nexport const getParentIds = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string[] =>\n  Object.keys(\n    notificationSettings[notificationType]?.[getParentKey(notificationType)] || {}\n  );\n\nexport const getParentValues = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parentId: string\n): NotificationSettingsByProviderObject =>\n  notificationSettings[notificationType]?.[getParentKey(notificationType)]?.[\n    parentId\n  ] || {\n    email: 'default',\n  };\n\n/**\n * Get a mapping of all parent IDs to the notification setting for the current\n * providers.\n */\nexport const getParentData = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parents: OrganizationSummary[] | Project[]\n): NotificationSettingsByProviderObject => {\n  const provider = getCurrentProviders(notificationType, notificationSettings)[0];\n\n  return Object.fromEntries(\n    parents.map(parent => [\n      parent.id,\n      getParentValues(notificationType, notificationSettings, parent.id)[provider],\n    ])\n  );\n};\n\n/**\n * Are there are more than N project or organization settings?\n */\nexport const isSufficientlyComplex = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): boolean =>\n  getParentIds(notificationType, notificationSettings).length >\n  MIN_PROJECTS_FOR_CONFIRMATION;\n\n/**\n * This is triggered when we change the Delivery Method select. Don't update the\n * provider for EVERY one of the user's projects and organizations, just the user\n * and parents that have explicit settings.\n */\nexport const getStateToPutForProvider = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject\n): NotificationSettingsObject => {\n  const providerList: string[] = changedData.provider\n    ? Object.values(changedData.provider)\n    : [];\n  const fallbackValue = getFallBackValue(notificationType);\n\n  // If the user has no settings, we need to create them.\n  if (!Object.keys(notificationSettings).length) {\n    return {\n      [notificationType]: {\n        user: {\n          me: Object.fromEntries(providerList.map(provider => [provider, fallbackValue])),\n        },\n      },\n    };\n  }\n\n  return {\n    [notificationType]: Object.fromEntries(\n      Object.entries(notificationSettings[notificationType]).map(\n        ([scopeType, scopeTypeData]) => [\n          scopeType,\n          Object.fromEntries(\n            Object.entries(scopeTypeData).map(([scopeId, scopeIdData]) => [\n              scopeId,\n              backfillMissingProvidersWithFallback(\n                scopeIdData,\n                providerList,\n                fallbackValue,\n                scopeType\n              ),\n            ])\n          ),\n        ]\n      )\n    ),\n  };\n};\n\n/**\n * Update the current providers' parent-independent notification settings with\n * the new value. If the new value is \"never\", then also update all\n * parent-specific notification settings to \"default\". If the previous value\n * was \"never\", then assume providerList should be \"email\" only.\n */\nexport const getStateToPutForDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject,\n  parentIds: string[]\n): NotificationSettingsObject => {\n  const newValue = Object.values(changedData)[0];\n  let providerList = getCurrentProviders(notificationType, notificationSettings);\n  if (!providerList.length) {\n    providerList = ['email'];\n  }\n\n  const updatedNotificationSettings = {\n    [notificationType]: {\n      user: {\n        me: Object.fromEntries(providerList.map(provider => [provider, newValue])),\n      },\n    },\n  };\n\n  if (newValue === 'never') {\n    updatedNotificationSettings[notificationType][getParentKey(notificationType)] =\n      Object.fromEntries(\n        parentIds.map(parentId => [\n          parentId,\n          Object.fromEntries(providerList.map(provider => [provider, 'default'])),\n        ])\n      );\n  }\n\n  return updatedNotificationSettings;\n};\n\n/**\n * Get the diff of the Notification Settings for this parent ID.\n */\nexport const getStateToPutForParent = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject,\n  parentId: string\n): NotificationSettingsObject => {\n  const providerList = getCurrentProviders(notificationType, notificationSettings);\n  const newValue = Object.values(changedData)[0];\n\n  return {\n    [notificationType]: {\n      [getParentKey(notificationType)]: {\n        [parentId]: Object.fromEntries(\n          providerList.map(provider => [provider, newValue])\n        ),\n      },\n    },\n  };\n};\n\n/**\n * Render each parent and add a default option to the the field choices.\n */\nexport const getParentField = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parent: OrganizationSummary | Project,\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject\n): FieldObject => {\n  const defaultFields = NOTIFICATION_SETTING_FIELDS[notificationType];\n\n  let choices = defaultFields.choices;\n  if (Array.isArray(choices)) {\n    choices = choices.concat([\n      [\n        'default',\n        `${t('Default')} (${getChoiceString(\n          choices,\n          getCurrentDefault(notificationType, notificationSettings)\n        )})`,\n      ],\n    ]);\n  }\n\n  return Object.assign({}, defaultFields, {\n    label: <ParentLabel parent={parent} notificationType={notificationType} />,\n    getData: data => onChange(data, parent.id),\n    name: parent.id,\n    choices,\n    defaultValue: 'default',\n    help: undefined,\n  }) as any;\n};\n\n/**\n * Returns a link to docs on explaining how to manage quotas for that event type\n */\nexport function getDocsLinkForEventType(event: 'error' | 'transaction' | 'attachment') {\n  switch (event) {\n    case 'transaction':\n      return 'https://docs.sentry.io/product/performance/transaction-summary/#what-is-a-transaction';\n    case 'attachment':\n      return 'https://docs.sentry.io/product/accounts/quotas/manage-attachments-quota/#2-rate-limiting';\n    default:\n      return 'https://docs.sentry.io/product/accounts/quotas/manage-event-stream-guide/#common-workflows-for-managing-your-event-stream';\n  }\n}\n"],"names":["t","ALL_PROVIDERS","email","slack","msteams","ALL_PROVIDER_NAMES","Object","keys","VALUE_MAPPING","default","never","always","subscribe_only","committed_only","MIN_PROJECTS_FOR_CONFIRMATION","MIN_PROJECTS_FOR_SEARCH","MIN_PROJECTS_FOR_PAGINATION","NOTIFICATION_SETTINGS_TYPES","SELF_NOTIFICATION_SETTINGS_TYPES","CONFIRMATION_MESSAGE","marginBottom","Fragment","FeatureBadge","ExternalLink","tct","getDocsLinkForEventType","NOTIFICATION_SETTING_FIELDS","alerts","name","type","label","choices","help","activeRelease","workflow","deploy","provider","multiple","onChange","val","length","Error","approval","quota","reports","personalActivityNotifications","selfAssignOnResolve","QUOTA_FIELDS","learnMore","Avatar","space","getParentKey","ParentLabel","notificationType","parent","slug","FieldLabel","set","isGroupedByProject","includes","groupByOrganization","projects","reduce","acc","project","orgSlug","organization","hasOwnProperty","push","getFallBackValue","providerListToString","providers","sort","join","getChoiceString","key","found","find","row","isDataAllNever","data","values","every","value","getNonNeverValue","previousValue","currentValue","backfillMissingProvidersWithFallback","providerList","fallbackValue","scopeType","existingValue","fromEntries","map","mergeNotificationSettings","output","objects","forEach","settingsByType","entries","settingsByScopeType","settingsByScopeId","scopeId","settingsByProvider","getUserDefaultValues","notificationSettings","user","pop","getCurrentProviders","userData","filter","_","getCurrentDefault","providersList","decideDefault","compare","a","b","parentIndependentSetting","parentSpecificSetting","flatMap","isEverythingDisabled","getParentIds","getParentValues","parentId","getParentData","parents","id","isSufficientlyComplex","getStateToPutForProvider","changedData","me","scopeTypeData","scopeIdData","getStateToPutForDefault","parentIds","newValue","updatedNotificationSettings","getStateToPutForParent","getParentField","defaultFields","Array","isArray","concat","assign","getData","defaultValue","undefined","event"],"sourceRoot":""}