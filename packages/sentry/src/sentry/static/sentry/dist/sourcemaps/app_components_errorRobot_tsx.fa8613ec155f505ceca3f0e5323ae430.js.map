{"version":3,"file":"chunks/app_components_errorRobot_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/errorRobot.tsx","webpack:///./app/views/onboarding/createSampleEventButton.tsx"],"sourcesContent":["import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport robotBackground from 'sentry-images/spot/sentry-robot.png';\n\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport withApi from 'sentry/utils/withApi';\nimport CreateSampleEventButton from 'sentry/views/onboarding/createSampleEventButton';\n\ntype Props = {\n  api: Client;\n  gradient: boolean;\n  org: Organization;\n  project?: Project;\n  /**\n   * sampleIssueId can have 3 values:\n   * - empty string to indicate it doesn't exist (render \"create sample event\")\n   * - non-empty string to indicate it exists (render \"see sample event\")\n   * - undefined to indicate the project API should be consulted to find out\n   */\n  sampleIssueId?: string;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  sampleIssueId?: string;\n};\n\nclass ErrorRobot extends Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: false,\n    sampleIssueId: this.props.sampleIssueId,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  async fetchData() {\n    const {org, project} = this.props;\n    const {sampleIssueId} = this.state;\n\n    if (!project) {\n      return;\n    }\n\n    if (defined(sampleIssueId)) {\n      return;\n    }\n\n    const url = `/projects/${org.slug}/${project.slug}/issues/`;\n\n    this.setState({loading: true});\n\n    try {\n      const data = await this.props.api.requestPromise(url, {\n        method: 'GET',\n        data: {limit: 1},\n      });\n      this.setState({sampleIssueId: (data.length > 0 && data[0].id) || ''});\n    } catch (err) {\n      const error = err?.responseJSON?.detail ?? true;\n      this.setState({error});\n    }\n\n    this.setState({loading: false});\n  }\n\n  render() {\n    const {loading, error, sampleIssueId} = this.state;\n    const {org, project, gradient} = this.props;\n\n    const sampleLink =\n      project && (loading || error ? null : sampleIssueId) ? (\n        <p>\n          <Link to={`/${org.slug}/${project.slug}/issues/${sampleIssueId}/?sample`}>\n            {t('Or see your sample event')}\n          </Link>\n        </p>\n      ) : (\n        <p>\n          <CreateSampleEventButton\n            priority=\"link\"\n            project={project}\n            source=\"issues_list\"\n            disabled={!project}\n            title={!project ? t('Select a project to create a sample event') : undefined}\n          >\n            {t('Create a sample event')}\n          </CreateSampleEventButton>\n        </p>\n      );\n\n    return (\n      <ErrorRobotWrapper\n        data-test-id=\"awaiting-events\"\n        className=\"awaiting-events\"\n        gradient={gradient}\n      >\n        <Robot aria-hidden>\n          <Eye />\n        </Robot>\n        <MessageContainer>\n          <h3>{t('Waiting for eventsâ€¦')}</h3>\n          <p>\n            {tct(\n              'Our error robot is waiting to [strike:devour] receive your first event.',\n              {\n                strike: <Strikethrough />,\n              }\n            )}\n          </p>\n          <p>\n            {project && (\n              <Button\n                data-test-id=\"install-instructions\"\n                priority=\"primary\"\n                to={`/${org.slug}/${project.slug}/getting-started/${\n                  project.platform || ''\n                }`}\n              >\n                {t('Installation Instructions')}\n              </Button>\n            )}\n          </p>\n          {sampleLink}\n        </MessageContainer>\n      </ErrorRobotWrapper>\n    );\n  }\n}\n\nexport {ErrorRobot};\n\nexport default withApi(ErrorRobot);\n\nconst ErrorRobotWrapper = styled('div')<{gradient: boolean}>`\n  display: flex;\n  justify-content: center;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.08);\n  border-radius: 0 0 3px 3px;\n  padding: 40px ${space(3)} ${space(3)};\n  min-height: 260px;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    flex-direction: column;\n    align-items: center;\n    padding: ${space(3)};\n    text-align: center;\n  }\n`;\n\nconst Robot = styled('div')`\n  display: block;\n  position: relative;\n  width: 220px;\n  height: 260px;\n  background: url(${robotBackground});\n  background-size: cover;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: 110px;\n    height: 130px;\n  }\n`;\n\nconst Eye = styled('span')`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  position: absolute;\n  top: 70px;\n  left: 81px;\n  transform: translateZ(0);\n  animation: blink-eye 0.6s infinite;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: 6px;\n    height: 6px;\n    top: 35px;\n    left: 41px;\n  }\n\n  @keyframes blink-eye {\n    0% {\n      background: #e03e2f;\n      box-shadow: 0 0 10px #e03e2f;\n    }\n\n    50% {\n      background: #4a4d67;\n      box-shadow: none;\n    }\n\n    100% {\n      background: #e03e2f;\n      box-shadow: 0 0 10px #e03e2f;\n    }\n  }\n`;\n\nconst MessageContainer = styled('div')`\n  align-self: center;\n  max-width: 480px;\n  margin-left: 40px;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    margin: 0;\n  }\n`;\n\nconst Strikethrough = styled('span')`\n  text-decoration: line-through;\n`;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype CreateSampleEventButtonProps = {\n  api: Client;\n  organization: Organization;\n  source: string;\n  project?: Project;\n} & ButtonProps;\n\ntype State = {\n  creating: boolean;\n};\n\nconst EVENT_POLL_RETRIES = 30;\nconst EVENT_POLL_INTERVAL = 1000;\n\nasync function latestEventAvailable(\n  api: Client,\n  groupID: string\n): Promise<{eventCreated: boolean; retries: number}> {\n  let retries = 0;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (retries > EVENT_POLL_RETRIES) {\n      return {eventCreated: false, retries: retries - 1};\n    }\n\n    await new Promise(resolve => window.setTimeout(resolve, EVENT_POLL_INTERVAL));\n\n    try {\n      await api.requestPromise(`/issues/${groupID}/events/latest/`);\n      return {eventCreated: true, retries};\n    } catch {\n      ++retries;\n    }\n  }\n}\n\nclass CreateSampleEventButton extends Component<CreateSampleEventButtonProps, State> {\n  state: State = {\n    creating: false,\n  };\n\n  componentDidMount() {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('sample_event.button_viewed', {\n      organization,\n      project_id: project.id,\n      source,\n    });\n  }\n\n  recordAnalytics({eventCreated, retries, duration}) {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    const eventKey = `sample_event.${eventCreated ? 'created' : 'failed'}` as const;\n\n    trackAdvancedAnalyticsEvent(eventKey, {\n      organization,\n      project_id: project.id,\n      platform: project.platform || '',\n      interval: EVENT_POLL_INTERVAL,\n      retries,\n      duration,\n      source,\n    });\n  }\n\n  createSampleGroup = async () => {\n    // TODO(dena): swap out for action creator\n    const {api, organization, project} = this.props;\n    let eventData;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('growth.onboarding_view_sample_event', {\n      platform: project.platform,\n      organization,\n    });\n\n    addLoadingMessage(t('Processing sample event...'), {\n      duration: EVENT_POLL_RETRIES * EVENT_POLL_INTERVAL,\n    });\n    this.setState({creating: true});\n\n    try {\n      const url = `/projects/${organization.slug}/${project.slug}/create-sample/`;\n      eventData = await api.requestPromise(url, {method: 'POST'});\n    } catch (error) {\n      Sentry.withScope(scope => {\n        scope.setExtra('error', error);\n        Sentry.captureException(new Error('Failed to create sample event'));\n      });\n      this.setState({creating: false});\n      clearIndicators();\n      addErrorMessage(t('Failed to create a new sample event'));\n      return;\n    }\n\n    // Wait for the event to be fully processed and available on the group\n    // before redirecting.\n    const t0 = performance.now();\n    const {eventCreated, retries} = await latestEventAvailable(api, eventData.groupID);\n    const t1 = performance.now();\n\n    clearIndicators();\n    this.setState({creating: false});\n\n    const duration = Math.ceil(t1 - t0);\n    this.recordAnalytics({eventCreated, retries, duration});\n\n    if (!eventCreated) {\n      addErrorMessage(t('Failed to load sample event'));\n\n      Sentry.withScope(scope => {\n        scope.setTag('groupID', eventData.groupID);\n        scope.setTag('platform', project.platform || '');\n        scope.setTag('interval', EVENT_POLL_INTERVAL.toString());\n        scope.setTag('retries', retries.toString());\n        scope.setTag('duration', duration.toString());\n\n        scope.setLevel('warning');\n        Sentry.captureMessage('Failed to load sample event');\n      });\n      return;\n    }\n\n    browserHistory.push(\n      `/organizations/${organization.slug}/issues/${eventData.groupID}/?project=${project.id}`\n    );\n  };\n\n  render() {\n    const {\n      api: _api,\n      organization: _organization,\n      project: _project,\n      source: _source,\n      ...props\n    } = this.props;\n    const {creating} = this.state;\n\n    return (\n      <Button\n        {...props}\n        disabled={props.disabled || creating}\n        onClick={this.createSampleGroup}\n      />\n    );\n  }\n}\n\nexport default withApi(withOrganization(CreateSampleEventButton));\n"],"names":["Component","robotBackground","Button","Link","t","tct","space","defined","withApi","CreateSampleEventButton","ErrorRobot","error","loading","sampleIssueId","props","componentDidMount","fetchData","org","project","state","url","slug","setState","data","api","requestPromise","method","limit","length","id","err","responseJSON","detail","render","gradient","sampleLink","undefined","strike","platform","ErrorRobotWrapper","p","theme","fontSizeExtraLarge","breakpoints","small","Robot","Eye","MessageContainer","Strikethrough","browserHistory","Sentry","addErrorMessage","addLoadingMessage","clearIndicators","trackAdvancedAnalyticsEvent","withOrganization","EVENT_POLL_RETRIES","EVENT_POLL_INTERVAL","latestEventAvailable","groupID","retries","eventCreated","Promise","resolve","window","setTimeout","creating","organization","eventData","duration","withScope","scope","setExtra","captureException","Error","t0","performance","now","t1","Math","ceil","recordAnalytics","setTag","toString","setLevel","captureMessage","push","source","project_id","eventKey","interval","_api","_organization","_project","_source","disabled","createSampleGroup"],"sourceRoot":""}