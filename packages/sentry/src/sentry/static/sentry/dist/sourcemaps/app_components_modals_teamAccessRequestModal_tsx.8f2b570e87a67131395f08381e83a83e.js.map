{"version":3,"file":"chunks/app_components_modals_teamAccessRequestModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/teamAccessRequestModal.tsx","webpack:///./app/utils/useApi.tsx","webpack:///./app/utils/withApi.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {\n  ModalRenderProps,\n  TeamAccessRequestModalOptions,\n} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = ModalRenderProps &\n  TeamAccessRequestModalOptions & {\n    api: Client;\n    memberId: string;\n    orgId: string;\n    teamId: string;\n  };\n\ntype State = {\n  createBusy: boolean;\n};\n\nclass CreateTeamAccessRequest extends Component<Props, State> {\n  state: State = {\n    createBusy: false,\n  };\n\n  handleClick = async () => {\n    const {api, memberId, orgId, teamId, closeModal} = this.props;\n\n    this.setState({createBusy: true});\n\n    try {\n      await api.requestPromise(\n        `/organizations/${orgId}/members/${memberId}/teams/${teamId}/`,\n        {\n          method: 'POST',\n        }\n      );\n      addSuccessMessage(t('Team request sent for approval'));\n    } catch (err) {\n      addErrorMessage(t('Unable to send team request'));\n    }\n    this.setState({createBusy: false});\n    closeModal();\n  };\n\n  render() {\n    const {Body, Footer, closeModal, teamId} = this.props;\n\n    return (\n      <Fragment>\n        <Body>\n          {tct(\n            'You do not have permission to add members to the #[team] team, but we will send a request to your organization admins for approval.',\n            {team: teamId}\n          )}\n        </Body>\n        <Footer>\n          <ButtonGroup>\n            <Button onClick={closeModal}>{t('Cancel')}</Button>\n            <Button\n              priority=\"primary\"\n              onClick={this.handleClick}\n              busy={this.state.createBusy}\n              autoFocus\n            >\n              {t('Continue')}\n            </Button>\n          </ButtonGroup>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n\nconst ButtonGroup = styled('div')`\n  display: grid;\n  grid-template-columns: max-content max-content;\n  gap: ${space(1)};\n`;\n\nexport default withApi(CreateTeamAccessRequest);\n","import {useCallback, useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\n\ntype Options = {\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  // Clear API calls on unmount (if persistInFlight is disabled\n  const clearOnUnmount = useCallback(() => {\n    if (!persistInFlight) {\n      api.clear();\n    }\n  }, [api, persistInFlight]);\n\n  useEffect(() => clearOnUnmount, [clearOnUnmount]);\n\n  return api;\n}\n\nexport default useApi;\n","import {Client} from 'sentry/api';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport useApi from 'sentry/utils/useApi';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\n/**\n * XXX: Prefer useApi if you are wrapping a Function Component!\n *\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n *\n * If an `api` prop is provided when the component is invoked it will be passed\n * through.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  options: Parameters<typeof useApi>[0] = {}\n) => {\n  const WithApi: React.FC<WrappedProps<P>> = ({api: propsApi, ...props}) => {\n    const api = useApi({api: propsApi, ...options});\n\n    return <WrappedComponent {...(props as P)} api={api} />;\n  };\n\n  WithApi.displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n  return WithApi;\n};\n\nexport default withApi;\n"],"names":["Component","Fragment","addErrorMessage","addSuccessMessage","Button","t","tct","space","withApi","CreateTeamAccessRequest","createBusy","api","memberId","orgId","teamId","closeModal","props","setState","requestPromise","method","err","render","Body","Footer","team","handleClick","state","ButtonGroup","useCallback","useEffect","useRef","Client","useApi","persistInFlight","providedApi","localApi","current","undefined","clearOnUnmount","clear","getDisplayName","WrappedComponent","options","WithApi","propsApi","displayName"],"sourceRoot":""}