{"version":3,"file":"chunks/app_components_modals_widgetBuilder_overwriteWidgetModal_tsx-app_views_dashboardsV2_types_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;;;AAWA,MAAMO,iBAAiB,GAAGH,gDAAC,CACzB,qJADyB,CAA3B;;AAIA,SAASI,oBAAT,OAQU;EAAA,IARoB;IAC5BC,MAD4B;IAE5BC,IAF4B;IAG5BC,MAH4B;IAI5BC,UAJ4B;IAK5BC,SAL4B;IAM5BC,MAN4B;IAO5BC;EAP4B,CAQpB;;EACR,SAASC,aAAT,GAAyB;IACvBH,SAAS;IACTD,UAAU;EACX;;EAED,OACE,iEAAC,2CAAD;IAAA,WACE,gEAAC,MAAD;MAAQ,WAAW,MAAnB;MAAA,UACE;QAAA,UAAKR,gDAAC,CAAC,kBAAD;MAAN;IADF,EADF,EAIE,iEAAC,IAAD;MAAA,WACGG,iBADH,EAEE,gEAAC,WAAD;QAAA,UACE,gEAAC,4FAAD;UAAM,MAAM,EAAEO,MAAd;UAAsB,SAAS,EAAEC;QAAjC;MADF,EAFF;IAAA,EAJF,EAUE,gEAAC,MAAD;MAAA,UACE,iEAAC,mEAAD;QAAW,GAAG,EAAE,GAAhB;QAAA,WACE,gEAAC,gEAAD;UAAQ,OAAO,EAAEH,UAAjB;UAAA,UAA8BR,gDAAC,CAAC,QAAD;QAA/B,EADF,EAEE,gEAAC,gEAAD;UAAQ,QAAQ,EAAC,SAAjB;UAA2B,OAAO,EAAEY,aAApC;UAAA,UACGZ,gDAAC,CAAC,SAAD;QADJ,EAFF;MAAA;IADF,EAVF;EAAA,EADF;AAqBD;;AAnCQI;AAqCT,iEAAeA,oBAAf;AAEO,MAAMS,QAAQ,GAAG;EAAH;EAAA;AAAA,KAAd;;AAMP,MAAMC,WAAW,GAAG,8EAAO,KAAP;EAAA;AAAA,MAAH,aACJb,+DAAK,CAAC,CAAD,CADD,2BAAjB;;;;;;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACO,MAAMc,WAAW,GAAG,EAApB;AAEA,MAAMC,mBAAmB,GAAG,CAA5B;AAEA,IAAKC,WAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,gBAAAA;;AAUL,IAAKC,UAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;GAAAA,eAAAA;;AAwDL,IAAKC,mBAAZ;;WAAYA;EAAAA;GAAAA,wBAAAA;;AA0BL,IAAKC,cAAZ,EAQA;;WARYA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,mBAAAA;;AASL,IAAKC,qBAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,0BAAAA","sources":["webpack:///./app/components/modals/widgetBuilder/overwriteWidgetModal.tsx","webpack:///./app/views/dashboardsV2/types.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Card} from 'sentry/views/dashboardsV2/widgetBuilder/widgetLibrary/card';\nimport {WidgetTemplate} from 'sentry/views/dashboardsV2/widgetLibrary/data';\n\nexport type OverwriteWidgetModalProps = {\n  iconColor: string;\n  onConfirm: () => void;\n  widget: WidgetTemplate;\n};\n\ntype Props = ModalRenderProps & OverwriteWidgetModalProps;\n\nconst MODAL_DESCRIPTION = t(\n  \"You've already started building this widget and will lose unsaved changes. Are you sure you want to overwrite this widget with the template values?\"\n);\n\nfunction OverwriteWidgetModal({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  onConfirm,\n  widget,\n  iconColor,\n}: Props) {\n  function handleConfirm() {\n    onConfirm();\n    closeModal();\n  }\n\n  return (\n    <Fragment>\n      <Header closeButton>\n        <h4>{t('Overwrite Widget')}</h4>\n      </Header>\n      <Body>\n        {MODAL_DESCRIPTION}\n        <CardWrapper>\n          <Card widget={widget} iconColor={iconColor} />\n        </CardWrapper>\n      </Body>\n      <Footer>\n        <ButtonBar gap={1.5}>\n          <Button onClick={closeModal}>{t('Cancel')}</Button>\n          <Button priority=\"primary\" onClick={handleConfirm}>\n            {t('Confirm')}\n          </Button>\n        </ButtonBar>\n      </Footer>\n    </Fragment>\n  );\n}\n\nexport default OverwriteWidgetModal;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 700px;\n  margin: 70px auto;\n`;\n\nconst CardWrapper = styled('div')`\n  padding: ${space(3)} 0;\n`;\n","import {Layout} from 'react-grid-layout';\n\nimport {User} from 'sentry/types';\n\n// Max widgets per dashboard we are currently willing\n// to allow to limit the load on snuba from the\n// parallel requests. Somewhat arbitrary\n// limit that can be changed if necessary.\nexport const MAX_WIDGETS = 30;\n\nexport const DEFAULT_TABLE_LIMIT = 5;\n\nexport enum DisplayType {\n  AREA = 'area',\n  BAR = 'bar',\n  LINE = 'line',\n  TABLE = 'table',\n  WORLD_MAP = 'world_map',\n  BIG_NUMBER = 'big_number',\n  TOP_N = 'top_n',\n}\n\nexport enum WidgetType {\n  DISCOVER = 'discover',\n  ISSUE = 'issue',\n  RELEASE = 'metrics', // TODO(dashboards): Rename this on backend and then change here\n}\n\nexport type WidgetQuery = {\n  aggregates: string[];\n  columns: string[];\n  conditions: string;\n  name: string;\n  orderby: string;\n  // Table column alias.\n  // We may want to have alias for y-axis in the future too\n  fieldAliases?: string[];\n  // Fields is replaced with aggregates + columns. It\n  // is currently used to track column order on table\n  // widgets.\n  fields?: string[];\n};\n\nexport type Widget = {\n  displayType: DisplayType;\n  interval: string;\n  queries: WidgetQuery[];\n  title: string;\n  id?: string;\n  layout?: WidgetLayout | null;\n  // Used to define 'topEvents' when fetching time-series data for a widget\n  limit?: number;\n  tempId?: string;\n  widgetType?: WidgetType;\n};\n\n// We store an explicit set of keys in the backend now\nexport type WidgetLayout = Pick<Layout, 'h' | 'w' | 'x' | 'y'> & {\n  minH: number;\n};\n\nexport type WidgetPreview = {\n  displayType: DisplayType;\n  layout: WidgetLayout | null;\n};\n\n/**\n * The response shape from dashboard list endpoint\n */\nexport type DashboardListItem = {\n  id: string;\n  title: string;\n  widgetDisplay: DisplayType[];\n  widgetPreview: WidgetPreview[];\n  createdBy?: User;\n  dateCreated?: string;\n};\n\nexport enum DashboardFilterKeys {\n  RELEASE = 'release',\n}\n\nexport type DashboardFilters = {\n  [DashboardFilterKeys.RELEASE]?: string[];\n};\n\n/**\n * Saved dashboard with widgets\n */\nexport type DashboardDetails = {\n  dateCreated: string;\n  filters: DashboardFilters;\n  id: string;\n  projects: number[];\n  title: string;\n  widgets: Widget[];\n  createdBy?: User;\n  end?: string;\n  environment?: string[];\n  period?: string;\n  start?: string;\n  utc?: boolean;\n};\n\nexport enum DashboardState {\n  VIEW = 'view',\n  EDIT = 'edit',\n  CREATE = 'create',\n  PENDING_DELETE = 'pending_delete',\n  PREVIEW = 'preview',\n}\n\n// where we launch the dashboard widget from\nexport enum DashboardWidgetSource {\n  DISCOVERV2 = 'discoverv2',\n  DASHBOARDS = 'dashboards',\n  LIBRARY = 'library',\n  ISSUE_DETAILS = 'issueDetail',\n}\n"],"names":["Fragment","css","Button","ButtonBar","t","space","Card","MODAL_DESCRIPTION","OverwriteWidgetModal","Header","Body","Footer","closeModal","onConfirm","widget","iconColor","handleConfirm","modalCss","CardWrapper","MAX_WIDGETS","DEFAULT_TABLE_LIMIT","DisplayType","WidgetType","DashboardFilterKeys","DashboardState","DashboardWidgetSource"],"sourceRoot":""}