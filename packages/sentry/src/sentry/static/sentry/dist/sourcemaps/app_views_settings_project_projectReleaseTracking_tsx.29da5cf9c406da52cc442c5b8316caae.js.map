{"version":3,"file":"chunks/app_views_settings_project_projectReleaseTracking_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectReleaseTracking.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import {Component} from 'react';\n\nimport {fetchPlugins} from 'sentry/actionCreators/plugins';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  loading: boolean;\n  plugins: Plugin[];\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends Component<Omit<P, keyof 'plugins'> & WithPluginProps, State> {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport Alert from 'sentry/components/alert';\nimport AutoSelectText from 'sentry/components/autoSelectText';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport Field from 'sentry/components/forms/field';\nimport TextCopyInput from 'sentry/components/forms/textCopyInput';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport PluginList from 'sentry/components/pluginList';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withPlugins from 'sentry/utils/withPlugins';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nconst TOKEN_PLACEHOLDER = 'YOUR_TOKEN';\nconst WEBHOOK_PLACEHOLDER = 'YOUR_WEBHOOK_URL';\n\ntype Props = {\n  organization: Organization;\n  plugins: {loading: boolean; plugins: Plugin[]};\n  project: Project;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  data: {\n    token: string;\n    webhookUrl: string;\n  } | null;\n} & AsyncView['state'];\n\nconst placeholderData = {\n  token: TOKEN_PLACEHOLDER,\n  webhookUrl: WEBHOOK_PLACEHOLDER,\n};\n\nclass ProjectReleaseTracking extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Releases'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n\n    // Allow 403s\n    return [\n      [\n        'data',\n        `/projects/${orgId}/${projectId}/releases/token/`,\n        {},\n        {allowError: err => err && err.status === 403},\n      ],\n    ];\n  }\n\n  handleRegenerateToken = () => {\n    const {orgId, projectId} = this.props.params;\n    this.api.request(`/projects/${orgId}/${projectId}/releases/token/`, {\n      method: 'POST',\n      data: {project: projectId},\n      success: data => {\n        this.setState({\n          data: {\n            token: data.token,\n            webhookUrl: data.webhookUrl,\n          },\n        });\n        addSuccessMessage(\n          t(\n            'Your deploy token has been regenerated. You will need to update any existing deploy hooks.'\n          )\n        );\n      },\n      error: () => {\n        addErrorMessage(t('Unable to regenerate deploy token, please try again'));\n      },\n    });\n  };\n\n  getReleaseWebhookIntructions() {\n    const {webhookUrl} = this.state.data || placeholderData;\n    return (\n      'curl ' +\n      webhookUrl +\n      ' \\\\' +\n      '\\n  ' +\n      '-X POST \\\\' +\n      '\\n  ' +\n      \"-H 'Content-Type: application/json' \\\\\" +\n      '\\n  ' +\n      '-d \\'{\"version\": \"abcdefg\"}\\''\n    );\n  }\n\n  renderBody() {\n    const {organization, project, plugins} = this.props;\n    const hasWrite = organization.access.includes('project:write');\n\n    if (plugins.loading) {\n      return <LoadingIndicator />;\n    }\n\n    const pluginList = plugins.plugins.filter(\n      (p: Plugin) => p.type === 'release-tracking' && p.hasConfiguration\n    );\n\n    let {token, webhookUrl} = this.state.data || placeholderData;\n\n    token = getDynamicText({value: token, fixed: '__TOKEN__'});\n    webhookUrl = getDynamicText({value: webhookUrl, fixed: '__WEBHOOK_URL__'});\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Release Tracking')} />\n        {!hasWrite && (\n          <Alert type=\"warning\">\n            {t(\n              'You do not have sufficient permissions to access Release tokens, placeholders are displayed below.'\n            )}\n          </Alert>\n        )}\n        <p>\n          {t(\n            'Configure release tracking for this project to automatically record new releases of your application.'\n          )}\n        </p>\n\n        <Panel>\n          <PanelHeader>{t('Client Configuration')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {tct(\n                'Start by binding the [release] attribute in your application, take a look at [link] to see how to configure this for the SDK you are using.',\n                {\n                  link: (\n                    <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=/configuration/releases/\">\n                      our docs\n                    </ExternalLink>\n                  ),\n                  release: <code>release</code>,\n                }\n              )}\n            </p>\n            <p>\n              {t(\n                \"This will annotate each event with the version of your application, as well as automatically create a release entity in the system the first time it's seen.\"\n              )}\n            </p>\n            <p>\n              {t(\n                'In addition you may configure a release hook (or use our API) to push a release and include additional metadata with it.'\n              )}\n            </p>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Deploy Token')}</PanelHeader>\n          <PanelBody>\n            <Field\n              label={t('Token')}\n              help={t('A unique secret which is used to generate deploy hook URLs')}\n            >\n              <TextCopyInput>{token}</TextCopyInput>\n            </Field>\n            <Field\n              label={t('Regenerate Token')}\n              help={t(\n                'If a service becomes compromised, you should regenerate the token and re-configure any deploy hooks with the newly generated URL.'\n              )}\n            >\n              <div>\n                <Confirm\n                  disabled={!hasWrite}\n                  priority=\"danger\"\n                  onConfirm={this.handleRegenerateToken}\n                  message={t(\n                    'Are you sure you want to regenerate your token? Your current token will no longer be usable.'\n                  )}\n                >\n                  <Button type=\"button\" priority=\"danger\" disabled={!hasWrite}>\n                    {t('Regenerate Token')}\n                  </Button>\n                </Confirm>\n              </div>\n            </Field>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Webhook')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {t(\n                'If you simply want to integrate with an existing system, sometimes its easiest just to use a webhook.'\n              )}\n            </p>\n\n            <AutoSelectText>\n              <pre>{webhookUrl}</pre>\n            </AutoSelectText>\n\n            <p>\n              {t(\n                'The release webhook accepts the same parameters as the \"Create a new Release\" API endpoint.'\n              )}\n            </p>\n\n            {getDynamicText({\n              value: (\n                <AutoSelectText>\n                  <pre>{this.getReleaseWebhookIntructions()}</pre>\n                </AutoSelectText>\n              ),\n              fixed: (\n                <pre>\n                  {`curl __WEBHOOK_URL__ \\\\\n  -X POST \\\\\n  -H 'Content-Type: application/json' \\\\\n  -d \\'{\"version\": \"abcdefg\"}\\'`}\n                </pre>\n              ),\n            })}\n          </PanelBody>\n        </Panel>\n\n        <PluginList\n          organization={organization}\n          project={project}\n          pluginList={pluginList}\n        />\n\n        <Panel>\n          <PanelHeader>{t('API')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {t(\n                'You can notify Sentry when you release new versions of your application via our HTTP API.'\n              )}\n            </p>\n\n            <p>\n              {tct('See the [link:releases documentation] for more information.', {\n                link: <ExternalLink href=\"https://docs.sentry.io/workflow/releases/\" />,\n              })}\n            </p>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withPlugins(ProjectReleaseTracking);\n\n// Export for tests\nexport {ProjectReleaseTracking};\n"],"names":["routeTitleGen","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","Component","fetchPlugins","PluginsStore","defined","getDisplayName","withOrganization","withProject","withPlugins","WrappedComponent","WithPlugins","plugins","loading","listen","setState","undefined","componentDidMount","componentDidUpdate","prevProps","_prevState","prevContext","organization","project","props","prevOrg","prevProject","isOrgSame","slug","isProjectSame","componentWillUnmount","unsubscribe","projectId","orgId","render","state","AsyncComponent","SentryDocumentTitle","AsyncView","getTitle","renderComponent","addErrorMessage","addSuccessMessage","Alert","AutoSelectText","Button","Confirm","Field","TextCopyInput","ExternalLink","LoadingIndicator","Panel","PanelBody","PanelHeader","PluginList","t","tct","getDynamicText","SettingsPageHeader","TOKEN_PLACEHOLDER","WEBHOOK_PLACEHOLDER","placeholderData","token","webhookUrl","ProjectReleaseTracking","params","api","request","method","data","success","error","getEndpoints","allowError","err","status","getReleaseWebhookIntructions","renderBody","hasWrite","access","includes","pluginList","filter","p","type","hasConfiguration","value","fixed","link","release","handleRegenerateToken"],"sourceRoot":""}