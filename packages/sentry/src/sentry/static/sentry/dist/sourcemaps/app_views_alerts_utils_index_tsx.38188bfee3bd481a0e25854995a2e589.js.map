{"version":3,"file":"chunks/app_views_alerts_utils_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAMO,IAAKC,sBAAZ;;WAAYA;EAAAA,uBAAAA;EAAAA,uBAAAA;GAAAA,2BAAAA;;AAKL,IAAKC,oBAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;GAAAA,yBAAAA;;AAML,IAAKC,uBAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;GAAAA,4BAAAA;;AAML,IAAKC,OAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,YAAAA;;AAUL,IAAKC,UAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,eAAAA;;AAQL,IAAKC,UAAZ;AAOA;AACA;AACA;AACA;AACA;;WAXYA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,eAAAA;;AAYL,IAAKC,iBAAZ;;WAAYA;EAAAA;EAAAA;GAAAA,sBAAAA;;AAgEL,IAAKC,UAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,eAAAA;;AAUL,IAAKC,UAAZ;;WAAYA;EAAAA,WAAAA;EAAAA,WAAAA;EAAAA,WAAAA;EAAAA,WAAAA;EAAAA,WAAAA;EAAAA,WAAAA;EAAAA,WAAAA;EAAAA,WAAAA;EAAAA,WAAAA;GAAAA,eAAAA;;AAYL,IAAKC,UAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,eAAAA;;AAQL,MAAMC,WAAW,GAAG;EACzB;EACA;EACA,CAACD,UAAU,CAACE,KAAZ,GAAoBZ,gDAAC,CAAC,aAAD,CAHI;EAIzB,CAACU,UAAU,CAACG,KAAZ,GAAoBb,gDAAC,CAAC,OAAD,CAJI;EAKzB,CAACU,UAAU,CAACI,SAAZ,GAAwBd,gDAAC,CAAC,WAAD,CALA;EAMzB,CAACU,UAAU,CAACK,OAAZ,GAAsBf,gDAAC,CAAC,UAAD,CANE;EAOzB,CAACU,UAAU,CAACM,UAAZ,GAAyBhB,gDAAC,CAAC,cAAD;AAPD,CAApB;AAUA,IAAKiB,UAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,eAAAA;;AAcL,MAAMC,WAAW,GAAG;EACzB,CAACD,UAAU,CAACE,IAAZ,GAAmBnB,gDAAC,CAAC,QAAD,CADK;EAEzB,CAACiB,UAAU,CAACG,IAAZ,GAAmBpB,gDAAC,CAAC,MAAD;AAFK,CAApB;AAKP;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC7KO,IAAKqB,aAAZ;;WAAYA;EAAAA;EAAAA;GAAAA,kBAAAA;;AAmDL,IAAKC,oBAAZ;;WAAYA;EAAAA,qBAAAA;EAAAA,qBAAAA;EAAAA,qBAAAA;EAAAA,qBAAAA;EAAAA,qBAAAA;GAAAA,yBAAAA;;AAQL,IAAKC,cAAZ;;WAAYA;EAAAA,eAAAA;EAAAA,eAAAA;EAAAA,eAAAA;EAAAA,eAAAA;GAAAA,mBAAAA;;AAOL,IAAKC,oBAAZ;;WAAYA;EAAAA,qBAAAA;EAAAA,qBAAAA;EAAAA,qBAAAA;GAAAA,yBAAAA;;AAML,IAAKC,eAAZ;;WAAYA;EAAAA,gBAAAA;EAAAA,gBAAAA;EAAAA,gBAAAA;GAAAA,oBAAAA;;AAML,IAAKC,iBAAZ;;WAAYA;EAAAA;EAAAA;GAAAA,sBAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFZ;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AAEA;AACA;AACA;;AACO,SAASQ,oBAAT,CAA8BC,KAA9B,EAAoD;EACzD,MAAMC,KAAK,GAAGN,oEAAgB,CAACK,KAAK,CAACE,UAAN,CAAiBC,IAAjB,CAAsB,CAAtB,EAAyB,CAAzB,IAA8B,IAA/B,CAA9B;EACA,MAAMC,GAAG,GAAGT,oEAAgB,CAC1BK,KAAK,CAACE,UAAN,CAAiBC,IAAjB,CAAsBH,KAAK,CAACE,UAAN,CAAiBC,IAAjB,CAAsBE,MAAtB,GAA+B,CAArD,EAAwD,CAAxD,IAA6D,IADnC,CAA5B;EAIA,OAAO;IAACJ,KAAD;IAAQG;EAAR,CAAP;AACD;AAEM,SAASE,YAAT,CACLH,IADK,EAEmB;EACxB,OAAO,CAACA,IAAI,CAACI,cAAL,CAAoB,UAApB,CAAR;AACD;AAEM,MAAMC,kBAAkB,GAAG;EAChC,CAACvC,kFAAD,GAAkBJ,gDAAC,CAAC,QAAD,CADa;EAEhC,CAACI,wFAAD,GAAwBJ,gDAAC,CAAC,cAAD,CAFO;EAGhC,CAACM,4FAAD,GAA4B,wCAHI;EAIhC,CAACA,oFAAD,GAAoB,kBAJY;EAKhC,CAACA,sFAAD,GAAsB,oBALU;EAMhC,CAACA,0FAAD,GAA0B;AANM,CAA3B,EASP;;AACO,MAAM4C,kCAAkC,GAAG;EAChD,CAAC5C,4FAAD,GAA4B;IAC1B6C,OAAO,EAAE/C,kFADiB;IAE1BgD,UAAU,EAAE,CAAC/C,oFAAD,EAAmBA,sFAAnB;EAFc,CADoB;EAKhD,CAACC,oFAAD,GAAoB;IAClB6C,OAAO,EAAE/C,kFADS;IAElBgD,UAAU,EAAE,CAAC/C,oFAAD;EAFM,CAL4B;EAShD,CAACC,sFAAD,GAAsB;IACpB6C,OAAO,EAAE/C,kFADW;IAEpBgD,UAAU,EAAE,CAAC/C,sFAAD;EAFQ,CAT0B;EAahD,CAACC,0FAAD,GAA0B;IACxB6C,OAAO,EAAE/C,wFADe;IAExBgD,UAAU,EAAE,CAAC/C,0FAAD;EAFY;AAbsB,CAA3C,EAmBP;;AACO,SAASgD,gCAAT,CACLF,OADK,EAELC,UAFK,EAGL;EACA;EACA,IAAID,OAAO,KAAK/C,wFAAZ,IAAoC+C,OAAO,KAAK/C,2FAApD,EAA6E;IAC3E,OAAOE,0FAAP;EACD,CAJD,CAKA;;;EACA,IAAI,CAAC8C,UAAL,EAAiB;IACf,OAAO9C,oFAAP;EACD;;EAED,IAAI8C,UAAU,CAACG,QAAX,CAAoBlD,sFAApB,KAA2C+C,UAAU,CAACG,QAAX,CAAoBlD,oFAApB,CAA/C,EAAsF;IACpF,OAAOC,4FAAP;EACD;;EACD,IAAI8C,UAAU,CAACG,QAAX,CAAoBlD,sFAApB,CAAJ,EAA6C;IAC3C,OAAOC,sFAAP;EACD;;EACD,OAAOA,oFAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACO,SAASkD,kBAAT,CACLC,KADK,EAEuC;EAC5C,IAAIC,KAAK,GAAGD,KAAK,CAACC,KAAN,CACV,qGADU,CAAZ;;EAGA,IAAIA,KAAJ,EAAW;IACT;IACA,MAAMN,UAAU,GAAGM,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBC,IAAlB,GAAyBC,IAAzB,CAA8B,GAA9B,CAAnB;;IACA,IAAIT,UAAU,KAAK,eAAnB,EAAoC;MAClC,OAAO,IAAP;IACD;;IAED,OAAO;MAACU,MAAM,EAAExD,4FAAT;MAAmCmD,KAAK,EAAEA,KAAK,CAACM,OAAN,CAAcL,KAAK,CAAC,CAAD,CAAnB,EAAwB,EAAxB,EAA4BM,IAA5B;IAA1C,CAAP;EACD;;EAEDN,KAAK,GAAGD,KAAK,CAACC,KAAN,CAAY,gDAAZ,CAAR;;EACA,IAAIA,KAAK,IAAIpD,8EAAU,CAACoD,KAAK,CAAC,CAAD,CAAL,CAASO,WAAT,EAAD,CAAvB,EAAiD;IAC/C,OAAO;MACLH,MAAM,EAAExD,8EAAU,CAACoD,KAAK,CAAC,CAAD,CAAL,CAASO,WAAT,EAAD,CADb;MAELR,KAAK,EAAEA,KAAK,CAACM,OAAN,CAAcL,KAAK,CAAC,CAAD,CAAnB,EAAwB,EAAxB,EAA4BM,IAA5B;IAFF,CAAP;EAID;;EAED,OAAO,IAAP;AACD;AAEM,SAASE,kBAAT,CAA4BC,SAA5B,EAA+C;EACpD,OAAOC,MAAM,CAACC,MAAP,CAAc9D,qFAAd,EAAiCgD,QAAjC,CAA0CY,SAA1C,CAAP;AACD;AAEM,MAAMG,0BAA0B,GAAG;EACxC,CAAC/D,yGAAD,GAAyCqB,4EADD;EAExC,CAACrB,sGAAD,GAAsCqB,yEAA+B8C;AAF7B,CAAnC;AAKA,SAASC,kBAAT,CAA4BC,KAA5B,EAA2CC,UAA3C,EAA+DV,SAA/D,EAAkF;EACvF,IAAID,kBAAkB,CAACC,SAAD,CAAtB,EAAmC;IACjC,OAAOtC,qDAAO,CAAC+C,KAAD,CAAP,GAAkB,GAAEjD,mDAAK,CAACiD,KAAD,EAAQ,CAAR,CAAW,GAApC,GAAyC,QAAhD;EACD;;EAED,OAAO7C,gFAAkB,CAAC6C,KAAD,EAAQ3C,iFAAmB,CAAC4C,UAAD,CAA3B,CAAzB;AACD;AAEM,SAASC,0BAAT,CACLF,KADK,EAELC,UAFK,EAGLV,SAHK,EAIL;EACA,IAAID,kBAAkB,CAACC,SAAD,CAAtB,EAAmC;IACjC,OAAOtC,qDAAO,CAAC+C,KAAD,CAAP,GAAkB,GAAEA,KAAM,GAA1B,GAA+B,QAAtC;EACD;;EAED,OAAO5C,8EAAgB,CAAC4C,KAAD,EAAQ3C,iFAAmB,CAAC4C,UAAD,CAA3B,CAAvB;AACD;AAEM,MAAME,0BAA0B,GAAG,IAAnC;AAEA,SAASC,qBAAT,CAA+Bb,SAA/B,EAAkD;EACvD;EACA;EACA,OAAOD,kBAAkB,CAACC,SAAD,CAAzB;AACD;AAEM,SAASc,gBAAT,CAA0BC,YAA1B,EAAsDC,QAAtD,EAA0E;EAC/E,OAAQ,kBAAiBD,YAAY,CAACE,IAAK,yBACzCD,QAAQ,CAACE,SAAT,CAAmBC,MAAnB,KAA8B7D,6DAA9B,IACA0D,QAAQ,CAACE,SAAT,CAAmBG,mBADnB,GAEIL,QAAQ,CAACE,SAAT,CAAmBG,mBAFvB,GAGIL,QAAQ,CAACE,SAAT,CAAmBI,EACxB,GALD;AAMD;AAED;AACA;AACA;;AACO,SAASC,cAAT,CAAwBJ,MAAxB,EAA2D;EAChE,IAAIK,KAAK,CAACC,OAAN,CAAcN,MAAd,KAAyBA,MAAM,KAAK,EAAxC,EAA4C;IAC1C,OAAO,KAAP;EACD;;EAED,OAAO,CAAC,MAAD,EAAS,QAAT,EAAmB/B,QAAnB,CAA4B+B,MAA5B,IAAsCA,MAAtC,GAA+C,KAAtD;AACD;AAED,MAAMO,8BAA8B,GAAG,CAAC,SAAD,EAAY,YAAZ,CAAvC;AAEA;AACA;AACA;;AACO,SAASC,aAAT,CAAuBC,IAAvB,EAA2D;EAChE,IAAIA,IAAI,KAAKC,SAAb,EAAwB;IACtB,OAAOH,8BAAP;EACD;;EAED,IAAIE,IAAI,KAAK,EAAb,EAAiB;IACf,OAAO,EAAP;EACD;;EAED,IAAIJ,KAAK,CAACC,OAAN,CAAcG,IAAd,CAAJ,EAAyB;IACvB,OAAOA,IAAP;EACD;;EAED,OAAO,CAACA,IAAD,CAAP;AACD","sources":["webpack:///./app/views/alerts/rules/metric/types.tsx","webpack:///./app/views/alerts/types.tsx","webpack:///./app/views/alerts/utils/index.tsx"],"sourcesContent":["import {t} from 'sentry/locale';\nimport {MEPAlertsQueryType} from 'sentry/views/alerts/wizard/options';\nimport type {SchemaFormConfig} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\n\nimport type {Incident} from '../../types';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleTriggerType {\n  CRITICAL = 'critical',\n  WARNING = 'warning',\n  RESOLVE = 'resolve',\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n  PERCENT = 'percent',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  /** Also used for performance alerts **/\n  GENERIC_METRICS = 'generic_metrics',\n  SESSIONS = 'sessions',\n  /** Also used for crash free alerts */\n  METRICS = 'metrics',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: AlertRuleTriggerType;\n  // UnsavedTrigger can be a part of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedMetricRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n  queryType?: MEPAlertsQueryType | null;\n};\n\nexport interface SavedMetricRule extends UnsavedMetricRule {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  errors?: {detail: string}[];\n  /**\n   * Returned with the expand=latestIncident query parameter\n   */\n  latestIncident?: Incident | null;\n  originalAlertRuleId?: number | null;\n}\n\nexport type MetricRule = Partial<SavedMetricRule> & UnsavedMetricRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  // \\u200B is needed because Safari disregards autocomplete=\"off\". It's seeing \"Email\" and\n  // opening up the browser autocomplete for email. https://github.com/JedWatson/react-select/issues/3500\n  [ActionType.EMAIL]: t('Emai\\u200Bl'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   *  Could not fetch details from SentryApp. Show the rule but make it disabled.\n   */\n  disabled?: boolean;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import {User} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\ntype Data = [number, {count: number}[]][];\n\nexport enum AlertRuleType {\n  METRIC = 'metric',\n  ISSUE = 'issue',\n}\n\nexport type Incident = {\n  alertRule: MetricRule;\n  dateClosed: string | null;\n  dateCreated: string;\n  dateDetected: string;\n  dateStarted: string;\n  // Array of group ids\n  discoverQuery: string;\n  groups: string[];\n  hasSeen: boolean;\n  id: string;\n  identifier: string;\n  isSubscribed: boolean;\n  organizationId: string;\n  projects: string[];\n  // Array of slugs\n  seenBy: User[];\n  status: IncidentStatus;\n  statusMethod: IncidentStatusMethod;\n  title: string;\n  activities?: ActivityType[];\n};\n\nexport type IncidentStats = {\n  eventStats: {\n    data: Data;\n  };\n  totalEvents: number;\n  uniqueUsers: number;\n};\n\nexport type ActivityTypeDraft = {\n  comment: null | string;\n  dateCreated: string;\n  id: string;\n  incidentIdentifier: string;\n  type: IncidentActivityType;\n  user: User | null;\n};\n\nexport type ActivityType = ActivityTypeDraft & {\n  previousValue: string | null;\n  value: string | null;\n  eventStats?: {data: Data};\n};\n\nexport enum IncidentActivityType {\n  CREATED = 0,\n  DETECTED = 1,\n  STATUS_CHANGE = 2,\n  COMMENT = 3,\n  STARTED = 4,\n}\n\nexport enum IncidentStatus {\n  OPENED = 1,\n  CLOSED = 2,\n  WARNING = 10,\n  CRITICAL = 20,\n}\n\nexport enum IncidentStatusMethod {\n  MANUAL = 1,\n  RULE_UPDATED = 2,\n  RULE_TRIGGERED = 3,\n}\n\nexport enum AlertRuleStatus {\n  PENDING = 0,\n  SNAPSHOT = 4,\n  DISABLED = 5,\n}\n\nexport enum CombinedAlertType {\n  METRIC = 'alert_rule',\n  ISSUE = 'rule',\n}\n\nexport type CombinedMetricIssueAlerts = (IssueAlertRule | MetricRule) & {\n  type: CombinedAlertType;\n  latestIncident?: Incident | null;\n};\n","import round from 'lodash/round';\n\nimport {t} from 'sentry/locale';\nimport {Organization, SessionFieldWithOperation} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {defined} from 'sentry/utils';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport {\n  Dataset,\n  Datasource,\n  EventTypes,\n  MetricRule,\n  SavedMetricRule,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nimport {AlertRuleStatus, Incident, IncidentStats} from '../types';\n\n/**\n * Gets start and end date query parameters from stats\n */\nexport function getStartEndFromStats(stats: IncidentStats) {\n  const start = getUtcDateString(stats.eventStats.data[0][0] * 1000);\n  const end = getUtcDateString(\n    stats.eventStats.data[stats.eventStats.data.length - 1][0] * 1000\n  );\n\n  return {start, end};\n}\n\nexport function isIssueAlert(\n  data: IssueAlertRule | SavedMetricRule | MetricRule\n): data is IssueAlertRule {\n  return !data.hasOwnProperty('triggers');\n}\n\nexport const DATA_SOURCE_LABELS = {\n  [Dataset.ERRORS]: t('Errors'),\n  [Dataset.TRANSACTIONS]: t('Transactions'),\n  [Datasource.ERROR_DEFAULT]: 'event.type:error OR event.type:default',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n};\n\n// Maps a datasource to the relevant dataset and event_types for the backend to use\nexport const DATA_SOURCE_TO_SET_AND_EVENT_TYPES = {\n  [Datasource.ERROR_DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR, EventTypes.DEFAULT],\n  },\n  [Datasource.ERROR]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n  },\n  [Datasource.DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.DEFAULT],\n  },\n  [Datasource.TRANSACTION]: {\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: [EventTypes.TRANSACTION],\n  },\n};\n\n// Converts the given dataset and event types array to a datasource for the datasource dropdown\nexport function convertDatasetEventTypesToSource(\n  dataset: Dataset,\n  eventTypes: EventTypes[]\n) {\n  // transactions and generic_metrics only have one datasource option regardless of event type\n  if (dataset === Dataset.TRANSACTIONS || dataset === Dataset.GENERIC_METRICS) {\n    return Datasource.TRANSACTION;\n  }\n  // if no event type was provided use the default datasource\n  if (!eventTypes) {\n    return Datasource.ERROR;\n  }\n\n  if (eventTypes.includes(EventTypes.DEFAULT) && eventTypes.includes(EventTypes.ERROR)) {\n    return Datasource.ERROR_DEFAULT;\n  }\n  if (eventTypes.includes(EventTypes.DEFAULT)) {\n    return Datasource.DEFAULT;\n  }\n  return Datasource.ERROR;\n}\n\n/**\n * Attempt to guess the data source of a discover query\n *\n * @returns An object containing the datasource and new query without the datasource.\n * Returns null on no datasource.\n */\nexport function getQueryDatasource(\n  query: string\n): {query: string; source: Datasource} | null {\n  let match = query.match(\n    /\\(?\\bevent\\.type:(error|default|transaction)\\)?\\WOR\\W\\(?event\\.type:(error|default|transaction)\\)?/i\n  );\n  if (match) {\n    // should be [error, default] or [default, error]\n    const eventTypes = match.slice(1, 3).sort().join(',');\n    if (eventTypes !== 'default,error') {\n      return null;\n    }\n\n    return {source: Datasource.ERROR_DEFAULT, query: query.replace(match[0], '').trim()};\n  }\n\n  match = query.match(/(^|\\s)event\\.type:(error|default|transaction)/i);\n  if (match && Datasource[match[2].toUpperCase()]) {\n    return {\n      source: Datasource[match[2].toUpperCase()],\n      query: query.replace(match[0], '').trim(),\n    };\n  }\n\n  return null;\n}\n\nexport function isSessionAggregate(aggregate: string) {\n  return Object.values(SessionsAggregate).includes(aggregate as SessionsAggregate);\n}\n\nexport const SESSION_AGGREGATE_TO_FIELD = {\n  [SessionsAggregate.CRASH_FREE_SESSIONS]: SessionFieldWithOperation.SESSIONS,\n  [SessionsAggregate.CRASH_FREE_USERS]: SessionFieldWithOperation.USERS,\n};\n\nexport function alertAxisFormatter(value: number, seriesName: string, aggregate: string) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${round(value, 2)}%` : '\\u2015';\n  }\n\n  return axisLabelFormatter(value, aggregateOutputType(seriesName));\n}\n\nexport function alertTooltipValueFormatter(\n  value: number,\n  seriesName: string,\n  aggregate: string\n) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${value}%` : '\\u2015';\n  }\n\n  return tooltipFormatter(value, aggregateOutputType(seriesName));\n}\n\nexport const ALERT_CHART_MIN_MAX_BUFFER = 1.03;\n\nexport function shouldScaleAlertChart(aggregate: string) {\n  // We want crash free rate charts to be scaled because they are usually too\n  // close to 100% and therefore too fine to see the spikes on 0%-100% scale.\n  return isSessionAggregate(aggregate);\n}\n\nexport function alertDetailsLink(organization: Organization, incident: Incident) {\n  return `/organizations/${organization.slug}/alerts/rules/details/${\n    incident.alertRule.status === AlertRuleStatus.SNAPSHOT &&\n    incident.alertRule.originalAlertRuleId\n      ? incident.alertRule.originalAlertRuleId\n      : incident.alertRule.id\n  }/`;\n}\n\n/**\n * Noramlizes a status string\n */\nexport function getQueryStatus(status: string | string[]): string {\n  if (Array.isArray(status) || status === '') {\n    return 'all';\n  }\n\n  return ['open', 'closed'].includes(status) ? status : 'all';\n}\n\nconst ALERT_LIST_QUERY_DEFAULT_TEAMS = ['myteams', 'unassigned'];\n\n/**\n * Noramlize a team slug from the query\n */\nexport function getTeamParams(team?: string | string[]): string[] {\n  if (team === undefined) {\n    return ALERT_LIST_QUERY_DEFAULT_TEAMS;\n  }\n\n  if (team === '') {\n    return [];\n  }\n\n  if (Array.isArray(team)) {\n    return team;\n  }\n\n  return [team];\n}\n"],"names":["t","AlertRuleThresholdType","AlertRuleTriggerType","AlertRuleComparisonType","Dataset","EventTypes","Datasource","SessionsAggregate","TimePeriod","TimeWindow","ActionType","ActionLabel","EMAIL","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","TargetType","TargetLabel","USER","TEAM","AlertRuleType","IncidentActivityType","IncidentStatus","IncidentStatusMethod","AlertRuleStatus","CombinedAlertType","round","SessionFieldWithOperation","defined","getUtcDateString","axisLabelFormatter","tooltipFormatter","aggregateOutputType","getStartEndFromStats","stats","start","eventStats","data","end","length","isIssueAlert","hasOwnProperty","DATA_SOURCE_LABELS","ERRORS","TRANSACTIONS","ERROR_DEFAULT","ERROR","DEFAULT","TRANSACTION","DATA_SOURCE_TO_SET_AND_EVENT_TYPES","dataset","eventTypes","convertDatasetEventTypesToSource","GENERIC_METRICS","includes","getQueryDatasource","query","match","slice","sort","join","source","replace","trim","toUpperCase","isSessionAggregate","aggregate","Object","values","SESSION_AGGREGATE_TO_FIELD","CRASH_FREE_SESSIONS","SESSIONS","CRASH_FREE_USERS","USERS","alertAxisFormatter","value","seriesName","alertTooltipValueFormatter","ALERT_CHART_MIN_MAX_BUFFER","shouldScaleAlertChart","alertDetailsLink","organization","incident","slug","alertRule","status","SNAPSHOT","originalAlertRuleId","id","getQueryStatus","Array","isArray","ALERT_LIST_QUERY_DEFAULT_TEAMS","getTeamParams","team","undefined"],"sourceRoot":""}