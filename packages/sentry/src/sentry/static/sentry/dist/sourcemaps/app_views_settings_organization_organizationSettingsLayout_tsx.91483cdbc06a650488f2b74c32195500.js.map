{"version":3,"file":"chunks/app_views_settings_organization_organizationSettingsLayout_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":";;;;;;;;;;;;;;;;AAEA;AACA;;;AAMA,SAASE,0BAAT,CAAoCC,KAApC,EAAkD;EAChD,OACE,gEAAC,uFAAD,OACMA,KADN;IAEE,gBAAgB,EAAE,MAAM,gEAAC,yGAAD;EAF1B,EADF;AAMD;;AAPQD;AAST,iEAAeA,0BAAf;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AAEA;AAGA;AACA;AACA;;;AAYA,MAAMD,8BAAN,SAA6CG,4CAA7C,CAAqE;EAAA;IAAA;;IAAA,iGACpD,KAAKK,QAAL,EADoD;;IAAA,uGAoBrDJ,sEAAA,CACZ,CAACM,QAAD,EAAqBC,KAArB,KAAmF;MACjF,KAAKC,WAAL,CAAiBF,QAAjB,EAA2BC,KAA3B;IACD,CAHW,EAIZE,SAJY,CApBqD;EAAA;;EAGnEC,iBAAiB,GAAG;IAClB;IACA,KAAKC,QAAL,CAAc,KAAKP,QAAL,EAAd;EACD;;EAEDQ,oBAAoB,GAAG;IACrB,KAAKC,WAAL;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EAQET,QAAQ,GAAG;IACT;IACA,MAAM;MAACU;IAAD,IAAiB,KAAKhB,KAA5B;IAEA,OAAO;MACLiB,WAAW,EAAEf,mEAAA,CAAc,yCAAd,EAAyDiB,GAAzD,CAA6DC,EAAE,IAC1EA,EAAE,CAACJ,YAAD,CADS,CADR;MAILP,KAAK,EAAEP,mEAAA,CAAc,kCAAd,EAAkDiB,GAAlD,CAAsDC,EAAE,IAC7DA,EAAE,CAACJ,YAAD,CADG;IAJF,CAAP;EAQD;;EAEDN,WAAW,CAACW,IAAD,EAAiBZ,KAAjB,EAA4E;IACrF,MAAMa,GAAG,GAAG,KAAKtB,KAAL,CAAWgB,YAAvB;;IACA,IAAIK,IAAI,KAAK,yCAAb,EAAwD;MACtD;IACD;;IACD,KAAKR,QAAL,CAAc;MAACI,WAAW,EAAER,KAAK,CAACU,GAAN,CAAUC,EAAE,IAAIA,EAAE,CAACE,GAAD,CAAlB;IAAd,CAAd;EACD;;EAEDC,MAAM,GAAG;IACP,MAAM;MAACd,KAAD;MAAQQ;IAAR,IAAuB,KAAKO,KAAlC;IACA,MAAM;MAACR;IAAD,IAAiB,KAAKhB,KAA5B;IACA,MAAMyB,MAAM,GAAG,IAAIC,GAAJ,CAAQV,YAAY,CAACS,MAArB,CAAf;IACA,MAAME,QAAQ,GAAG,IAAID,GAAJ,CAAQV,YAAY,CAACW,QAArB,CAAjB;IAEA,OACE,gEAAC,2FAAD;MACE,iBAAiB,EAAEtB,kGADrB;MAEE,MAAM,EAAEoB,MAFV;MAGE,QAAQ,EAAEE,QAHZ;MAIE,YAAY,EAAEX,YAJhB;MAKE,KAAK,EAAEP,KALT;MAME,WAAW,EAAEQ;IANf,EADF;EAUD;;AAjEkE;;AAA/DnB;AAoEN,iEAAeK,yEAAgB,CAACL,8BAAD,CAA/B","sources":["webpack:///./app/views/settings/organization/organizationSettingsLayout.tsx","webpack:///./app/views/settings/organization/organizationSettingsNavigation.tsx"],"sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nimport SettingsLayout from 'sentry/views/settings/components/settingsLayout';\nimport OrganizationSettingsNavigation from 'sentry/views/settings/organization/organizationSettingsNavigation';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  children: React.ReactNode;\n};\n\nfunction OrganizationSettingsLayout(props: Props) {\n  return (\n    <SettingsLayout\n      {...props}\n      renderNavigation={() => <OrganizationSettingsNavigation />}\n    />\n  );\n}\n\nexport default OrganizationSettingsLayout;\n","import {Component} from 'react';\n\nimport HookStore from 'sentry/stores/hookStore';\nimport {Organization} from 'sentry/types';\nimport {HookName, Hooks} from 'sentry/types/hooks';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport SettingsNavigation from 'sentry/views/settings/components/settingsNavigation';\nimport navigationConfiguration from 'sentry/views/settings/organization/navigationConfiguration';\nimport {NavigationSection} from 'sentry/views/settings/types';\n\ntype Props = {\n  organization: Organization;\n};\n\ntype State = {\n  hookConfigs: NavigationSection[];\n  hooks: React.ReactElement[];\n};\n\nclass OrganizationSettingsNavigation extends Component<Props, State> {\n  state: State = this.getHooks();\n\n  componentDidMount() {\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState(this.getHooks());\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  /**\n   * TODO(epurkhiser): Becase the settings organization navigation hooks\n   * do not conform to a normal component style hook, and take a single\n   * parameter 'organization', we cannot use the `Hook` component here,\n   * and must resort to using listening to the HookStore to retrieve hook data.\n   *\n   * We should update the hook interface for the two hooks used here\n   */\n  unsubscribe = HookStore.listen(\n    (hookName: HookName, hooks: Hooks['settings:organization-navigation-config'][]) => {\n      this.handleHooks(hookName, hooks);\n    },\n    undefined\n  );\n\n  getHooks() {\n    // Allow injection via getsentry et all\n    const {organization} = this.props as Props;\n\n    return {\n      hookConfigs: HookStore.get('settings:organization-navigation-config').map(cb =>\n        cb(organization)\n      ),\n      hooks: HookStore.get('settings:organization-navigation').map(cb =>\n        cb(organization)\n      ),\n    };\n  }\n\n  handleHooks(name: HookName, hooks: Hooks['settings:organization-navigation-config'][]) {\n    const org = this.props.organization;\n    if (name !== 'settings:organization-navigation-config') {\n      return;\n    }\n    this.setState({hookConfigs: hooks.map(cb => cb(org))});\n  }\n\n  render() {\n    const {hooks, hookConfigs} = this.state as State;\n    const {organization} = this.props as Props;\n    const access = new Set(organization.access);\n    const features = new Set(organization.features);\n\n    return (\n      <SettingsNavigation\n        navigationObjects={navigationConfiguration}\n        access={access}\n        features={features}\n        organization={organization}\n        hooks={hooks}\n        hookConfigs={hookConfigs}\n      />\n    );\n  }\n}\n\nexport default withOrganization(OrganizationSettingsNavigation);\n"],"names":["SettingsLayout","OrganizationSettingsNavigation","OrganizationSettingsLayout","props","Component","HookStore","withOrganization","SettingsNavigation","navigationConfiguration","getHooks","listen","hookName","hooks","handleHooks","undefined","componentDidMount","setState","componentWillUnmount","unsubscribe","organization","hookConfigs","get","map","cb","name","org","render","state","access","Set","features"],"sourceRoot":""}