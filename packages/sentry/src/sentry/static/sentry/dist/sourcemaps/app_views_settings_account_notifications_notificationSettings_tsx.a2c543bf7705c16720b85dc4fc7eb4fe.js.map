{"version":3,"file":"chunks/app_views_settings_account_notifications_notificationSettings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/account/notifications/notificationSettings.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport AlertLink from 'sentry/components/alertLink';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport FormModel from 'sentry/components/forms/model';\nimport {FieldObject} from 'sentry/components/forms/type';\nimport Link from 'sentry/components/links/link';\nimport {IconMail} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withOrganizations from 'sentry/utils/withOrganizations';\nimport {\n  CONFIRMATION_MESSAGE,\n  NOTIFICATION_SETTINGS_TYPES,\n  NotificationSettingsObject,\n  SELF_NOTIFICATION_SETTINGS_TYPES,\n} from 'sentry/views/settings/account/notifications/constants';\nimport {NOTIFICATION_SETTING_FIELDS} from 'sentry/views/settings/account/notifications/fields2';\nimport {\n  decideDefault,\n  getParentIds,\n  getStateToPutForDefault,\n  isSufficientlyComplex,\n  mergeNotificationSettings,\n} from 'sentry/views/settings/account/notifications/utils';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = AsyncComponent['props'] & {\n  organizations: Organization[];\n};\n\ntype State = {\n  legacyData: {[key: string]: string};\n  notificationSettings: NotificationSettingsObject;\n} & AsyncComponent['state'];\n\nclass NotificationSettings extends AsyncComponent<Props, State> {\n  model = new FormModel();\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      notificationSettings: {},\n      legacyData: {},\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [\n      ['notificationSettings', `/users/me/notification-settings/`],\n      ['legacyData', '/users/me/notifications/'],\n    ];\n  }\n\n  componentDidMount() {\n    // only tied to a user\n    trackAdvancedAnalyticsEvent('notification_settings.index_page_viewed', {\n      organization: null,\n    });\n  }\n\n  getStateToPutForDefault = (\n    changedData: {[key: string]: string},\n    notificationType: string\n  ) => {\n    /**\n     * Update the current providers' parent-independent notification settings\n     * with the new value. If the new value is \"never\", then also update all\n     * parent-specific notification settings to \"default\". If the previous value\n     * was \"never\", then assume providerList should be \"email\" only.\n     */\n\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForDefault(\n      notificationType,\n      notificationSettings,\n      changedData,\n      getParentIds(notificationType, notificationSettings)\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  get notificationSettingsType() {\n    // filter out quotas if the feature flag isn't set\n    const hasSlackOverage = this.props.organizations.some(org =>\n      org.features?.includes('slack-overage-notifications')\n    );\n    const hasActiveRelease = this.props.organizations.some(org =>\n      org.features?.includes('active-release-monitor-alpha')\n    );\n\n    return NOTIFICATION_SETTINGS_TYPES.filter(type => {\n      if (type === 'quota' && !hasSlackOverage) {\n        return false;\n      }\n      if (type === 'activeRelease' && !hasActiveRelease) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  getInitialData(): {[key: string]: string} {\n    const {notificationSettings, legacyData} = this.state;\n\n    const notificationsInitialData = Object.fromEntries(\n      this.notificationSettingsType.map(notificationType => [\n        notificationType,\n        decideDefault(notificationType, notificationSettings),\n      ])\n    );\n\n    const allInitialData = {\n      ...notificationsInitialData,\n      ...legacyData,\n    };\n\n    return allInitialData;\n  }\n\n  getFields(): FieldObject[] {\n    const {notificationSettings} = this.state;\n\n    const fields: FieldObject[] = [];\n    const endOfFields: FieldObject[] = [];\n    for (const notificationType of this.notificationSettingsType) {\n      const field = Object.assign({}, NOTIFICATION_SETTING_FIELDS[notificationType], {\n        getData: data => this.getStateToPutForDefault(data, notificationType),\n        help: (\n          <Fragment>\n            <p>\n              {NOTIFICATION_SETTING_FIELDS[notificationType].help}\n              &nbsp;\n              <Link\n                data-test-id=\"fine-tuning\"\n                to={`/settings/account/notifications/${notificationType}`}\n              >\n                Fine tune\n              </Link>\n            </p>\n          </Fragment>\n        ),\n      }) as any;\n\n      if (\n        isSufficientlyComplex(notificationType, notificationSettings) &&\n        typeof field !== 'function'\n      ) {\n        field.confirm = {never: CONFIRMATION_MESSAGE};\n      }\n      if (field.type === 'blank') {\n        endOfFields.push(field);\n      } else {\n        fields.push(field);\n      }\n    }\n    const legacyField = SELF_NOTIFICATION_SETTINGS_TYPES.map(\n      type => NOTIFICATION_SETTING_FIELDS[type] as FieldObject\n    );\n    fields.push(...legacyField);\n\n    const allFields = [...fields, ...endOfFields];\n\n    return allFields;\n  }\n\n  onFieldChange = (fieldName: string) => {\n    if (SELF_NOTIFICATION_SETTINGS_TYPES.includes(fieldName)) {\n      const endpointDetails = {\n        apiEndpoint: '/users/me/notifications/',\n      };\n      this.model.setFormOptions({...this.model.options, ...endpointDetails});\n    } else {\n      const endpointDetails = {\n        apiEndpoint: '/users/me/notification-settings/',\n      };\n      this.model.setFormOptions({...this.model.options, ...endpointDetails});\n    }\n  };\n\n  renderBody() {\n    return (\n      <Fragment>\n        <SettingsPageHeader title=\"Notifications\" />\n        <TextBlock>Personal notifications sent by email or an integration.</TextBlock>\n        <Form\n          model={this.model}\n          saveOnBlur\n          apiMethod=\"PUT\"\n          onFieldChange={this.onFieldChange}\n          initialData={this.getInitialData()}\n        >\n          <JsonForm title={t('Notifications')} fields={this.getFields()} />\n        </Form>\n        <AlertLink to=\"/settings/account/emails\" icon={<IconMail />}>\n          {t('Looking to add or remove an email address? Use the emails panel.')}\n        </AlertLink>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettings);\n"],"names":["Fragment","AlertLink","AsyncComponent","Form","JsonForm","FormModel","Link","IconMail","t","trackAdvancedAnalyticsEvent","withOrganizations","CONFIRMATION_MESSAGE","NOTIFICATION_SETTINGS_TYPES","SELF_NOTIFICATION_SETTINGS_TYPES","NOTIFICATION_SETTING_FIELDS","decideDefault","getParentIds","getStateToPutForDefault","isSufficientlyComplex","mergeNotificationSettings","SettingsPageHeader","TextBlock","NotificationSettings","changedData","notificationType","notificationSettings","state","updatedNotificationSettings","setState","fieldName","includes","endpointDetails","apiEndpoint","model","setFormOptions","options","getDefaultState","legacyData","getEndpoints","componentDidMount","organization","notificationSettingsType","hasSlackOverage","props","organizations","some","org","features","hasActiveRelease","filter","type","getInitialData","notificationsInitialData","Object","fromEntries","map","allInitialData","getFields","fields","endOfFields","field","assign","getData","data","help","confirm","never","push","legacyField","allFields","renderBody","onFieldChange"],"sourceRoot":""}