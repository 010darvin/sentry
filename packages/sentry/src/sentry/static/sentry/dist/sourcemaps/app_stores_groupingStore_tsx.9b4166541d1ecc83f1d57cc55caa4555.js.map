{"version":3,"file":"chunks/app_stores_groupingStore_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actions/groupingActions.tsx","webpack:///./app/stores/groupingStore.tsx"],"sourcesContent":["import {createActions} from 'reflux';\n\n// Actions for \"Grouping\" view - for merging/unmerging events/issues\nconst GroupingActions = createActions([\n  'fetch',\n  'showAllSimilarItems',\n  'toggleUnmerge',\n  'toggleMerge',\n  'unmerge',\n  'merge',\n  'toggleCollapseFingerprint',\n  'toggleCollapseFingerprints',\n]);\n\nexport default GroupingActions;\n","import pick from 'lodash/pick';\nimport {createStore} from 'reflux';\n\nimport {mergeGroups} from 'sentry/actionCreators/group';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport GroupingActions from 'sentry/actions/groupingActions';\nimport {Client} from 'sentry/api';\nimport {Group, Organization, Project} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\nimport {makeSafeRefluxStore} from 'sentry/utils/makeSafeRefluxStore';\n\nimport {CommonStoreDefinition} from './types';\n\n// Between 0-100\nconst MIN_SCORE = 0.6;\n\n// @param score: {[key: string]: number}\nconst checkBelowThreshold = (scores = {}) => {\n  const scoreKeys = Object.keys(scores);\n  return !scoreKeys.map(key => scores[key]).find(score => score >= MIN_SCORE);\n};\n\ntype State = {\n  // \"Compare\" button state\n  enableFingerprintCompare: boolean;\n  error: boolean;\n  filteredSimilarItems: [];\n  loading: boolean;\n  mergeDisabled: boolean;\n  mergeList: Array<string>;\n  mergeState: Map<any, any>;\n  // List of fingerprints that belong to issue\n  mergedItems: [];\n  mergedLinks: string;\n  similarItems: [];\n  similarLinks: string;\n  // Disabled state of \"Unmerge\" button in \"Merged\" tab (for Issues)\n  unmergeDisabled: boolean;\n  // If \"Collapse All\" was just used, this will be true\n  unmergeLastCollapsed: boolean;\n  // Map of {[fingerprint]: Array<fingerprint, event id>} that is selected to be unmerged\n  unmergeList: Map<any, any>;\n  // Map of state for each fingerprint (i.e. \"collapsed\")\n  unmergeState: Map<any, any>;\n};\n\ntype ScoreMap = Record<string, number | null>;\n\ntype ApiFingerprint = {\n  id: string;\n  latestEvent: Event;\n  childId?: string;\n  childLabel?: string;\n  eventCount?: number;\n  label?: string;\n  lastSeen?: string;\n  parentId?: string;\n  parentLabel?: string;\n  state?: string;\n};\n\ntype ChildFingerprint = {\n  childId: string;\n  childLabel?: string;\n  eventCount?: number;\n  lastSeen?: string;\n  latestEvent?: Event;\n};\n\nexport type Fingerprint = {\n  children: Array<ChildFingerprint>;\n  eventCount: number;\n  id: string;\n  latestEvent: Event;\n  label?: string;\n  lastSeen?: string;\n  parentId?: string;\n  parentLabel?: string;\n  state?: string;\n};\n\ntype ResponseProcessors = {\n  merged: (item: ApiFingerprint[]) => Fingerprint[];\n  similar: (data: [Group, ScoreMap]) => {\n    aggregate: Record<string, number>;\n    isBelowThreshold: boolean;\n    issue: Group;\n    score: ScoreMap;\n    scoresByInterface: Record<string, Array<[string, number | null]>>;\n  };\n};\n\ntype DataKey = keyof ResponseProcessors;\n\ntype ResultsAsArrayDataMerged = Parameters<ResponseProcessors['merged']>[0];\n\ntype ResultsAsArrayDataSimilar = Array<Parameters<ResponseProcessors['similar']>[0]>;\n\ntype ResultsAsArray = Array<{\n  data: ResultsAsArrayDataMerged | ResultsAsArrayDataSimilar;\n  dataKey: DataKey;\n  links: string | null;\n}>;\n\ntype IdState = {\n  busy?: boolean;\n  checked?: boolean;\n  collapsed?: boolean;\n};\n\ntype InternalDefinition = {\n  api: Client;\n};\n\ninterface GroupingStoreDefinition\n  extends CommonStoreDefinition<State>,\n    InternalDefinition {\n  getInitialState(): State;\n  init(): void;\n  isAllUnmergedSelected(): boolean;\n  onFetch(\n    toFetchArray?: Array<{\n      dataKey: DataKey;\n      endpoint: string;\n      queryParams?: Record<string, any>;\n    }>\n  ): Promise<any>;\n  onMerge(props: {\n    params?: {\n      groupId: Group['id'];\n      orgId: Organization['id'];\n      projectId: Project['id'];\n    };\n    projectId?: Project['id'];\n    query?: string;\n  }): undefined | Promise<any>;\n  onToggleCollapseFingerprint(fingerprint: string): void;\n  onToggleCollapseFingerprints(): void;\n  onToggleMerge(id: string): void;\n  onToggleUnmerge(props: [string, string] | string): void;\n  onUnmerge(props: {\n    groupId: Group['id'];\n    errorMessage?: string;\n    loadingMessage?: string;\n    successMessage?: string;\n  }): void;\n  setStateForId(\n    map: Map<string, IdState>,\n    idOrIds: Array<string> | string,\n    newState: IdState\n  ): Array<IdState>;\n  triggerFetchState(): Pick<\n    State,\n    | 'similarItems'\n    | 'filteredSimilarItems'\n    | 'mergedItems'\n    | 'mergedLinks'\n    | 'similarLinks'\n    | 'mergeState'\n    | 'unmergeState'\n    | 'loading'\n    | 'error'\n  >;\n  triggerMergeState(): Pick<State, 'mergeState' | 'mergeDisabled' | 'mergeList'>;\n  triggerUnmergeState(): Pick<\n    State,\n    | 'unmergeDisabled'\n    | 'unmergeState'\n    | 'unmergeList'\n    | 'enableFingerprintCompare'\n    | 'unmergeLastCollapsed'\n  >;\n}\n\nconst storeConfig: GroupingStoreDefinition = {\n  listenables: [GroupingActions],\n  api: new Client(),\n\n  init() {\n    const state = this.getInitialState();\n\n    Object.entries(state).forEach(([key, value]) => {\n      this[key] = value;\n    });\n  },\n\n  getInitialState() {\n    return {\n      // List of fingerprints that belong to issue\n      mergedItems: [],\n      // Map of {[fingerprint]: Array<fingerprint, event id>} that is selected to be unmerged\n      unmergeList: new Map(),\n      // Map of state for each fingerprint (i.e. \"collapsed\")\n      unmergeState: new Map(),\n      // Disabled state of \"Unmerge\" button in \"Merged\" tab (for Issues)\n      unmergeDisabled: true,\n      // If \"Collapse All\" was just used, this will be true\n      unmergeLastCollapsed: false,\n      // \"Compare\" button state\n      enableFingerprintCompare: false,\n      similarItems: [],\n      filteredSimilarItems: [],\n      similarLinks: '',\n      mergeState: new Map(),\n      mergeList: [],\n      mergedLinks: '',\n      mergeDisabled: false,\n      loading: true,\n      error: false,\n    };\n  },\n\n  setStateForId(map, idOrIds, newState) {\n    const ids = Array.isArray(idOrIds) ? idOrIds : [idOrIds];\n\n    return ids.map(id => {\n      const state = (map.has(id) && map.get(id)) || {};\n      const mergedState = {...state, ...newState};\n      map.set(id, mergedState);\n      return mergedState;\n    });\n  },\n\n  isAllUnmergedSelected() {\n    const lockedItems =\n      (Array.from(this.unmergeState.values()) as Array<IdState>).filter(\n        ({busy}) => busy\n      ) || [];\n    return (\n      this.unmergeList.size ===\n      this.mergedItems.filter(({latestEvent}) => !!latestEvent).length -\n        lockedItems.length\n    );\n  },\n\n  // Fetches data\n  onFetch(toFetchArray) {\n    const requests = toFetchArray || this.toFetchArray;\n\n    // Reset state and trigger update\n    this.init();\n    this.triggerFetchState();\n\n    const promises = requests.map(\n      ({endpoint, queryParams, dataKey}) =>\n        new Promise((resolve, reject) => {\n          this.api.request(endpoint, {\n            method: 'GET',\n            data: queryParams,\n            success: (data, _, resp) => {\n              resolve({\n                dataKey,\n                data,\n                links: resp ? resp.getResponseHeader('Link') : null,\n              });\n            },\n            error: err => {\n              const error = err.responseJSON?.detail || true;\n              reject(error);\n            },\n          });\n        })\n    );\n\n    const responseProcessors: ResponseProcessors = {\n      merged: items => {\n        const newItemsMap: Record<string, Fingerprint> = {};\n        const newItems: Fingerprint[] = [];\n\n        items.forEach(item => {\n          if (!newItemsMap[item.id]) {\n            const newItem = {\n              eventCount: 0,\n              children: [],\n              // lastSeen and latestEvent properties are correct\n              // since the server returns items in\n              // descending order of lastSeen\n              ...item,\n            };\n            // Check for locked items\n            this.setStateForId(this.unmergeState, item.id, {\n              busy: item.state === 'locked',\n            });\n\n            newItemsMap[item.id] = newItem;\n            newItems.push(newItem);\n          }\n\n          const newItem = newItemsMap[item.id];\n          const {childId, childLabel, eventCount, lastSeen, latestEvent} = item;\n\n          if (eventCount) {\n            newItem.eventCount += eventCount;\n          }\n\n          if (childId) {\n            newItem.children.push({\n              childId,\n              childLabel,\n              lastSeen,\n              latestEvent,\n              eventCount,\n            });\n          }\n        });\n\n        return newItems;\n      },\n      similar: ([issue, scoreMap]) => {\n        // Hide items with a low scores\n        const isBelowThreshold = checkBelowThreshold(scoreMap);\n\n        // List of scores indexed by interface (i.e., exception and message)\n        // Note: for v2, the interface is always \"similarity\". When v2 is\n        // rolled out we can get rid of this grouping entirely.\n        const scoresByInterface = Object.keys(scoreMap)\n          .map(scoreKey => [scoreKey, scoreMap[scoreKey]])\n          .reduce((acc, [scoreKey, score]) => {\n            // v1 layout: '<interface>:...'\n            const [interfaceName] = String(scoreKey).split(':');\n\n            if (!acc[interfaceName]) {\n              acc[interfaceName] = [];\n            }\n            acc[interfaceName].push([scoreKey, score]);\n\n            return acc;\n          }, {});\n\n        // Aggregate score by interface\n        const aggregate = Object.keys(scoresByInterface)\n          .map(interfaceName => [interfaceName, scoresByInterface[interfaceName]])\n          .reduce((acc, [interfaceName, allScores]) => {\n            // `null` scores means feature was not present in both issues, do not\n            // include in aggregate\n            const scores = allScores.filter(([, score]) => score !== null);\n\n            const avg = scores.reduce((sum, [, score]) => sum + score, 0) / scores.length;\n\n            acc[interfaceName] = avg;\n            return acc;\n          }, {});\n\n        return {\n          issue,\n          score: scoreMap,\n          scoresByInterface,\n          aggregate,\n          isBelowThreshold,\n        };\n      },\n    };\n\n    if (toFetchArray) {\n      this.toFetchArray = toFetchArray;\n    }\n\n    return Promise.all(promises).then(\n      resultsArray => {\n        (resultsArray as ResultsAsArray).forEach(({dataKey, data, links}) => {\n          const items =\n            dataKey === 'similar'\n              ? (data as ResultsAsArrayDataSimilar).map(responseProcessors[dataKey])\n              : responseProcessors[dataKey](data as ResultsAsArrayDataMerged);\n\n          this[`${dataKey}Items`] = items;\n          this[`${dataKey}Links`] = links;\n        });\n\n        this.loading = false;\n        this.error = false;\n        this.triggerFetchState();\n      },\n      () => {\n        this.loading = false;\n        this.error = true;\n        this.triggerFetchState();\n      }\n    );\n  },\n\n  // Toggle merge checkbox\n  onToggleMerge(id) {\n    let checked = false;\n\n    // Don't do anything if item is busy\n    const state = this.mergeState.has(id) ? this.mergeState.get(id) : undefined;\n\n    if (state?.busy === true) {\n      return;\n    }\n\n    if (this.mergeList.includes(id)) {\n      this.mergeList = this.mergeList.filter(item => item !== id);\n    } else {\n      this.mergeList = [...this.mergeList, id];\n      checked = true;\n    }\n\n    this.setStateForId(this.mergeState, id, {\n      checked,\n    });\n\n    this.triggerMergeState();\n  },\n\n  // Toggle unmerge check box\n  onToggleUnmerge([fingerprint, eventId]) {\n    let checked = false;\n\n    // Uncheck an item to unmerge\n    const state = this.unmergeState.get(fingerprint);\n\n    if (state?.busy === true) {\n      return;\n    }\n\n    if (this.unmergeList.has(fingerprint)) {\n      this.unmergeList.delete(fingerprint);\n    } else {\n      this.unmergeList.set(fingerprint, eventId);\n      checked = true;\n    }\n\n    // Update \"checked\" state for row\n    this.setStateForId(this.unmergeState, fingerprint, {\n      checked,\n    });\n\n    // Unmerge should be disabled if 0 or all items are selected, or if there's\n    // only one item to select\n    this.unmergeDisabled =\n      this.mergedItems.size <= 1 ||\n      this.unmergeList.size === 0 ||\n      this.isAllUnmergedSelected();\n    this.enableFingerprintCompare = this.unmergeList.size === 2;\n\n    this.triggerUnmergeState();\n  },\n\n  onUnmerge({groupId, loadingMessage, successMessage, errorMessage}) {\n    const ids = Array.from(this.unmergeList.keys()) as Array<string>;\n\n    return new Promise((resolve, reject) => {\n      if (this.isAllUnmergedSelected()) {\n        reject(new Error('Not allowed to unmerge ALL events'));\n        return;\n      }\n\n      // Disable unmerge button\n      this.unmergeDisabled = true;\n\n      // Disable rows\n      this.setStateForId(this.unmergeState, ids, {\n        checked: false,\n        busy: true,\n      });\n      this.triggerUnmergeState();\n      addLoadingMessage(loadingMessage);\n\n      this.api.request(`/issues/${groupId}/hashes/`, {\n        method: 'DELETE',\n        query: {\n          id: ids,\n        },\n        success: () => {\n          addSuccessMessage(successMessage);\n\n          // Busy rows after successful Unmerge\n          this.setStateForId(this.unmergeState, ids, {\n            checked: false,\n            busy: true,\n          });\n          this.unmergeList.clear();\n        },\n        error: () => {\n          addErrorMessage(errorMessage);\n          this.setStateForId(this.unmergeState, ids, {\n            checked: true,\n            busy: false,\n          });\n        },\n        complete: () => {\n          this.unmergeDisabled = false;\n          resolve(this.triggerUnmergeState());\n        },\n      });\n    });\n  },\n\n  // For cross-project views, we need to pass projectId instead of\n  // depending on router params (since we will only have orgId in that case)\n  onMerge({params, query, projectId}) {\n    if (!params) {\n      return undefined;\n    }\n\n    const ids = this.mergeList;\n\n    this.mergeDisabled = true;\n\n    this.setStateForId(this.mergeState, ids as Array<string>, {\n      busy: true,\n    });\n\n    this.triggerMergeState();\n\n    const promise = new Promise(resolve => {\n      // Disable merge button\n      const {orgId, groupId} = params;\n\n      mergeGroups(\n        this.api,\n        {\n          orgId,\n          projectId: projectId || params.projectId,\n          itemIds: [...ids, groupId],\n          query,\n        },\n        {\n          success: data => {\n            if (data?.merge?.parent) {\n              this.trigger({\n                mergedParent: data.merge.parent,\n              });\n            }\n\n            // Hide rows after successful merge\n            this.setStateForId(this.mergeState, ids as Array<string>, {\n              checked: false,\n              busy: true,\n            });\n            this.mergeList = [];\n          },\n          error: () => {\n            this.setStateForId(this.mergeState, ids as Array<string>, {\n              checked: true,\n              busy: false,\n            });\n          },\n          complete: () => {\n            this.mergeDisabled = false;\n            resolve(this.triggerMergeState());\n          },\n        }\n      );\n    });\n\n    return promise;\n  },\n\n  // Toggle collapsed state of all fingerprints\n  onToggleCollapseFingerprints() {\n    this.setStateForId(\n      this.unmergeState,\n      this.mergedItems.map(({id}) => id),\n      {\n        collapsed: !this.unmergeLastCollapsed,\n      }\n    );\n\n    this.unmergeLastCollapsed = !this.unmergeLastCollapsed;\n\n    this.trigger({\n      unmergeLastCollapsed: this.unmergeLastCollapsed,\n      unmergeState: this.unmergeState,\n    });\n  },\n\n  onToggleCollapseFingerprint(fingerprint) {\n    const collapsed =\n      this.unmergeState.has(fingerprint) && this.unmergeState.get(fingerprint).collapsed;\n    this.setStateForId(this.unmergeState, fingerprint, {collapsed: !collapsed});\n    this.trigger({\n      unmergeState: this.unmergeState,\n    });\n  },\n\n  triggerFetchState() {\n    const state = {\n      similarItems: this.similarItems.filter(({isBelowThreshold}) => !isBelowThreshold),\n      filteredSimilarItems: this.similarItems.filter(\n        ({isBelowThreshold}) => isBelowThreshold\n      ),\n      ...pick(this, [\n        'mergedItems',\n        'mergedLinks',\n        'similarLinks',\n        'mergeState',\n        'unmergeState',\n        'loading',\n        'error',\n        'enableFingerprintCompare',\n        'unmergeList',\n      ]),\n    };\n    this.trigger(state);\n    return state;\n  },\n\n  triggerUnmergeState() {\n    const state = pick(this, [\n      'unmergeDisabled',\n      'unmergeState',\n      'unmergeList',\n      'enableFingerprintCompare',\n      'unmergeLastCollapsed',\n    ]);\n    this.trigger(state);\n    return state;\n  },\n\n  triggerMergeState() {\n    const state = pick(this, ['mergeDisabled', 'mergeState', 'mergeList']);\n    this.trigger(state);\n    return state;\n  },\n\n  getState(): State {\n    return this.state;\n  },\n};\n\nconst GroupingStore = createStore(makeSafeRefluxStore(storeConfig));\nexport default GroupingStore;\n"],"names":["createActions","GroupingActions","pick","createStore","mergeGroups","addErrorMessage","addLoadingMessage","addSuccessMessage","Client","makeSafeRefluxStore","MIN_SCORE","checkBelowThreshold","scores","scoreKeys","Object","keys","map","key","find","score","storeConfig","listenables","api","init","state","getInitialState","entries","forEach","value","mergedItems","unmergeList","Map","unmergeState","unmergeDisabled","unmergeLastCollapsed","enableFingerprintCompare","similarItems","filteredSimilarItems","similarLinks","mergeState","mergeList","mergedLinks","mergeDisabled","loading","error","setStateForId","idOrIds","newState","ids","Array","isArray","id","has","get","mergedState","set","isAllUnmergedSelected","lockedItems","from","values","filter","busy","size","latestEvent","length","onFetch","toFetchArray","requests","triggerFetchState","promises","endpoint","queryParams","dataKey","Promise","resolve","reject","request","method","data","success","_","resp","links","getResponseHeader","err","responseJSON","detail","responseProcessors","merged","items","newItemsMap","newItems","item","newItem","eventCount","children","push","childId","childLabel","lastSeen","similar","issue","scoreMap","isBelowThreshold","scoresByInterface","scoreKey","reduce","acc","interfaceName","String","split","aggregate","allScores","avg","sum","all","then","resultsArray","onToggleMerge","checked","undefined","includes","triggerMergeState","onToggleUnmerge","fingerprint","eventId","delete","triggerUnmergeState","onUnmerge","groupId","loadingMessage","successMessage","errorMessage","Error","query","clear","complete","onMerge","params","projectId","promise","orgId","itemIds","merge","parent","trigger","mergedParent","onToggleCollapseFingerprints","collapsed","onToggleCollapseFingerprint","getState","GroupingStore"],"sourceRoot":""}