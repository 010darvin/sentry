{"version":3,"file":"chunks/app_views_projectInstall_overview_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/projectInstall/overview.tsx"],"sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: RouteWithName[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport AutoSelectText from 'sentry/components/autoSelectText';\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport PlatformPicker from 'sentry/components/platformPicker';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport {ProjectKey} from 'sentry/views/settings/project/projectKeys/types';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n} & AsyncComponent['props'];\n\ntype State = {\n  keyList: Array<ProjectKey> | null;\n} & AsyncComponent['state'];\n\nclass ProjectInstallOverview extends AsyncComponent<Props, State> {\n  get isGettingStarted() {\n    return window.location.href.indexOf('getting-started') > 0;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];\n  }\n\n  redirectToDocs = (platform: PlatformKey | null) => {\n    const {orgId, projectId} = this.props.params;\n\n    const installUrl = this.isGettingStarted\n      ? `/organizations/${orgId}/projects/${projectId}/getting-started/${platform}/`\n      : recreateRoute(`${platform}/`, {\n          ...this.props,\n          stepBack: -1,\n        });\n\n    browserHistory.push(installUrl);\n  };\n\n  toggleDsn = () => {\n    this.setState(state => ({showDsn: !state.showDsn}));\n  };\n\n  render() {\n    const {orgId, projectId} = this.props.params;\n    const {keyList, showDsn} = this.state;\n\n    const issueStreamLink = `/organizations/${orgId}/issues/#welcome`;\n\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Instrumentation')} projectSlug={projectId} />\n        <SettingsPageHeader title={t('Configure your application')} />\n        <TextBlock>\n          {t(\n            'Get started by selecting the platform or language that powers your application.'\n          )}\n        </TextBlock>\n\n        {showDsn ? (\n          <DsnInfo>\n            <DsnContainer>\n              <strong>{t('DSN')}</strong>\n              <DsnValue>{keyList?.[0].dsn.public}</DsnValue>\n            </DsnContainer>\n\n            <Button priority=\"primary\" to={issueStreamLink}>\n              {t('Got it! Take me to the Issue Stream.')}\n            </Button>\n          </DsnInfo>\n        ) : (\n          <p>\n            <small>\n              {tct('Already have things setup? [link:Get your DSN]', {\n                link: (\n                  <Button\n                    priority=\"link\"\n                    onClick={this.toggleDsn}\n                    aria-label={t('Get your DSN')}\n                  />\n                ),\n              })}\n              .\n            </small>\n          </p>\n        )}\n        <PlatformPicker\n          setPlatform={this.redirectToDocs}\n          showOther={false}\n          organization={this.props.organization}\n        />\n        <p>\n          {tct(\n            `For a complete list of client integrations, please see\n             [docLink:our in-depth documentation].`,\n            {docLink: <ExternalLink href=\"https://docs.sentry.io\" />}\n          )}\n        </p>\n      </div>\n    );\n  }\n}\n\nconst DsnValue = styled(p => (\n  <code {...p}>\n    <AutoSelectText>{p.children}</AutoSelectText>\n  </code>\n))`\n  overflow: hidden;\n`;\n\nconst DsnInfo = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst DsnContainer = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(1.5)} ${space(2)};\n  align-items: center;\n  margin-bottom: ${space(2)};\n`;\n\nexport default withOrganization(ProjectInstallOverview);\n"],"names":["findLastIndex","replaceRouterParams","recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","slice","baseRoute","search","hash","fullRoute","join","browserHistory","AsyncComponent","AutoSelectText","Button","ExternalLink","PlatformPicker","SentryDocumentTitle","t","tct","space","withOrganization","SettingsPageHeader","TextBlock","ProjectInstallOverview","platform","orgId","projectId","props","installUrl","isGettingStarted","push","setState","state","showDsn","window","href","getEndpoints","render","keyList","issueStreamLink","dsn","public","link","toggleDsn","redirectToDocs","organization","docLink","DsnValue","p","children","DsnInfo","DsnContainer"],"sourceRoot":""}