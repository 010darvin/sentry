{"version":3,"file":"chunks/app_views_settings_project_projectUserFeedback_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/userFeedback.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectUserFeedback.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/user-feedback/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Settings',\n    fields: [\n      {\n        name: 'feedback:branding',\n        type: 'boolean',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Show Sentry Branding',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Show \"powered by Sentry within the feedback dialog. We appreciate you helping get the word out about Sentry! <3',\n        getData: data => ({options: data}),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport Access from 'sentry/components/acl/access';\nimport Button from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport formGroups from 'sentry/data/forms/userFeedback';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\ntype Props = RouteComponentProps<RouteParams, {}>;\n\nclass ProjectUserFeedbackSettings extends AsyncView<Props> {\n  submitTimeout: number | undefined = undefined;\n\n  componentDidMount() {\n    window.sentryEmbedCallback = function (embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function (_body) {\n        this._submitInProgress = true;\n        window.setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n  }\n\n  componentWillUnmount() {\n    window.sentryEmbedCallback = null;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [\n      ['keyList', `/projects/${orgId}/${projectId}/keys/`],\n      ['project', `/projects/${orgId}/${projectId}/`],\n    ];\n  }\n\n  getTitle(): string {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('User Feedback'), projectId, false);\n  }\n\n  handleClick = () => {\n    Sentry.showReportDialog({\n      // should never make it to the Sentry API, but just in case, use throwaway id\n      eventId: '00000000000000000000000000000000',\n    });\n  };\n\n  renderBody() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('User Feedback')} />\n        <TextBlock>\n          {t(\n            `Don't rely on stack traces and graphs alone to understand\n            the cause and impact of errors. Enable User Feedback to collect\n            your users' comments when they encounter a crash or bug.`\n          )}\n        </TextBlock>\n        <TextBlock>\n          {t(\n            `When configured, your users will be presented with a dialog prompting\n            them for additional information. That information will get attached to\n            the issue in Sentry.`\n          )}\n        </TextBlock>\n        <ButtonList>\n          <Button external href=\"https://docs.sentry.io/product/user-feedback/\">\n            {t('Read the docs')}\n          </Button>\n          <Button priority=\"primary\" onClick={this.handleClick}>\n            {t('Open the report dialog')}\n          </Button>\n        </ButtonList>\n\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint={`/projects/${orgId}/${projectId}/`}\n          initialData={this.state.project.options}\n        >\n          <Access access={['project:write']}>\n            {({hasAccess}) => <JsonForm disabled={!hasAccess} forms={formGroups} />}\n          </Access>\n        </Form>\n      </div>\n    );\n  }\n}\n\nconst ButtonList = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  margin-bottom: ${space(2)};\n`;\n\nexport default ProjectUserFeedbackSettings;\n"],"names":["route","formGroups","title","fields","name","type","label","placeholder","help","getData","data","options","routeTitleGen","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncComponent","SentryDocumentTitle","AsyncView","getTitle","render","renderComponent","Sentry","Access","Button","Form","JsonForm","t","space","SettingsPageHeader","TextBlock","ProjectUserFeedbackSettings","undefined","showReportDialog","eventId","componentDidMount","window","sentryEmbedCallback","embed","submit","_body","_submitInProgress","setTimeout","onSuccess","componentWillUnmount","getEndpoints","orgId","projectId","props","params","renderBody","handleClick","state","project","hasAccess","ButtonList"],"sourceRoot":""}