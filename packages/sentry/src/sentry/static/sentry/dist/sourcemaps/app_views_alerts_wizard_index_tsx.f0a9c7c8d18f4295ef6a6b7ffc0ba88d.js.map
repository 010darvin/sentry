{"version":3,"file":"chunks/app_views_alerts_wizard_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/createAlertButton.tsx","webpack:///./app/views/alerts/builder/builderBreadCrumbs.tsx","webpack:///./app/views/alerts/rules/metric/presets.tsx","webpack:///./app/views/alerts/rules/metric/types.tsx","webpack:///./app/views/alerts/types.tsx","webpack:///./app/views/alerts/wizard/index.tsx","webpack:///./app/views/alerts/wizard/options.tsx","webpack:///./app/views/alerts/wizard/panelContent.tsx","webpack:///./app/views/alerts/wizard/radioPanelGroup.tsx"],"sourcesContent":["// eslint-disable-next-line no-restricted-imports\nimport {withRouter, WithRouterProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {navigateTo} from 'sentry/actionCreators/navigation';\nimport Access from 'sentry/components/acl/access';\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport Link from 'sentry/components/links/link';\nimport {IconSiren} from 'sentry/icons';\nimport type {SVGIconProps} from 'sentry/icons/svgIcon';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization, Project} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport useApi from 'sentry/utils/useApi';\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardRuleTemplates,\n  DEFAULT_WIZARD_TEMPLATE,\n} from 'sentry/views/alerts/wizard/options';\n\nexport type CreateAlertFromViewButtonProps = ButtonProps & {\n  /**\n   * Discover query used to create the alert\n   */\n  eventView: EventView;\n  organization: Organization;\n  projects: Project[];\n  alertType?: AlertType;\n  className?: string;\n  /**\n   * Passed in value to override any metrics decision and switch back to transactions dataset.\n   * We currently do a few checks on metrics data on performance pages and this passes the decision onward to alerts.\n   */\n  disableMetricDataset?: boolean;\n  /**\n   * Called when the user is redirected to the alert builder\n   */\n  onClick?: () => void;\n\n  referrer?: string;\n};\n\n/**\n * Provide a button that can create an alert from an event view.\n * Emits incompatible query issues on click\n */\nfunction CreateAlertFromViewButton({\n  projects,\n  eventView,\n  organization,\n  referrer,\n  onClick,\n  alertType,\n  disableMetricDataset,\n  ...buttonProps\n}: CreateAlertFromViewButtonProps) {\n  const project = projects.find(p => p.id === `${eventView.project[0]}`);\n  const queryParams = eventView.generateQueryStringObject();\n  if (queryParams.query?.includes(`project:${project?.slug}`)) {\n    queryParams.query = (queryParams.query as string).replace(\n      `project:${project?.slug}`,\n      ''\n    );\n  }\n\n  const alertTemplate = alertType\n    ? AlertWizardRuleTemplates[alertType]\n    : DEFAULT_WIZARD_TEMPLATE;\n\n  const to = {\n    pathname: `/organizations/${organization.slug}/alerts/new/metric/`,\n    query: {\n      ...queryParams,\n      createFromDiscover: true,\n      disableMetricDataset,\n      referrer,\n      ...alertTemplate,\n      project: project?.slug,\n      aggregate: queryParams.yAxis ?? alertTemplate.aggregate,\n    },\n  };\n\n  const handleClick = () => {\n    onClick?.();\n  };\n\n  return (\n    <CreateAlertButton\n      organization={organization}\n      onClick={handleClick}\n      to={to}\n      aria-label={t('Create Alert')}\n      {...buttonProps}\n    />\n  );\n}\n\ntype CreateAlertButtonProps = {\n  organization: Organization;\n  alertOption?: keyof typeof AlertWizardAlertNames;\n  hideIcon?: boolean;\n  iconProps?: SVGIconProps;\n  /**\n   * Callback when the button is clicked.\n   * This is different from `onClick` which always overrides the default\n   * behavior when the button was clicked.\n   */\n  onEnter?: () => void;\n  projectSlug?: string;\n  referrer?: string;\n  showPermissionGuide?: boolean;\n} & WithRouterProps &\n  ButtonProps;\n\nconst CreateAlertButton = withRouter(\n  ({\n    organization,\n    projectSlug,\n    iconProps,\n    referrer,\n    router,\n    hideIcon,\n    showPermissionGuide,\n    alertOption,\n    onEnter,\n    ...buttonProps\n  }: CreateAlertButtonProps) => {\n    const api = useApi();\n    const createAlertUrl = (providedProj: string) => {\n      const alertsBaseUrl = `/organizations/${organization.slug}/alerts`;\n      const alertsArgs = [\n        `${referrer ? `referrer=${referrer}` : ''}`,\n        `${\n          providedProj && providedProj !== ':projectId' ? `project=${providedProj}` : ''\n        }`,\n        alertOption ? `alert_option=${alertOption}` : '',\n      ].filter(item => item !== '');\n\n      return `${alertsBaseUrl}/wizard/${alertsArgs.length ? '?' : ''}${alertsArgs.join(\n        '&'\n      )}`;\n    };\n\n    function handleClickWithoutProject(event: React.MouseEvent) {\n      event.preventDefault();\n      onEnter?.();\n\n      navigateTo(createAlertUrl(':projectId'), router);\n    }\n\n    async function enableAlertsMemberWrite() {\n      const settingsEndpoint = `/organizations/${organization.slug}/`;\n      addLoadingMessage();\n      try {\n        await api.requestPromise(settingsEndpoint, {\n          method: 'PUT',\n          data: {\n            alertsMemberWrite: true,\n          },\n        });\n        addSuccessMessage(t('Successfully updated organization settings'));\n      } catch (err) {\n        addErrorMessage(t('Unable to update organization settings'));\n      }\n    }\n\n    const permissionTooltipText = tct(\n      'Ask your organization owner or manager to [settingsLink:enable alerts access] for you.',\n      {settingsLink: <Link to={`/settings/${organization.slug}`} />}\n    );\n\n    const renderButton = (hasAccess: boolean) => (\n      <Button\n        disabled={!hasAccess}\n        title={!hasAccess ? permissionTooltipText : undefined}\n        icon={!hideIcon && <IconSiren {...iconProps} />}\n        to={projectSlug ? createAlertUrl(projectSlug) : undefined}\n        tooltipProps={{\n          isHoverable: true,\n          position: 'top',\n          overlayStyle: {\n            maxWidth: '270px',\n          },\n        }}\n        onClick={projectSlug ? onEnter : handleClickWithoutProject}\n        {...buttonProps}\n      >\n        {buttonProps.children ?? t('Create Alert')}\n      </Button>\n    );\n\n    const showGuide = !organization.alertsMemberWrite && !!showPermissionGuide;\n\n    return (\n      <Access organization={organization} access={['alerts:write']}>\n        {({hasAccess}) =>\n          showGuide ? (\n            <Access organization={organization} access={['org:write']}>\n              {({hasAccess: isOrgAdmin}) => (\n                <GuideAnchor\n                  target={isOrgAdmin ? 'alerts_write_owner' : 'alerts_write_member'}\n                  onFinish={isOrgAdmin ? enableAlertsMemberWrite : undefined}\n                >\n                  {renderButton(hasAccess)}\n                </GuideAnchor>\n              )}\n            </Access>\n          ) : (\n            renderButton(hasAccess)\n          )\n        }\n      </Access>\n    );\n  }\n);\n\nexport {CreateAlertFromViewButton};\nexport default CreateAlertButton;\n","import styled from '@emotion/styled';\nimport type {Location} from 'history';\n\nimport Breadcrumbs, {Crumb, CrumbDropdown} from 'sentry/components/breadcrumbs';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport type {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ninterface Props {\n  location: Location;\n  organization: Organization;\n  projectSlug: string;\n  routes: RouteWithName[];\n  title: string;\n  alertName?: string;\n  alertType?: string;\n  canChangeProject?: boolean;\n}\n\nfunction BuilderBreadCrumbs({title, alertName, projectSlug, organization}: Props) {\n  const crumbs: (Crumb | CrumbDropdown)[] = [\n    {\n      to: `/organizations/${organization.slug}/alerts/rules/`,\n      label: t('Alerts'),\n      preservePageFilters: true,\n    },\n    {\n      label: title,\n      ...(alertName\n        ? {\n            to: `/organizations/${organization.slug}/alerts/${projectSlug}/wizard`,\n            preservePageFilters: true,\n          }\n        : {}),\n    },\n  ];\n  if (alertName) {\n    crumbs.push({label: alertName});\n  }\n\n  return <StyledBreadcrumbs crumbs={crumbs} />;\n}\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  font-size: 18px;\n  margin-bottom: ${space(3)};\n`;\n\nexport default BuilderBreadCrumbs;\n","import {Client} from 'sentry/api';\nimport {IconGraph} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {uniqueId} from 'sentry/utils/guid';\n\nimport {AlertType} from '../../wizard/options';\n\nimport {\n  ActionType,\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  Dataset,\n  EventTypes,\n  TargetType,\n  Trigger,\n} from './types';\n\nexport type PresetContext = {\n  aggregate: string;\n  comparisonType: AlertRuleComparisonType;\n  dataset: Dataset;\n  eventTypes: EventTypes[];\n  name: string;\n  thresholdType: AlertRuleThresholdType;\n\n  triggers: Trigger[];\n  comparisonDelta?: number;\n  query?: string;\n  timeWindow?: number;\n};\nexport type Preset = {\n  Icon: typeof IconGraph;\n  // Will be shown on the corresponding alert type in the wizard.\n  alertType: AlertType;\n  description: string;\n  id: string;\n  makeContext(\n    client: Client,\n    project: Project,\n    organization: Organization\n  ): Promise<PresetContext>;\n  makeUnqueriedContext(project: Project, organization: Organization): PresetContext;\n  title: string;\n};\n\nasync function getHighestVolumeTransaction(\n  client: Client,\n  organizationSlug: string,\n  projectId: string\n): Promise<[string, number] | null> {\n  const result = await client.requestPromise(\n    `/organizations/${organizationSlug}/events/`,\n    {\n      method: 'GET',\n      data: {\n        statsPeriod: '7d',\n        project: projectId,\n        field: ['count()', 'transaction'],\n        sort: '-count',\n        referrer: 'alert.presets.highest-volume',\n        query: 'event.type:transaction',\n        per_page: 1,\n      },\n    }\n  );\n  const transaction = result.data[0];\n  if (transaction) {\n    return [transaction.transaction, transaction['count()']];\n  }\n  return null;\n}\n\nfunction makeTeamCriticalAlert(project: Project, threshold: number = 200) {\n  return {\n    label: AlertRuleTriggerType.CRITICAL,\n    alertThreshold: threshold,\n    actions: project.teams.slice(0, 4).map(team => ({\n      type: ActionType.EMAIL,\n      targetType: TargetType.TEAM,\n      targetIdentifier: team.id,\n      unsavedDateCreated: new Date().toISOString(),\n      inputChannelId: null,\n      options: null,\n      unsavedId: uniqueId(),\n    })),\n  };\n}\nfunction makeTeamWarningAlert(threshold: number = 100) {\n  return {\n    label: AlertRuleTriggerType.WARNING,\n    alertThreshold: threshold,\n    actions: [],\n  };\n}\n\nexport const PRESET_AGGREGATES: readonly Preset[] = [\n  {\n    id: 'p95-highest-volume',\n    title: t('Slow transactions'),\n    description: 'Get notified when important transactions are slower on average',\n    Icon: IconGraph,\n    alertType: 'trans_duration',\n    makeUnqueriedContext(project, _) {\n      return {\n        name: t('p95 Alert for %s', [project.slug]),\n        aggregate: 'p95(transaction.duration)',\n        dataset: Dataset.TRANSACTIONS,\n        eventTypes: [EventTypes.TRANSACTION],\n        timeWindow: 60,\n        comparisonDelta: 1440,\n        comparisonType: AlertRuleComparisonType.CHANGE,\n        thresholdType: AlertRuleThresholdType.ABOVE,\n        triggers: [makeTeamCriticalAlert(project), makeTeamWarningAlert()],\n      };\n    },\n    async makeContext(client, project, organization) {\n      const transaction = (\n        await getHighestVolumeTransaction(client, organization.slug, project.id)\n      )?.[0];\n      return {\n        ...this.makeUnqueriedContext(project, organization),\n        query: 'transaction:' + transaction,\n      };\n    },\n  },\n  {\n    id: 'throughput-highest-volume',\n    title: t('Throttled throughput'),\n    description: 'Send an alert when transaction throughput drops significantly',\n    Icon: IconGraph,\n    alertType: 'throughput',\n    makeUnqueriedContext(project, _) {\n      return {\n        name: t('Throughput Alert for %s', [project.slug]),\n        aggregate: 'count()',\n        dataset: Dataset.TRANSACTIONS,\n        eventTypes: [EventTypes.TRANSACTION],\n        timeWindow: 30,\n        comparisonDelta: 24 * 60 * 7,\n        comparisonType: AlertRuleComparisonType.CHANGE,\n        thresholdType: AlertRuleThresholdType.BELOW,\n        triggers: [makeTeamCriticalAlert(project, 500), makeTeamWarningAlert(300)],\n      };\n    },\n    async makeContext(client, project, organization) {\n      const transaction = (\n        await getHighestVolumeTransaction(client, organization.slug, project.id)\n      )?.[0];\n      return {\n        ...this.makeUnqueriedContext(project, organization),\n        query: 'transaction:' + transaction,\n      };\n    },\n  },\n  {\n    id: 'apdex-highest-volume',\n    title: t('Apdex Score'),\n    description:\n      'Learn when the ratio of satisfactory, tolerable, and frustrated requests drop',\n    Icon: IconGraph,\n    alertType: 'apdex',\n    makeUnqueriedContext(project, _) {\n      return {\n        name: t('Apdex regression for %s', [project.slug]),\n        aggregate: 'apdex(300)',\n        dataset: Dataset.TRANSACTIONS,\n        eventTypes: [EventTypes.TRANSACTION],\n        timeWindow: 30,\n        comparisonDelta: 24 * 60 * 7,\n        comparisonType: AlertRuleComparisonType.CHANGE,\n        thresholdType: AlertRuleThresholdType.BELOW,\n        triggers: [makeTeamCriticalAlert(project), makeTeamWarningAlert()],\n      };\n    },\n    async makeContext(client, project, organization) {\n      const transaction = (\n        await getHighestVolumeTransaction(client, organization.slug, project.id)\n      )?.[0];\n      return {\n        ...this.makeUnqueriedContext(project, organization),\n        query: 'transaction:' + transaction,\n      };\n    },\n  },\n] as const;\n","import {t} from 'sentry/locale';\nimport {MEPAlertsQueryType} from 'sentry/views/alerts/wizard/options';\nimport type {SchemaFormConfig} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\n\nimport type {Incident} from '../../types';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleTriggerType {\n  CRITICAL = 'critical',\n  WARNING = 'warning',\n  RESOLVE = 'resolve',\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n  PERCENT = 'percent',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  /** Also used for performance alerts **/\n  GENERIC_METRICS = 'generic_metrics',\n  SESSIONS = 'sessions',\n  /** Also used for crash free alerts */\n  METRICS = 'metrics',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: AlertRuleTriggerType;\n  // UnsavedTrigger can be a part of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedMetricRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n  queryType?: MEPAlertsQueryType | null;\n};\n\nexport interface SavedMetricRule extends UnsavedMetricRule {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  errors?: {detail: string}[];\n  /**\n   * Returned with the expand=latestIncident query parameter\n   */\n  latestIncident?: Incident | null;\n  originalAlertRuleId?: number | null;\n}\n\nexport type MetricRule = Partial<SavedMetricRule> & UnsavedMetricRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  // \\u200B is needed because Safari disregards autocomplete=\"off\". It's seeing \"Email\" and\n  // opening up the browser autocomplete for email. https://github.com/JedWatson/react-select/issues/3500\n  [ActionType.EMAIL]: t('Emai\\u200Bl'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   *  Could not fetch details from SentryApp. Show the rule but make it disabled.\n   */\n  disabled?: boolean;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import {User} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\ntype Data = [number, {count: number}[]][];\n\nexport enum AlertRuleType {\n  METRIC = 'metric',\n  ISSUE = 'issue',\n}\n\nexport type Incident = {\n  alertRule: MetricRule;\n  dateClosed: string | null;\n  dateCreated: string;\n  dateDetected: string;\n  dateStarted: string;\n  // Array of group ids\n  discoverQuery: string;\n  groups: string[];\n  hasSeen: boolean;\n  id: string;\n  identifier: string;\n  isSubscribed: boolean;\n  organizationId: string;\n  projects: string[];\n  // Array of slugs\n  seenBy: User[];\n  status: IncidentStatus;\n  statusMethod: IncidentStatusMethod;\n  title: string;\n  activities?: ActivityType[];\n};\n\nexport type IncidentStats = {\n  eventStats: {\n    data: Data;\n  };\n  totalEvents: number;\n  uniqueUsers: number;\n};\n\nexport type ActivityTypeDraft = {\n  comment: null | string;\n  dateCreated: string;\n  id: string;\n  incidentIdentifier: string;\n  type: IncidentActivityType;\n  user: User | null;\n};\n\nexport type ActivityType = ActivityTypeDraft & {\n  previousValue: string | null;\n  value: string | null;\n  eventStats?: {data: Data};\n};\n\nexport enum IncidentActivityType {\n  CREATED = 0,\n  DETECTED = 1,\n  STATUS_CHANGE = 2,\n  COMMENT = 3,\n  STARTED = 4,\n}\n\nexport enum IncidentStatus {\n  OPENED = 1,\n  CLOSED = 2,\n  WARNING = 10,\n  CRITICAL = 20,\n}\n\nexport enum IncidentStatusMethod {\n  MANUAL = 1,\n  RULE_UPDATED = 2,\n  RULE_TRIGGERED = 3,\n}\n\nexport enum AlertRuleStatus {\n  PENDING = 0,\n  SNAPSHOT = 4,\n  DISABLED = 5,\n}\n\nexport enum CombinedAlertType {\n  METRIC = 'alert_rule',\n  ISSUE = 'rule',\n}\n\nexport type CombinedMetricIssueAlerts = (IssueAlertRule | MetricRule) & {\n  type: CombinedAlertType;\n  latestIncident?: Incident | null;\n};\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Feature from 'sentry/components/acl/feature';\nimport FeatureDisabled from 'sentry/components/acl/featureDisabled';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {logExperiment} from 'sentry/utils/analytics';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withProjects from 'sentry/utils/withProjects';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport {Dataset} from 'sentry/views/alerts/rules/metric/types';\nimport {AlertRuleType} from 'sentry/views/alerts/types';\n\nimport {PRESET_AGGREGATES} from '../rules/metric/presets';\n\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardRuleTemplates,\n  getAlertWizardCategories,\n  WizardRuleTemplate,\n} from './options';\nimport {AlertWizardPanelContent} from './panelContent';\nimport RadioPanelGroup from './radioPanelGroup';\n\ntype RouteParams = {\n  orgId: string;\n  projectId?: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  projectId: string;\n  projects: Project[];\n};\n\ntype State = {\n  alertOption: AlertType;\n};\n\nconst DEFAULT_ALERT_OPTION = 'issues';\n\nclass AlertWizard extends Component<Props, State> {\n  state: State = {\n    alertOption:\n      this.props.location.query.alert_option in AlertWizardAlertNames\n        ? this.props.location.query.alert_option\n        : DEFAULT_ALERT_OPTION,\n  };\n\n  componentDidMount() {\n    // capture landing on the alert wizard page and viewing the issue alert by default\n    this.trackView();\n  }\n\n  trackView(alertType: AlertType = DEFAULT_ALERT_OPTION) {\n    const {organization} = this.props;\n    trackAdvancedAnalyticsEvent('alert_wizard.option_viewed', {\n      organization,\n      alert_type: alertType,\n    });\n  }\n\n  handleChangeAlertOption = (alertOption: AlertType) => {\n    this.setState({alertOption});\n    this.trackView(alertOption);\n  };\n\n  renderCreateAlertButton() {\n    const {organization, location, params, projectId: _projectId} = this.props;\n    const {alertOption} = this.state;\n    const projectId = params.projectId ?? _projectId;\n    const project = this.props.projects.find(p => p.slug === projectId);\n    let metricRuleTemplate: Readonly<WizardRuleTemplate> | undefined =\n      AlertWizardRuleTemplates[alertOption];\n    const isMetricAlert = !!metricRuleTemplate;\n    const isTransactionDataset = metricRuleTemplate?.dataset === Dataset.TRANSACTIONS;\n\n    if (\n      organization.features.includes('alert-crash-free-metrics') &&\n      metricRuleTemplate?.dataset === Dataset.SESSIONS\n    ) {\n      metricRuleTemplate = {...metricRuleTemplate, dataset: Dataset.METRICS};\n    }\n\n    const supportedPreset = PRESET_AGGREGATES.filter(\n      agg => agg.alertType === alertOption\n    )[0];\n    const to = {\n      pathname: `/organizations/${organization.slug}/alerts/new/${\n        isMetricAlert ? AlertRuleType.METRIC : AlertRuleType.ISSUE\n      }/`,\n      query: {\n        ...(metricRuleTemplate ? metricRuleTemplate : {}),\n        project: projectId,\n        referrer: location?.query?.referrer,\n      },\n    };\n\n    const renderNoAccess = p => (\n      <Hovercard\n        body={\n          <FeatureDisabled\n            features={p.features}\n            hideHelpToggle\n            featureName={t('Metric Alerts')}\n          />\n        }\n      >\n        {p.children(p)}\n      </Hovercard>\n    );\n\n    let showUseTemplateBtn: boolean =\n      !!project?.firstTransactionEvent &&\n      isMetricAlert &&\n      metricRuleTemplate?.dataset === Dataset.TRANSACTIONS &&\n      !!supportedPreset;\n    if (showUseTemplateBtn) {\n      logExperiment({\n        key: 'MetricAlertPresetExperiment',\n        organization,\n      });\n    }\n    showUseTemplateBtn =\n      showUseTemplateBtn && !!organization.experiments.MetricAlertPresetExperiment;\n\n    return (\n      <Feature\n        features={\n          isTransactionDataset\n            ? ['organizations:incidents', 'organizations:performance-view']\n            : isMetricAlert\n            ? ['organizations:incidents']\n            : []\n        }\n        requireAll\n        organization={organization}\n        hookName=\"feature-disabled:alert-wizard-performance\"\n        renderDisabled={renderNoAccess}\n      >\n        {({hasFeature}) => (\n          <WizardButtonContainer\n            onClick={() =>\n              trackAdvancedAnalyticsEvent('alert_wizard.option_selected', {\n                organization,\n                alert_type: alertOption,\n              })\n            }\n          >\n            {showUseTemplateBtn && (\n              <CreateAlertButton\n                organization={organization}\n                projectSlug={projectId}\n                disabled={!hasFeature}\n                priority=\"default\"\n                to={{\n                  pathname: to.pathname,\n                  query: {\n                    ...to.query,\n                    preset: supportedPreset.id,\n                  },\n                }}\n                onEnter={() => {\n                  trackAdvancedAnalyticsEvent('growth.metric_alert_preset_use_template', {\n                    organization,\n                    preset: supportedPreset.id,\n                  });\n                }}\n                hideIcon\n              >\n                {t('Use Template')}\n              </CreateAlertButton>\n            )}\n            <CreateAlertButton\n              organization={organization}\n              projectSlug={projectId}\n              disabled={!hasFeature}\n              priority=\"primary\"\n              to={to}\n              hideIcon\n            >\n              {t('Set Conditions')}\n            </CreateAlertButton>\n          </WizardButtonContainer>\n        )}\n      </Feature>\n    );\n  }\n\n  render() {\n    const {organization, params, projectId: _projectId, routes, location} = this.props;\n    const {alertOption} = this.state;\n    const projectId = params.projectId ?? _projectId;\n    const title = t('Alert Creation Wizard');\n    const panelContent = AlertWizardPanelContent[alertOption];\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n\n        <Layout.Header>\n          <StyledHeaderContent>\n            <BuilderBreadCrumbs\n              organization={organization}\n              projectSlug={projectId}\n              title={t('Select Alert')}\n              routes={routes}\n              location={location}\n              canChangeProject\n            />\n            <Layout.Title>{t('Select Alert')}</Layout.Title>\n          </StyledHeaderContent>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <WizardBody>\n              <WizardOptions>\n                <CategoryTitle>{t('Errors')}</CategoryTitle>\n                {getAlertWizardCategories(organization).map(\n                  ({categoryHeading, options}, i) => (\n                    <OptionsWrapper key={categoryHeading}>\n                      {i > 0 && <CategoryTitle>{categoryHeading} </CategoryTitle>}\n                      <RadioPanelGroup\n                        choices={options.map(alertType => {\n                          return [alertType, AlertWizardAlertNames[alertType]];\n                        })}\n                        onChange={this.handleChangeAlertOption}\n                        value={alertOption}\n                        label=\"alert-option\"\n                      />\n                    </OptionsWrapper>\n                  )\n                )}\n              </WizardOptions>\n              <WizardPanel visible={!!panelContent && !!alertOption}>\n                <WizardPanelBody>\n                  <div>\n                    <PanelHeader>{AlertWizardAlertNames[alertOption]}</PanelHeader>\n                    <PanelBody withPadding>\n                      <PanelDescription>\n                        {panelContent.description}{' '}\n                        {panelContent.docsLink && (\n                          <ExternalLink href={panelContent.docsLink}>\n                            {t('Learn more')}\n                          </ExternalLink>\n                        )}\n                      </PanelDescription>\n                      <WizardImage src={panelContent.illustration} />\n                      <ExampleHeader>{t('Examples')}</ExampleHeader>\n                      <ExampleList symbol=\"bullet\">\n                        {panelContent.examples.map((example, i) => (\n                          <ExampleItem key={i}>{example}</ExampleItem>\n                        ))}\n                      </ExampleList>\n                    </PanelBody>\n                  </div>\n                  <WizardFooter>{this.renderCreateAlertButton()}</WizardFooter>\n                </WizardPanelBody>\n              </WizardPanel>\n            </WizardBody>\n          </Layout.Main>\n        </Layout.Body>\n      </Fragment>\n    );\n  }\n}\n\nconst StyledHeaderContent = styled(Layout.HeaderContent)`\n  overflow: visible;\n`;\n\nconst CategoryTitle = styled('h2')`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)} !important;\n`;\n\nconst WizardBody = styled('div')`\n  display: flex;\n  padding-top: ${space(1)};\n`;\n\nconst WizardOptions = styled('div')`\n  flex: 3;\n  margin-right: ${space(3)};\n  padding-right: ${space(3)};\n  max-width: 300px;\n`;\n\nconst WizardImage = styled('img')`\n  max-height: 300px;\n`;\n\nconst WizardPanel = styled(Panel)<{visible?: boolean}>`\n  max-width: 700px;\n  position: sticky;\n  top: 20px;\n  flex: 5;\n  display: flex;\n  ${p => !p.visible && 'visibility: hidden'};\n  flex-direction: column;\n  align-items: start;\n  align-self: flex-start;\n  ${p => p.visible && 'animation: 0.6s pop ease forwards'};\n\n  @keyframes pop {\n    0% {\n      transform: translateY(30px);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n`;\n\nconst ExampleList = styled(List)`\n  margin-bottom: ${space(2)} !important;\n`;\n\nconst WizardPanelBody = styled(PanelBody)`\n  flex: 1;\n  min-width: 100%;\n`;\n\nconst PanelDescription = styled('p')`\n  margin-bottom: ${space(2)};\n`;\n\nconst ExampleHeader = styled('div')`\n  margin: 0 0 ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst ExampleItem = styled(ListItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst OptionsWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst WizardFooter = styled('div')`\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1.5)} ${space(1.5)} ${space(1.5)} ${space(1.5)};\n`;\n\nconst WizardButtonContainer = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n  a:not(:last-child) {\n    margin-right: ${space(1)};\n  }\n`;\n\nexport default withProjects(AlertWizard);\n","import {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {\n  Dataset,\n  EventTypes,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'custom'\n  | 'crash_free_sessions'\n  | 'crash_free_users';\n\nexport enum MEPAlertsQueryType {\n  ERROR = 0,\n  PERFORMANCE = 1,\n  CRASH_RATE = 2,\n}\n\nexport enum MEPAlertsDataset {\n  DISCOVER = 'discover',\n  METRICS = 'metrics',\n  METRICS_ENHANCED = 'metricsEnhanced',\n}\n\nexport type MetricAlertType = Exclude<AlertType, 'issues'>;\n\nexport const DatasetMEPAlertQueryTypes: Record<Dataset, MEPAlertsQueryType> = {\n  [Dataset.ERRORS]: MEPAlertsQueryType.ERROR,\n  [Dataset.TRANSACTIONS]: MEPAlertsQueryType.PERFORMANCE,\n  [Dataset.GENERIC_METRICS]: MEPAlertsQueryType.PERFORMANCE,\n  [Dataset.METRICS]: MEPAlertsQueryType.CRASH_RATE,\n  [Dataset.SESSIONS]: MEPAlertsQueryType.CRASH_RATE,\n};\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  custom: t('Custom Metric'),\n  crash_free_sessions: t('Crash Free Session Rate'),\n  crash_free_users: t('Crash Free User Rate'),\n};\n\ntype AlertWizardCategory = {\n  categoryHeading: string;\n  options: AlertType[];\n};\nexport const getAlertWizardCategories = (org: Organization): AlertWizardCategory[] => [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  ...(org.features.includes('crash-rate-alerts')\n    ? [\n        {\n          categoryHeading: t('Sessions'),\n          options: ['crash_free_sessions', 'crash_free_users'] as AlertType[],\n        },\n      ]\n    : []),\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n    ],\n  },\n  {\n    categoryHeading: t('Other'),\n    options: ['custom'],\n  },\n];\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  MetricAlertType,\n  Readonly<WizardRuleTemplate>\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(user)',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  crash_free_sessions: {\n    aggregate: SessionsAggregate.CRASH_FREE_SESSIONS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.SESSION,\n  },\n  crash_free_users: {\n    aggregate: SessionsAggregate.CRASH_FREE_USERS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.USER,\n  },\n};\n\nexport const DEFAULT_WIZARD_TEMPLATE = AlertWizardRuleTemplates.num_errors;\n\nexport const hidePrimarySelectorSet = new Set<AlertType>([\n  'num_errors',\n  'users_experiencing_errors',\n  'throughput',\n  'apdex',\n  'failure_rate',\n  'crash_free_sessions',\n  'crash_free_users',\n]);\n\nexport const hideParameterSelectorSet = new Set<AlertType>([\n  'trans_duration',\n  'lcp',\n  'fid',\n  'cls',\n]);\n\nexport function getMEPAlertsDataset(\n  dataset: Dataset,\n  newAlert: boolean\n): MEPAlertsDataset {\n  // Dataset.ERRORS overrides all cases\n  if (dataset === Dataset.ERRORS) {\n    return MEPAlertsDataset.DISCOVER;\n  }\n\n  if (newAlert) {\n    return MEPAlertsDataset.METRICS_ENHANCED;\n  }\n\n  if (dataset === Dataset.GENERIC_METRICS) {\n    return MEPAlertsDataset.METRICS;\n  }\n\n  return MEPAlertsDataset.DISCOVER;\n}\n","import diagramApdex from 'sentry-images/spot/alerts-wizard-apdex.svg';\nimport diagramCLS from 'sentry-images/spot/alerts-wizard-cls.svg';\nimport diagramCrashFreeSessions from 'sentry-images/spot/alerts-wizard-crash-free-sessions.svg';\nimport diagramCrashFreeUsers from 'sentry-images/spot/alerts-wizard-crash-free-users.svg';\nimport diagramCustom from 'sentry-images/spot/alerts-wizard-custom.svg';\nimport diagramErrors from 'sentry-images/spot/alerts-wizard-errors.svg';\nimport diagramFailureRate from 'sentry-images/spot/alerts-wizard-failure-rate.svg';\nimport diagramFID from 'sentry-images/spot/alerts-wizard-fid.svg';\nimport diagramIssues from 'sentry-images/spot/alerts-wizard-issues.svg';\nimport diagramLCP from 'sentry-images/spot/alerts-wizard-lcp.svg';\nimport diagramThroughput from 'sentry-images/spot/alerts-wizard-throughput.svg';\nimport diagramTransactionDuration from 'sentry-images/spot/alerts-wizard-transaction-duration.svg';\nimport diagramUsers from 'sentry-images/spot/alerts-wizard-users-experiencing-errors.svg';\n\nimport {t} from 'sentry/locale';\n\nimport {AlertType} from './options';\n\ntype PanelContent = {\n  description: string;\n  examples: string[];\n  docsLink?: string;\n  illustration?: string;\n};\n\nexport const AlertWizardPanelContent: Record<AlertType, PanelContent> = {\n  issues: {\n    description: t(\n      'Issues are groups of errors that have a similar stacktrace. Set an alert for new issues, when an issue changes state, frequency of errors, or users affected by an issue.'\n    ),\n    examples: [\n      t(\"When the triggering event's level is fatal.\"),\n      t('When an issue was seen 100 times in the last 2 days.'),\n      t(\n        'Create a JIRA ticket when an issue changes state from resolved to unresolved and is unassigned.'\n      ),\n    ],\n    illustration: diagramIssues,\n  },\n  num_errors: {\n    description: t(\n      'Alert when the number of errors in a project matching your filters crosses a threshold. This is useful for monitoring the overall level or errors in your project or errors occurring in specific parts of your app.'\n    ),\n    examples: [\n      t('When the signup page has more than 10k errors in 5 minutes.'),\n      t('When there are more than 500k errors in 10 minutes from a specific file.'),\n    ],\n    illustration: diagramErrors,\n  },\n  users_experiencing_errors: {\n    description: t(\n      'Alert when the number of users affected by errors in your project crosses a threshold.'\n    ),\n    examples: [\n      t('When 100k users experience an error in 1 hour.'),\n      t('When 100 users experience a problem on the Checkout page.'),\n    ],\n    illustration: diagramUsers,\n  },\n  throughput: {\n    description: t(\n      'Throughput is the total number of transactions in a project and you can alert when it reaches a threshold within a period of time.'\n    ),\n    examples: [\n      t('When number of transactions on a key page exceeds 100k per minute.'),\n      t('When number of transactions drops below a threshold.'),\n    ],\n    illustration: diagramThroughput,\n  },\n  trans_duration: {\n    description: t(\n      'Monitor how long it takes for transactions to complete. Use flexible aggregates like percentiles, averages, and min/max.'\n    ),\n    examples: [\n      t('When any transaction is slower than 3 seconds.'),\n      t('When the 75th percentile response time is higher than 250 milliseconds.'),\n    ],\n    illustration: diagramTransactionDuration,\n  },\n  apdex: {\n    description: t(\n      'Apdex is a metric used to track and measure user satisfaction based on your application response times. The Apdex score provides the ratio of satisfactory, tolerable, and frustrated requests in a specific transaction or endpoint.'\n    ),\n    examples: [t('When apdex is below 300.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#apdex',\n    illustration: diagramApdex,\n  },\n  failure_rate: {\n    description: t(\n      'Failure rate is the percentage of unsuccessful transactions. Sentry treats transactions with a status other than “ok,” “canceled,” and “unknown” as failures.'\n    ),\n    examples: [t('When the failure rate for an important endpoint reaches 10%.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#failure-rate',\n    illustration: diagramFailureRate,\n  },\n  lcp: {\n    description: t(\n      'Largest Contentful Paint (LCP) measures loading performance. It marks the point when the largest image or text block is visible within the viewport. A fast LCP helps reassure the user that the page is useful, and so we recommend an LCP of less than 2.5 seconds.'\n    ),\n    examples: [\n      t('When the 75th percentile LCP of your homepage is longer than 2.5 seconds.'),\n    ],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramLCP,\n  },\n  fid: {\n    description: t(\n      'First Input Delay (FID) measures interactivity as the response time when the user tries to interact with the viewport. A low FID helps ensure that a page is useful, and we recommend a FID of less than 100 milliseconds.'\n    ),\n    examples: [t('When the average FID of a page is longer than 4 seconds.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramFID,\n  },\n  cls: {\n    description: t(\n      'Cumulative Layout Shift (CLS) measures visual stability by quantifying unexpected layout shifts that occur during the entire lifespan of the page. A CLS of less than 0.1 is a good user experience, while anything greater than 0.25 is poor.'\n    ),\n    examples: [t('When the CLS of a page is more than 0.5.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramCLS,\n  },\n  custom: {\n    description: t(\n      'Alert on metrics which are not listed above, such as first paint (FP), first contentful paint (FCP), and time to first byte (TTFB).'\n    ),\n    examples: [\n      t('When the 95th percentile FP of a page is longer than 250 milliseconds.'),\n      t('When the average TTFB of a page is longer than 600 millliseconds.'),\n    ],\n    illustration: diagramCustom,\n  },\n  crash_free_sessions: {\n    description: t(\n      'A session begins when a user starts the application and ends when it’s closed or sent to the background. A crash is when a session ends due to an error and this type of alert lets you monitor when those crashed sessions exceed a threshold. This lets you get a better picture of the health of your app.'\n    ),\n    examples: [\n      t('When the Crash Free Rate is below 98%, send a Slack notification to the team.'),\n    ],\n    illustration: diagramCrashFreeSessions,\n  },\n  crash_free_users: {\n    description: t(\n      'Crash Free Users is the percentage of distinct users that haven’t experienced a crash and so this type of alert tells you when the overall user experience dips below a certain unacceptable threshold.'\n    ),\n    examples: [\n      t('When the Crash Free Rate is below 97%, send an email notification to yourself.'),\n    ],\n    illustration: diagramCrashFreeUsers,\n  },\n};\n","import styled from '@emotion/styled';\n\nimport Radio from 'sentry/components/radio';\nimport space from 'sentry/styles/space';\n\ntype RadioPanelGroupProps<C extends string> = {\n  /**\n   * An array of [id, name]\n   */\n  choices: [C, React.ReactNode, React.ReactNode?][];\n  label: string;\n  onChange: (id: C, e: React.FormEvent<HTMLInputElement>) => void;\n  value: string | null;\n};\n\ntype Props<C extends string> = RadioPanelGroupProps<C> &\n  Omit<React.HTMLAttributes<HTMLDivElement>, keyof RadioPanelGroupProps<C>>;\n\nconst RadioPanelGroup = <C extends string>({\n  value,\n  choices,\n  label,\n  onChange,\n  ...props\n}: Props<C>) => (\n  <Container {...props} role=\"radiogroup\" aria-labelledby={label}>\n    {(choices || []).map(([id, name, extraContent], index) => (\n      <RadioPanel key={index}>\n        <RadioLineItem role=\"radio\" index={index} aria-checked={value === id}>\n          <Radio\n            radioSize=\"small\"\n            aria-label={id}\n            checked={value === id}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => onChange(id, e)}\n          />\n          <div>{name}</div>\n          {extraContent}\n        </RadioLineItem>\n      </RadioPanel>\n    ))}\n  </Container>\n);\n\nexport default RadioPanelGroup;\n\nconst Container = styled('div')`\n  display: grid;\n  gap: ${space(1)};\n  grid-auto-flow: row;\n  grid-auto-rows: max-content;\n  grid-auto-columns: auto;\n`;\n\nconst RadioLineItem = styled('label')<{\n  index: number;\n}>`\n  display: grid;\n  gap: ${space(0.25)} ${space(1)};\n  grid-template-columns: max-content auto max-content;\n  align-items: center;\n  cursor: pointer;\n  outline: none;\n  font-weight: normal;\n  margin: 0;\n  color: ${p => p.theme.subText};\n  transition: color 0.3s ease-in;\n  padding: 0;\n  position: relative;\n\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.textColor};\n  }\n\n  svg {\n    display: none;\n    opacity: 0;\n  }\n\n  &[aria-checked='true'] {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst RadioPanel = styled('div')`\n  margin: 0;\n`;\n"],"names":["withRouter","addErrorMessage","addLoadingMessage","addSuccessMessage","navigateTo","Access","GuideAnchor","Button","Link","IconSiren","t","tct","useApi","AlertWizardRuleTemplates","DEFAULT_WIZARD_TEMPLATE","CreateAlertFromViewButton","projects","eventView","organization","referrer","onClick","alertType","disableMetricDataset","buttonProps","project","find","p","id","queryParams","generateQueryStringObject","query","includes","slug","replace","alertTemplate","to","pathname","createFromDiscover","aggregate","yAxis","handleClick","CreateAlertButton","projectSlug","iconProps","router","hideIcon","showPermissionGuide","alertOption","onEnter","api","createAlertUrl","providedProj","alertsBaseUrl","alertsArgs","filter","item","length","join","handleClickWithoutProject","event","preventDefault","enableAlertsMemberWrite","settingsEndpoint","requestPromise","method","data","alertsMemberWrite","err","permissionTooltipText","settingsLink","renderButton","hasAccess","undefined","isHoverable","position","overlayStyle","maxWidth","children","showGuide","isOrgAdmin","Breadcrumbs","space","BuilderBreadCrumbs","title","alertName","crumbs","label","preservePageFilters","push","StyledBreadcrumbs","IconGraph","uniqueId","ActionType","AlertRuleComparisonType","AlertRuleThresholdType","AlertRuleTriggerType","Dataset","EventTypes","TargetType","getHighestVolumeTransaction","client","organizationSlug","projectId","result","statsPeriod","field","sort","per_page","transaction","makeTeamCriticalAlert","threshold","CRITICAL","alertThreshold","actions","teams","slice","map","team","type","EMAIL","targetType","TEAM","targetIdentifier","unsavedDateCreated","Date","toISOString","inputChannelId","options","unsavedId","makeTeamWarningAlert","WARNING","PRESET_AGGREGATES","description","Icon","makeUnqueriedContext","_","name","dataset","TRANSACTIONS","eventTypes","TRANSACTION","timeWindow","comparisonDelta","comparisonType","CHANGE","thresholdType","ABOVE","triggers","makeContext","BELOW","Datasource","SessionsAggregate","TimePeriod","TimeWindow","ActionLabel","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","TargetLabel","USER","AlertRuleType","IncidentActivityType","IncidentStatus","IncidentStatusMethod","AlertRuleStatus","CombinedAlertType","Component","Fragment","Feature","FeatureDisabled","Hovercard","Layout","ExternalLink","List","ListItem","Panel","PanelBody","PanelHeader","SentryDocumentTitle","logExperiment","trackAdvancedAnalyticsEvent","withProjects","AlertWizardAlertNames","getAlertWizardCategories","AlertWizardPanelContent","RadioPanelGroup","DEFAULT_ALERT_OPTION","AlertWizard","props","location","alert_option","setState","trackView","componentDidMount","alert_type","renderCreateAlertButton","params","_projectId","state","metricRuleTemplate","isMetricAlert","isTransactionDataset","features","SESSIONS","METRICS","supportedPreset","agg","METRIC","ISSUE","renderNoAccess","showUseTemplateBtn","firstTransactionEvent","key","experiments","MetricAlertPresetExperiment","hasFeature","preset","render","routes","panelContent","i","categoryHeading","handleChangeAlertOption","docsLink","illustration","examples","example","StyledHeaderContent","HeaderContent","CategoryTitle","theme","fontSizeExtraLarge","WizardBody","WizardOptions","WizardImage","WizardPanel","visible","ExampleList","WizardPanelBody","PanelDescription","ExampleHeader","fontSizeLarge","ExampleItem","fontSizeMedium","OptionsWrapper","WizardFooter","border","WizardButtonContainer","MEPAlertsQueryType","MEPAlertsDataset","DatasetMEPAlertQueryTypes","ERRORS","ERROR","PERFORMANCE","GENERIC_METRICS","CRASH_RATE","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","custom","crash_free_sessions","crash_free_users","org","CRASH_FREE_SESSIONS","SESSION","CRASH_FREE_USERS","hidePrimarySelectorSet","Set","hideParameterSelectorSet","getMEPAlertsDataset","newAlert","DISCOVER","METRICS_ENHANCED","diagramApdex","diagramCLS","diagramCrashFreeSessions","diagramCrashFreeUsers","diagramCustom","diagramErrors","diagramFailureRate","diagramFID","diagramIssues","diagramLCP","diagramThroughput","diagramTransactionDuration","diagramUsers","Radio","value","choices","onChange","index","extraContent","e","Container","RadioLineItem","subText","textColor","RadioPanel"],"sourceRoot":""}