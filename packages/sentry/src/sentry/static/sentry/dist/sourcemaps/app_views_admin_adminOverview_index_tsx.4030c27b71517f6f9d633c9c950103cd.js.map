{"version":3,"file":"chunks/app_views_admin_adminOverview_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/admin/adminOverview/apiChart.tsx","webpack:///./app/views/admin/adminOverview/eventChart.tsx","webpack:///./app/views/admin/adminOverview/index.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport {Client} from 'sentry/api';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {TimeseriesValue} from 'sentry/types';\nimport theme from 'sentry/utils/theme';\nimport withApi from 'sentry/utils/withApi';\n\nconst initialState = {\n  error: false,\n  loading: true,\n  rawData: {\n    'client-api.all-versions.responses.2xx': [],\n    'client-api.all-versions.responses.4xx': [],\n    'client-api.all-versions.responses.5xx': [],\n  },\n};\n\ntype Props = {\n  api: Client;\n  resolution: string;\n  since: number;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  rawData: Record<string, TimeseriesValue[]>;\n};\n\nclass ApiChart extends Component<Props, State> {\n  state: State = initialState;\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.since !== nextProps.since) {\n      this.setState(initialState, this.fetchData);\n    }\n  }\n\n  fetchData = () => {\n    const statNameList = [\n      'client-api.all-versions.responses.2xx',\n      'client-api.all-versions.responses.4xx',\n      'client-api.all-versions.responses.5xx',\n    ];\n\n    statNameList.forEach(statName => {\n      this.props.api.request('/internal/stats/', {\n        method: 'GET',\n        data: {\n          since: this.props.since,\n          resolution: this.props.resolution,\n          key: statName,\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawData = prevState.rawData;\n            rawData[statName] = data;\n            return {\n              rawData,\n            };\n          }, this.requestFinished);\n        },\n        error: () => {\n          this.setState({\n            error: true,\n          });\n        },\n      });\n    });\n  };\n\n  requestFinished = () => {\n    const {rawData} = this.state;\n    if (\n      rawData['client-api.all-versions.responses.2xx'] &&\n      rawData['client-api.all-versions.responses.4xx'] &&\n      rawData['client-api.all-versions.responses.5xx']\n    ) {\n      this.setState({\n        loading: false,\n      });\n    }\n  };\n\n  processRawSeries(series: TimeseriesValue[]) {\n    return series.map(item => ({name: item[0] * 1000, value: item[1]}));\n  }\n\n  getChartSeries() {\n    const {rawData} = this.state;\n    return [\n      {\n        seriesName: '2xx',\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.2xx']),\n        color: theme.green200,\n      },\n      {\n        seriesName: '4xx',\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.4xx']),\n        color: theme.blue300,\n      },\n      {\n        seriesName: '5xx',\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.5xx']),\n        color: theme.red200,\n      },\n    ];\n  }\n\n  render() {\n    const {loading, error} = this.state;\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const series = this.getChartSeries();\n    const colors = series.map(({color}) => color);\n    return (\n      <MiniBarChart\n        series={series}\n        colors={colors}\n        height={110}\n        stacked\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(ApiChart);\n","import {Component} from 'react';\n\nimport {Client} from 'sentry/api';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {TimeseriesValue} from 'sentry/types';\nimport {SeriesDataUnit} from 'sentry/types/echarts';\nimport theme from 'sentry/utils/theme';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  resolution: string;\n  since: number;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  rawData: Record<string, TimeseriesValue[]>;\n  stats: Record<string, SeriesDataUnit[]>;\n};\n\nconst initialState: State = {\n  error: false,\n  loading: true,\n  rawData: {\n    'events.total': [],\n    'events.dropped': [],\n  },\n  stats: {received: [], rejected: []},\n};\n\nclass EventChart extends Component<Props, State> {\n  state: State = initialState;\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.since !== nextProps.since) {\n      this.setState(initialState, this.fetchData);\n    }\n  }\n\n  fetchData = () => {\n    const statNameList = ['events.total', 'events.dropped'];\n\n    statNameList.forEach(statName => {\n      // query the organization stats via a separate call as its possible the project stats\n      // are too heavy\n      this.props.api.request('/internal/stats/', {\n        method: 'GET',\n        data: {\n          since: this.props.since,\n          resolution: this.props.resolution,\n          key: statName,\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawData = prevState.rawData;\n            rawData[statName] = data;\n            return {\n              rawData,\n            };\n          }, this.requestFinished);\n        },\n        error: () => {\n          this.setState({\n            error: true,\n          });\n        },\n      });\n    });\n  };\n\n  requestFinished() {\n    const {rawData} = this.state;\n    if (rawData['events.total'] && rawData['events.dropped']) {\n      this.processOrgData();\n    }\n  }\n\n  processOrgData() {\n    const {rawData} = this.state;\n    const sReceived: Record<string, number> = {};\n    const sRejected: Record<string, number> = {};\n    const aReceived = [0, 0]; // received, points\n\n    rawData['events.total'].forEach((point, idx) => {\n      const dReceived = point[1];\n      const dRejected = rawData['events.dropped'][idx]?.[1];\n      const ts = point[0];\n      if (sReceived[ts] === undefined) {\n        sReceived[ts] = dReceived;\n        sRejected[ts] = dRejected;\n      } else {\n        sReceived[ts] += dReceived;\n        sRejected[ts] += dRejected;\n      }\n      if (dReceived > 0) {\n        aReceived[0] += dReceived;\n        aReceived[1] += 1;\n      }\n    });\n\n    this.setState({\n      stats: {\n        rejected: Object.keys(sRejected).map(ts => ({\n          name: parseInt(ts, 10) * 1000,\n          value: sRejected[ts] || 0,\n        })),\n        accepted: Object.keys(sReceived).map(ts =>\n          // total number of events accepted (received - rejected)\n          ({name: parseInt(ts, 10) * 1000, value: sReceived[ts] - sRejected[ts]})\n        ),\n      },\n      loading: false,\n    });\n  }\n\n  getChartSeries() {\n    const {stats} = this.state;\n\n    return [\n      {\n        seriesName: t('Accepted'),\n        data: stats.accepted,\n        color: theme.blue300,\n      },\n      {\n        seriesName: t('Dropped'),\n        data: stats.rejected,\n        color: theme.red200,\n      },\n    ];\n  }\n\n  render() {\n    const {loading, error} = this.state;\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n    const series = this.getChartSeries();\n    const colors = series.map(({color}) => color);\n    return (\n      <MiniBarChart\n        series={series}\n        colors={colors}\n        height={110}\n        stacked\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(EventChart);\n","import {Fragment} from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\n\nimport ApiChart from './apiChart';\nimport EventChart from './eventChart';\n\nconst AdminOverview = () => {\n  const resolution = '1h';\n  const since = new Date().getTime() / 1000 - 3600 * 24 * 7;\n\n  return (\n    <SentryDocumentTitle title={t('Admin Overview')}>\n      <Fragment>\n        <h3>{t('System Overview')}</h3>\n\n        <Panel key=\"events\">\n          <PanelHeader>{t('Event Throughput')}</PanelHeader>\n          <PanelBody withPadding>\n            <EventChart since={since} resolution={resolution} />\n          </PanelBody>\n        </Panel>\n\n        <Panel key=\"api\">\n          <PanelHeader>{t('API Responses')}</PanelHeader>\n          <PanelBody withPadding>\n            <ApiChart since={since} resolution={resolution} />\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    </SentryDocumentTitle>\n  );\n};\n\nexport default AdminOverview;\n"],"names":["Component","MiniBarChart","LoadingError","LoadingIndicator","theme","withApi","initialState","error","loading","rawData","ApiChart","statNameList","forEach","statName","props","api","request","method","data","since","resolution","key","success","setState","prevState","requestFinished","state","componentWillMount","fetchData","componentWillReceiveProps","nextProps","processRawSeries","series","map","item","name","value","getChartSeries","seriesName","color","green200","blue300","red200","render","colors","t","stats","received","rejected","EventChart","processOrgData","sReceived","sRejected","aReceived","point","idx","dReceived","dRejected","ts","undefined","Object","keys","parseInt","accepted","Fragment","Panel","PanelBody","PanelHeader","SentryDocumentTitle","AdminOverview","Date","getTime"],"sourceRoot":""}