{"version":3,"file":"chunks/app_components_arithmeticInput_parser_tsx-app_utils_measurements_measurements_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B;AACjF,uDAAuD,0BAA0B;AACjF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B;AACjF,uDAAuD,0BAA0B;AACjF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB,qBAAqB;AACrC;AACA;;AAEA;;AAEA;AACA,yBAAyB,yBAAyB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,qBAAqB;;AAErB,iCAAiC,qBAAqB;AACtD;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA,aAAa;AACb;;AAEA;AACA,aAAa;AACb;;AAEA;AACA,aAAa;AACb;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,yCAAyC;AACzC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,uCAAuC;AACvC;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,uCAAuC;AACvC;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,uCAAuC;AACvC;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,mCAAmC;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,mCAAmC;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,mCAAmC;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,qCAAqC;AACrC;AACA;;AAEA;AACA;;;AAGA,WAAW,UAAU;;;AAGrB;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","sources":["webpack:///./app/components/arithmeticInput/parser.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/components/arithmeticInput/grammar.pegjs"],"sourcesContent":["import {LocationRange} from 'pegjs';\n\nimport {t} from 'sentry/locale';\n\nimport grammar from './grammar.pegjs';\n\n// This constant should stay in sync with the backend parser\nconst MAX_OPERATORS = 10;\nconst MAX_OPERATOR_MESSAGE = t('Maximum operators exceeded');\n\ntype OperationOpts = {\n  operator: Operator;\n  rhs: Expression;\n  lhs?: Expression;\n};\n\ntype Operator = 'plus' | 'minus' | 'multiply' | 'divide';\ntype Expression = Operation | string | number | null;\n\nexport class Operation {\n  operator: Operator;\n  lhs?: Expression;\n  rhs: Expression;\n\n  constructor({operator, lhs = null, rhs}: OperationOpts) {\n    this.operator = operator;\n    this.lhs = lhs;\n    this.rhs = rhs;\n  }\n}\n\nclass Term {\n  term: Expression;\n  location: LocationRange;\n\n  constructor({term, location}: {location: LocationRange; term: Expression}) {\n    this.term = term;\n    this.location = location;\n  }\n}\n\nexport class TokenConverter {\n  numOperations: number;\n  errors: Array<string>;\n  fields: Array<Term>;\n  functions: Array<Term>;\n\n  constructor() {\n    this.numOperations = 0;\n    this.errors = [];\n    this.fields = [];\n    this.functions = [];\n  }\n\n  tokenTerm = (maybeFactor: Expression, remainingAdds: Array<Operation>): Expression => {\n    if (remainingAdds.length > 0) {\n      remainingAdds[0].lhs = maybeFactor;\n      return flatten(remainingAdds);\n    }\n    return maybeFactor;\n  };\n\n  tokenOperation = (operator: Operator, rhs: Expression): Operation => {\n    this.numOperations += 1;\n    if (\n      this.numOperations > MAX_OPERATORS &&\n      !this.errors.includes(MAX_OPERATOR_MESSAGE)\n    ) {\n      this.errors.push(MAX_OPERATOR_MESSAGE);\n    }\n    if (operator === 'divide' && rhs === '0') {\n      this.errors.push(t('Division by 0 is not allowed'));\n    }\n    return new Operation({operator, rhs});\n  };\n\n  tokenFactor = (primary: Expression, remaining: Array<Operation>): Operation => {\n    remaining[0].lhs = primary;\n    return flatten(remaining);\n  };\n\n  tokenField = (term: Expression, location: LocationRange): Expression => {\n    const field = new Term({term, location});\n    this.fields.push(field);\n    return term;\n  };\n\n  tokenFunction = (term: Expression, location: LocationRange): Expression => {\n    const func = new Term({term, location});\n    this.functions.push(func);\n    return term;\n  };\n}\n\n// Assumes an array with at least one element\nfunction flatten(remaining: Array<Operation>): Operation {\n  let term = remaining.shift();\n  while (remaining.length > 0) {\n    const nextTerm = remaining.shift();\n    if (nextTerm && term && nextTerm.lhs === null) {\n      nextTerm.lhs = term;\n    }\n    term = nextTerm;\n  }\n  // Shouldn't happen, tokenTerm checks remaining and tokenFactor should have at least 1 item\n  // This is just to help ts out\n  if (term === undefined) {\n    throw new Error('Unable to parse arithmetic');\n  }\n  return term;\n}\n\ntype parseResult = {\n  error: string | undefined;\n  result: Expression;\n  tc: TokenConverter;\n};\n\nexport function parseArithmetic(query: string): parseResult {\n  const tc = new TokenConverter();\n  try {\n    const result = grammar.parse(query, {tc});\n    return {result, error: tc.errors[0], tc};\n  } catch (error) {\n    return {result: null, error: error.message, tc};\n  }\n}\n","import {Fragment} from 'react';\n\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'sentry/utils/performance/vitals/constants';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\nimport {MobileVital, WebVital} from '../fields';\n\nexport type Measurement = {\n  key: string;\n  name: string;\n};\n\nexport type MeasurementCollection = Record<string, Measurement>;\n\ntype VitalType = WebVital | MobileVital;\n\nfunction measurementsFromDetails(\n  details: Partial<Record<VitalType, Vital>>\n): MeasurementCollection {\n  return Object.fromEntries(\n    Object.entries(details).map(([key, value]) => {\n      const newValue: Measurement = {\n        name: value.name,\n        key,\n      };\n      return [key, newValue];\n    })\n  );\n}\n\nconst MOBILE_MEASUREMENTS = measurementsFromDetails(MOBILE_VITAL_DETAILS);\nconst WEB_MEASUREMENTS = measurementsFromDetails(WEB_VITAL_DETAILS);\n\nexport function getMeasurements() {\n  return {...WEB_MEASUREMENTS, ...MOBILE_MEASUREMENTS};\n}\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements({children}: Props) {\n  const measurements = getMeasurements();\n  return <Fragment>{children({measurements})}</Fragment>;\n}\n\nexport default Measurements;\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { term: peg$parseterm },\n      peg$startRuleFunction  = peg$parseterm,\n\n      peg$c0 = function(maybeFactor, remainingAdds) {\n          return tc.tokenTerm(maybeFactor, remainingAdds);\n        },\n      peg$c1 = function(operator, rhs) {\n          return tc.tokenOperation(operator, rhs);\n        },\n      peg$c2 = function(term) {\n          return term;\n        },\n      peg$c3 = function(primary, remaining) {\n          return tc.tokenFactor(primary, remaining);\n        },\n      peg$c4 = function(operator) {\n          return operator;\n        },\n      peg$c5 = function(primary) {\n          return primary;\n        },\n      peg$c6 = \"+\",\n      peg$c7 = peg$literalExpectation(\"+\", false),\n      peg$c8 = function() {\n          return \"plus\";\n        },\n      peg$c9 = \"-\",\n      peg$c10 = peg$literalExpectation(\"-\", false),\n      peg$c11 = function() {\n          return \"minus\";\n        },\n      peg$c12 = \"*\",\n      peg$c13 = peg$literalExpectation(\"*\", false),\n      peg$c14 = function() {\n          return \"multiply\";\n        },\n      peg$c15 = /^[\\/\\xF7]/,\n      peg$c16 = peg$classExpectation([\"/\", \"\\xF7\"], false, false),\n      peg$c17 = function() {\n          return \"divide\";\n        },\n      peg$c18 = peg$otherExpectation(\"function\"),\n      peg$c19 = function() {\n          return tc.tokenFunction(text(), location());\n        },\n      peg$c20 = peg$otherExpectation(\"number\"),\n      peg$c21 = /^[+\\-]/,\n      peg$c22 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c23 = /^[0-9]/,\n      peg$c24 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c25 = \".\",\n      peg$c26 = peg$literalExpectation(\".\", false),\n      peg$c27 = function() {\n          return text();\n        },\n      peg$c28 = peg$otherExpectation(\"field\"),\n      peg$c29 = /^[a-zA-Z_.]/,\n      peg$c30 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"_\", \".\"], false, false),\n      peg$c31 = function() {\n          return tc.tokenField(text(), location());\n        },\n      peg$c32 = /^[^()\\t\\n, \"]/,\n      peg$c33 = peg$classExpectation([\"(\", \")\", \"\\t\", \"\\n\", \",\", \" \", \"\\\"\"], true, false),\n      peg$c34 = \"\\\"\",\n      peg$c35 = peg$literalExpectation(\"\\\"\", false),\n      peg$c36 = \"\\\\\\\"\",\n      peg$c37 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c38 = /^[^\\t\\n\"]/,\n      peg$c39 = peg$classExpectation([\"\\t\", \"\\n\", \"\\\"\"], true, false),\n      peg$c40 = /^[a-zA-Z_0-9]/,\n      peg$c41 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"_\", [\"0\", \"9\"]], false, false),\n      peg$c42 = \",\",\n      peg$c43 = peg$literalExpectation(\",\", false),\n      peg$c44 = \"(\",\n      peg$c45 = peg$literalExpectation(\"(\", false),\n      peg$c46 = \")\",\n      peg$c47 = peg$literalExpectation(\")\", false),\n      peg$c48 = \" \",\n      peg$c49 = peg$literalExpectation(\" \", false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parseterm() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemaybe_factor();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseremaining_adds();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseremaining_adds() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parseadd_sub();\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parseadd_sub();\n    }\n\n    return s0;\n  }\n\n  function peg$parseadd_sub() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadd_sub_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemaybe_factor();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemaybe_factor() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsespaces();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefactor();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseprimary();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsespaces();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c2(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefactor() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseremaining_muls();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c3(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseremaining_muls() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsemul_div();\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsemul_div();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemul_div() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemul_div_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseprimary();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadd_sub_operator() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsespaces();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseplus();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseminus();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsespaces();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c4(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemul_div_operator() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsespaces();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiply();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsedivide();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsespaces();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c4(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsespaces();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseparens();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsenumeric_value();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsefunction_value();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parsefield_value();\n          }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsespaces();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c5(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparens() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseopen_paren();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseterm();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseclosed_paren();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c2(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseplus() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s1 = peg$c6;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c7); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c8();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseminus() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 45) {\n      s1 = peg$c9;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c11();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsemultiply() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c12;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c13); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c14();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedivide() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (peg$c15.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c16); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c17();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunction_value() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsefunction_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseopen_paren();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsespaces();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsefunction_args();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsespaces();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseclosed_paren();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c19();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c18); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_value() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (peg$c21.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c23.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c24); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c23.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c24); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s4 = peg$c25;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c26); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          if (peg$c23.test(input.charAt(peg$currPos))) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c24); }\n          }\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            if (peg$c23.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c24); }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c27();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c20); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefield_value() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c29.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c30); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c29.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c31();\n    }\n    s0 = s1;\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefunction_args() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseaggregate_param();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsespaces();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecomma();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsespaces();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseaggregate_param();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsespaces();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecomma();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsespaces();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseaggregate_param();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggregate_param() {\n    var s0;\n\n    s0 = peg$parsequoted_aggregate_param();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseraw_aggregate_param();\n    }\n\n    return s0;\n  }\n\n  function peg$parseraw_aggregate_param() {\n    var s0, s1;\n\n    s0 = [];\n    if (peg$c32.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c33); }\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c32.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c33); }\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_aggregate_param() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c34;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c35); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (input.substr(peg$currPos, 2) === peg$c36) {\n        s3 = peg$c36;\n        peg$currPos += 2;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n      }\n      if (s3 === peg$FAILED) {\n        if (peg$c38.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c39); }\n        }\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        if (input.substr(peg$currPos, 2) === peg$c36) {\n          s3 = peg$c36;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c37); }\n        }\n        if (s3 === peg$FAILED) {\n          if (peg$c38.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c39); }\n          }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c34;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c35); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefunction_name() {\n    var s0, s1;\n\n    s0 = [];\n    if (peg$c40.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c41); }\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c40.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c41); }\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomma() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c42;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c43); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseopen_paren() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c44;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c45); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseclosed_paren() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c46;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c47); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsespaces() {\n    var s0, s1;\n\n    s0 = [];\n    if (input.charCodeAt(peg$currPos) === 32) {\n      s1 = peg$c48;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c49); }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s1 = peg$c48;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c49); }\n      }\n    }\n\n    return s0;\n  }\n\n\n    const {tc, term} = options;\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n"],"names":["t","grammar","MAX_OPERATORS","MAX_OPERATOR_MESSAGE","Operation","constructor","operator","lhs","rhs","Term","term","location","TokenConverter","maybeFactor","remainingAdds","length","flatten","numOperations","errors","includes","push","primary","remaining","field","fields","func","functions","shift","nextTerm","undefined","Error","parseArithmetic","query","tc","result","parse","error","message","Fragment","MOBILE_VITAL_DETAILS","WEB_VITAL_DETAILS","measurementsFromDetails","details","Object","fromEntries","entries","map","key","value","newValue","name","MOBILE_MEASUREMENTS","WEB_MEASUREMENTS","getMeasurements","Measurements","children","measurements"],"sourceRoot":""}