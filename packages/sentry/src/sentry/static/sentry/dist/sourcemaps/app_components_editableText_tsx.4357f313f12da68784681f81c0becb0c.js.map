{"version":3,"file":"chunks/app_components_editableText_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/editableText.tsx","webpack:///./app/utils/useKeyPress.tsx","webpack:///./app/utils/useOnClickOutside.tsx"],"sourcesContent":["import {useCallback, useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport Input from 'sentry/components/input';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {IconEdit} from 'sentry/icons/iconEdit';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport useKeypress from 'sentry/utils/useKeyPress';\nimport useOnClickOutside from 'sentry/utils/useOnClickOutside';\n\ntype Props = {\n  onChange: (value: string) => void;\n  value: string;\n  'aria-label'?: string;\n  autoSelect?: boolean;\n  errorMessage?: React.ReactNode;\n  isDisabled?: boolean;\n  maxLength?: number;\n  name?: string;\n  successMessage?: React.ReactNode;\n};\n\nfunction EditableText({\n  value,\n  onChange,\n  name,\n  errorMessage,\n  successMessage,\n  maxLength,\n  isDisabled = false,\n  autoSelect = false,\n  'aria-label': ariaLabel,\n}: Props) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [inputValue, setInputValue] = useState(value);\n\n  const isEmpty = !inputValue.trim();\n\n  const innerWrapperRef = useRef<HTMLDivElement>(null);\n  const labelRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const enter = useKeypress('Enter');\n  const esc = useKeypress('Escape');\n\n  function revertValueAndCloseEditor() {\n    if (value !== inputValue) {\n      setInputValue(value);\n    }\n\n    if (isEditing) {\n      setIsEditing(false);\n    }\n  }\n\n  // check to see if the user clicked outside of this component\n  useOnClickOutside(innerWrapperRef, () => {\n    if (!isEditing) {\n      return;\n    }\n\n    if (isEmpty) {\n      displayStatusMessage('error');\n      return;\n    }\n\n    if (inputValue !== value) {\n      onChange(inputValue);\n      displayStatusMessage('success');\n    }\n\n    setIsEditing(false);\n  });\n\n  const onEnter = useCallback(() => {\n    if (enter) {\n      if (isEmpty) {\n        displayStatusMessage('error');\n        return;\n      }\n\n      if (inputValue !== value) {\n        onChange(inputValue);\n        displayStatusMessage('success');\n      }\n\n      setIsEditing(false);\n    }\n  }, [enter, inputValue, onChange]);\n\n  const onEsc = useCallback(() => {\n    if (esc) {\n      revertValueAndCloseEditor();\n    }\n  }, [esc]);\n\n  useEffect(() => {\n    revertValueAndCloseEditor();\n  }, [isDisabled, value]);\n\n  // focus the cursor in the input field on edit start\n  useEffect(() => {\n    if (isEditing) {\n      const inputElement = inputRef.current;\n      if (defined(inputElement)) {\n        inputElement.focus();\n      }\n    }\n  }, [isEditing]);\n\n  useEffect(() => {\n    if (isEditing) {\n      // if Enter is pressed, save the value and close the editor\n      onEnter();\n      // if Escape is pressed, revert the value and close the editor\n      onEsc();\n    }\n  }, [onEnter, onEsc, isEditing]); // watch the Enter and Escape key presses\n\n  function displayStatusMessage(status: 'error' | 'success') {\n    if (status === 'error') {\n      if (errorMessage) {\n        addErrorMessage(errorMessage);\n      }\n      return;\n    }\n\n    if (successMessage) {\n      addSuccessMessage(successMessage);\n    }\n  }\n\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setInputValue(event.target.value);\n  }\n\n  function handleEditClick() {\n    setIsEditing(true);\n  }\n\n  return (\n    <Wrapper isDisabled={isDisabled} isEditing={isEditing}>\n      {isEditing ? (\n        <InputWrapper\n          ref={innerWrapperRef}\n          isEmpty={isEmpty}\n          data-test-id=\"editable-text-input\"\n        >\n          <StyledInput\n            aria-label={ariaLabel}\n            name={name}\n            ref={inputRef}\n            value={inputValue}\n            onChange={handleInputChange}\n            onFocus={event => autoSelect && event.target.select()}\n            maxLength={maxLength}\n          />\n          <InputLabel>{inputValue}</InputLabel>\n        </InputWrapper>\n      ) : (\n        <Label\n          onClick={isDisabled ? undefined : handleEditClick}\n          ref={labelRef}\n          isDisabled={isDisabled}\n          data-test-id=\"editable-text-label\"\n        >\n          <InnerLabel>{inputValue}</InnerLabel>\n          {!isDisabled && <IconEdit />}\n        </Label>\n      )}\n    </Wrapper>\n  );\n}\n\nexport default EditableText;\n\nconst Label = styled('div')<{isDisabled: boolean}>`\n  display: grid;\n  grid-auto-flow: column;\n  align-items: center;\n  gap: ${space(1)};\n  cursor: ${p => (p.isDisabled ? 'default' : 'pointer')};\n`;\n\nconst InnerLabel = styled(TextOverflow)`\n  border-top: 1px solid transparent;\n  border-bottom: 1px dotted ${p => p.theme.gray200};\n`;\n\nconst InputWrapper = styled('div')<{isEmpty: boolean}>`\n  display: inline-block;\n  background: ${p => p.theme.gray100};\n  border-radius: ${p => p.theme.borderRadius};\n  margin: -${space(0.5)} -${space(1)};\n  padding: ${space(0.5)} ${space(1)};\n  max-width: calc(100% + ${space(2)});\n`;\n\nconst StyledInput = styled(Input)`\n  border: none !important;\n  background: transparent;\n  height: auto;\n  min-height: 34px;\n  padding: 0;\n  &,\n  &:focus,\n  &:active,\n  &:hover {\n    box-shadow: none;\n  }\n`;\n\nconst InputLabel = styled('div')`\n  height: 0;\n  opacity: 0;\n  white-space: pre;\n  padding: 0 ${space(1)};\n`;\n\nconst Wrapper = styled('div')<{isDisabled: boolean; isEditing: boolean}>`\n  display: flex;\n\n  ${p =>\n    p.isDisabled &&\n    `\n      ${InnerLabel} {\n        border-bottom-color: transparent;\n      }\n    `}\n`;\n","import {useEffect, useState} from 'react';\n\n/**\n * Hook to detect when a specific key is being pressed\n */\nfunction useKeyPress(targetKey: React.KeyboardEvent['key']) {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  useEffect(() => {\n    function downHandler({key}: KeyboardEvent) {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    }\n\n    function upHandler({key}: KeyboardEvent) {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    }\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, [targetKey]);\n\n  return keyPressed;\n}\n\nexport default useKeyPress;\n","import {useEffect} from 'react';\n\n// hook from https://usehooks.com/useOnClickOutside/\nfunction useOnClickOutside<T extends HTMLElement = HTMLElement>(\n  ref: React.RefObject<T>,\n  handler: (event: MouseEvent | TouchEvent) => void\n) {\n  useEffect(\n    () => {\n      const listener = (event: MouseEvent | TouchEvent) => {\n        const el = ref?.current;\n\n        // Do nothing if clicking ref's element or descendent elements\n        if (!el || el.contains(event.target as Node)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener('mousedown', listener);\n      document.addEventListener('touchstart', listener);\n      return () => {\n        document.removeEventListener('mousedown', listener);\n        document.removeEventListener('touchstart', listener);\n      };\n    },\n    // Reload only if ref or handler changes\n    [ref, handler]\n  );\n}\n\nexport default useOnClickOutside;\n"],"names":["useCallback","useEffect","useRef","useState","addErrorMessage","addSuccessMessage","Input","TextOverflow","IconEdit","space","defined","useKeypress","useOnClickOutside","EditableText","value","onChange","name","errorMessage","successMessage","maxLength","isDisabled","autoSelect","ariaLabel","isEditing","setIsEditing","inputValue","setInputValue","isEmpty","trim","innerWrapperRef","labelRef","inputRef","enter","esc","revertValueAndCloseEditor","displayStatusMessage","onEnter","onEsc","inputElement","current","focus","status","handleInputChange","event","target","handleEditClick","select","undefined","Label","p","InnerLabel","theme","gray200","InputWrapper","gray100","borderRadius","StyledInput","InputLabel","Wrapper","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","ref","handler","listener","el","contains","document"],"sourceRoot":""}