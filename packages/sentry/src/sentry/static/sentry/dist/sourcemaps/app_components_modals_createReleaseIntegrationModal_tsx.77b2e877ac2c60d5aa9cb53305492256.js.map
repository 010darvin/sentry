{"version":3,"file":"chunks/app_components_modals_createReleaseIntegrationModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/createReleaseIntegrationModal.tsx","webpack:///./app/utils/useApi.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport FieldFromConfig from 'sentry/components/forms/fieldFromConfig';\nimport Form from 'sentry/components/forms/form';\nimport {Field} from 'sentry/components/forms/type';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\n\nexport type CreateReleaseIntegrationModalOptions = {\n  onCancel: () => void;\n  onCreateSuccess: (integration) => void;\n  organization: Organization;\n  project: Project;\n};\ntype CreateReleaseIntegrationModalProps = CreateReleaseIntegrationModalOptions &\n  ModalRenderProps;\n\nfunction CreateReleaseIntegrationModal({\n  Body,\n  Header,\n  closeModal,\n  project,\n  organization,\n  onCreateSuccess,\n  onCancel,\n}: CreateReleaseIntegrationModalProps) {\n  const api = useApi();\n  const fields: Field[] = [\n    {\n      name: 'name',\n      type: 'string',\n\n      placeholder: `${project.name} Release Integration`,\n      label: t('Name'),\n      help: <Fragment>{t('Name of new integration.')}</Fragment>,\n      defaultValue: `${project.name} Release Integration`,\n      required: true,\n    },\n  ];\n  return (\n    <Fragment>\n      <Header>\n        <h3>{t('Create a Release Integration')}</h3>\n      </Header>\n      <Body>\n        <Form\n          onCancel={() => {\n            onCancel();\n            closeModal();\n          }}\n          onSubmit={async (data, onSubmitSuccess, onSubmitError) => {\n            try {\n              const integration = await api.requestPromise('/sentry-apps/', {\n                method: 'POST',\n                data: {\n                  ...data,\n                  organization: organization.slug,\n                  isAlertable: false,\n                  isInternal: true,\n                  scopes: [\n                    'project:read',\n                    'project:write',\n                    'team:read',\n                    'team:write',\n                    'project:releases',\n                    'event:read',\n                    'event:write',\n                    'org:read',\n                    'org:write',\n                    'member:read',\n                    'member:write',\n                  ],\n                  verifyInstall: false,\n                  overview: `This internal integration was auto-generated to setup Releases for the ${project.name} project. It is needed to provide the token used to create a release. If this integration is deleted, your Releases workflow will stop working!`,\n                },\n              });\n              onSubmitSuccess(integration);\n            } catch (error) {\n              onSubmitError(error);\n            }\n          }}\n          onSubmitSuccess={data => {\n            onCreateSuccess(data);\n            addSuccessMessage(t('Created Release Integration'));\n            closeModal();\n          }}\n          onSubmitError={error => {\n            addErrorMessage(tct('Something went wrong! [error]', {error}));\n          }}\n        >\n          {fields.map(field => (\n            <FieldFromConfig key={field.name} field={field} />\n          ))}\n        </Form>\n      </Body>\n    </Fragment>\n  );\n}\n\nexport default CreateReleaseIntegrationModal;\n","import {useCallback, useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\n\ntype Options = {\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  // Clear API calls on unmount (if persistInFlight is disabled\n  const clearOnUnmount = useCallback(() => {\n    if (!persistInFlight) {\n      api.clear();\n    }\n  }, [api, persistInFlight]);\n\n  useEffect(() => clearOnUnmount, [clearOnUnmount]);\n\n  return api;\n}\n\nexport default useApi;\n"],"names":["Fragment","addErrorMessage","addSuccessMessage","FieldFromConfig","Form","t","tct","useApi","CreateReleaseIntegrationModal","Body","Header","closeModal","project","organization","onCreateSuccess","onCancel","api","fields","name","type","placeholder","label","help","defaultValue","required","data","onSubmitSuccess","onSubmitError","integration","requestPromise","method","slug","isAlertable","isInternal","scopes","verifyInstall","overview","error","map","field","useCallback","useEffect","useRef","Client","persistInFlight","providedApi","localApi","current","undefined","clearOnUnmount","clear"],"sourceRoot":""}