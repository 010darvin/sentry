{"version":3,"file":"chunks/app_components_banner_tsx-app_components_charts_eventsRequest_tsx-app_utils_discover_charts_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMO,OAAO,GAAIC,MAAD,IAAqB,GAAEA,MAAO,mBAA9C;;AAEA,SAASC,aAAT,CAAuBC,SAAvB,EAA0C;EACxCC,YAAY,CAACC,OAAb,CAAqBL,OAAO,CAACG,SAAD,CAA5B,EAAyC,MAAzC;AACD;;AAED,SAASG,cAAT,CAAwBH,SAAxB,EAA2C;EACzC,MAAMI,GAAG,GAAGP,OAAO,CAACG,SAAD,CAAnB;EACA,MAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBhB,+CAAQ,CAACW,YAAY,CAACM,OAAb,CAAqBH,GAArB,CAAD,CAAlC;;EAEA,MAAMI,OAAO,GAAG,MAAM;IACpBF,QAAQ,CAAC,MAAD,CAAR;IACAP,aAAa,CAACC,SAAD,CAAb;EACD,CAHD;;EAKA,OAAO,CAACK,KAAK,KAAK,MAAX,EAAmBG,OAAnB,CAAP;AACD;;AAsBD,MAAMC,MAAkB,GAAG,QASrB;EAAA,IATsB;IAC1BC,KAD0B;IAE1BC,QAF0B;IAG1BC,aAAa,GAAG,IAHU;IAI1BC,UAAU,GAAG,gBAJa;IAK1BC,SAL0B;IAM1BC,aAN0B;IAO1BC,mBAP0B;IAQ1BC;EAR0B,CAStB;EACJ,MAAM,CAACC,SAAD,EAAYV,OAAZ,IAAuBL,cAAc,CAACU,UAAD,CAA3C;;EAEA,IAAIK,SAAJ,EAAe;IACb,OAAO,IAAP;EACD;;EAED,OACE,iEAAC,aAAD;IAAe,aAAa,EAAEH,aAA9B;IAA6C,SAAS,EAAED,SAAxD;IAAA,WACGE,mBADH,EAEGJ,aAAa,GAAG,gEAAC,WAAD;MAAa,OAAO,EAAEJ,OAAtB;MAA+B,cAAYb,gDAAC,CAAC,OAAD;IAA5C,EAAH,GAA+D,IAF/E,EAGE,iEAAC,aAAD;MAAA,WACE,gEAAC,WAAD;QAAA,UAAce;MAAd,EADF,EAEE,gEAAC,cAAD;QAAA,UAAiBC;MAAjB,EAFF,EAGE,gEAAC,eAAD;QAAiB,GAAG,EAAE,CAAtB;QAAA,UAA0BM;MAA1B,EAHF;IAAA,EAHF;EAAA,EADF;AAWD,CA3BD;;AAAMR;AA6BNA,MAAM,CAACD,OAAP,GAAiBT,aAAjB;;AAEA,MAAMoB,aAAa,GAAG,8EAAO,KAAP;EAAA;AAAA,MAAH,CACfC,CAAC,IACDA,CAAC,CAACL,aAAF,gBACIxB,mDADJ,oBAEwB6B,CAAC,CAACL,aAF1B,8IAOIxB,mDAPJ,sBAQ0B6B,CAAC,CAACC,KAAF,CAAQC,OARlC,yCAFe,8GAiBA1B,+DAAK,CAAC,CAAD,CAjBL,kBAkBHwB,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQE,eAlBV,qBAmBAH,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQG,YAnBb,0BAqBRJ,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQI,KArBL,0BAuBIL,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQK,WAAR,CAAoBC,KAvB7B,wCAAnB;;AA4BA,MAAMC,aAAa,GAAG,8EAAO,KAAP;EAAA;AAAA,MAAH,6HAMNhC,+DAAK,CAAC,CAAD,CANC,yBAAnB;;AASA,MAAMiC,WAAW,GAAG,8EAAO,IAAP;EAAA;AAAA,MAAH,iCAGMT,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQK,WAAR,CAAoBC,KAH/B,0CAAjB;;AAQA,MAAMG,cAAc,GAAG,8EAAO,KAAP;EAAA;AAAA,MAAH,iCAGGV,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQK,WAAR,CAAoBC,KAH5B,kBAIHP,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQU,kBAJV,0BAApB;;AAQA,MAAMC,eAAe,GAAG,8EAAOvC,mEAAP;EAAA;AAAA,MAAH,gBACLG,+DAAK,CAAC,CAAD,CADA,2CAArB;;AAKA,MAAMqC,WAAW,GAAG,8EAAOzC,gEAAP;EAAA;AAAA,MAAH,yCAGRI,+DAAK,CAAC,CAAD,CAHG,aAINA,+DAAK,CAAC,CAAD,CAJC,aAKNwB,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQI,KALP,kDAAjB;;AAUAQ,WAAW,CAACC,YAAZ,GAA2B;EACzBC,IAAI,EAAE,gEAAC,mDAAD,KADmB;EAEzB,CAAC,YAAD,GAAgBxC,gDAAC,CAAC,OAAD,CAFQ;EAGzByC,QAAQ,EAAE,MAHe;EAIzBC,UAAU,EAAE,IAJa;EAKzBC,IAAI,EAAE;AALmB,CAA3B;AAQA,iEAAe7B,MAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3JA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AASA;AACA;;AA2MA,MAAMyC,iBAAiB,GAAG,CACxB,KADwB,EAExB,UAFwB,EAGxB,cAHwB,EAIxB,SAJwB,EAKxB,eALwB,EAMxB,kBANwB,CAA1B;;AAQA,MAAMC,gBAAgB,GAAIC,KAAD,IACvBX,oDAAM,CAACW,KAAD,EAAQ,CAACC,MAAD,EAASjD,GAAT,KAAiB8C,iBAAiB,CAACI,QAAlB,CAA2BlD,GAA3B,CAAzB,CADR;;AAGA,MAAMmD,aAAN,SAA4BhB,gDAA5B,CAAkF;EAAA;IAAA;;IAAA,iGAapD;MAC1BiB,SAAS,EAAE,CAAC,CAAC,KAAKJ,KAAL,CAAWK,OADE;MAE1BC,OAAO,EAAE,KAFiB;MAG1BC,cAAc,EAAE,IAHU;MAI1BC,mBAAmB,EAAE;IAJK,CAboD;;IAAA,sGAmClD,KAnCkD;;IAAA,qGAqCpE,YAAY;MACtB,MAAM;QAACC,GAAD;QAAMC,cAAN;QAAsBC,OAAtB;QAA+BC,OAA/B;QAAwCC,IAAxC;QAA8CC,SAA9C;QAAyD,GAAGd;MAA5D,IAAqE,KAAKA,KAAhF;MACA,IAAIO,cAA2D,GAAG,IAAlE;;MAEA,IAAIG,cAAc,KAAK,KAAvB,EAA8B;QAC5B;MACD;;MAED,KAAKK,QAAL,CAAcC,KAAK,KAAK;QACtBZ,SAAS,EAAEY,KAAK,CAACT,cAAN,KAAyB,IADd;QAEtBD,OAAO,EAAE,KAFa;QAGtBW,YAAY,EAAEC;MAHQ,CAAL,CAAnB;MAMA,IAAID,YAAJ;;MACA,IAAIL,OAAJ,EAAa;QACXK,YAAY,GAAG1E,iDAAC,CACd,oEADc,EAEdsE,IAFc,CAAhB;QAIAtB,gFAAe,CAAC0B,YAAD,EAAe;UAACE,MAAM,EAAE;QAAT,CAAf,CAAf;QAEA,KAAKJ,QAAL,CAAc;UACZT,OAAO,EAAE,IADG;UAEZW;QAFY,CAAd;MAID,CAXD,MAWO;QACL,IAAI;UACFR,GAAG,CAACW,KAAJ;UACAb,cAAc,GAAG,MAAMjB,6EAAe,CAACmB,GAAD,EAAMT,KAAN,CAAtC;QACD,CAHD,CAGE,OAAOqB,IAAP,EAAa;UACb,IAAIA,IAAI,IAAIA,IAAI,CAACC,YAAb,IAA6BD,IAAI,CAACC,YAAL,CAAkBC,MAAnD,EAA2D;YACzDN,YAAY,GAAGI,IAAI,CAACC,YAAL,CAAkBC,MAAjC;UACD,CAFD,MAEO;YACLN,YAAY,GAAG1E,iDAAC,CAAC,0BAAD,CAAhB;UACD;;UACD,IAAI,CAACuE,SAAL,EAAgB;YACdvB,gFAAe,CAAC0B,YAAD,CAAf;UACD;;UACD,IAAIN,OAAJ,EAAa;YACXA,OAAO,CAACM,YAAD,CAAP;UACD;;UACD,KAAKF,QAAL,CAAc;YACZT,OAAO,EAAE,IADG;YAEZW;UAFY,CAAd;QAID;MACF;;MAED,IAAI,KAAKO,UAAT,EAAqB;QACnB;MACD;;MAED,KAAKT,QAAL,CAAc;QACZX,SAAS,EAAE,KADC;QAEZG,cAFY;QAGZC,mBAAmB,EAAER,KAAK,CAACyB;MAHf,CAAd;;MAKA,IAAIzB,KAAK,CAAC0B,kBAAV,EAA8B;QAC5B1B,KAAK,CAAC0B,kBAAN,CAAyBnB,cAAzB;MACD;IACF,CAlG+E;;IAAA,mGA4G9EoB,IADQ,IAEyD;MACjE,MAAM;QAACnB;MAAD,IAAwB,KAAKQ,KAAnC;MACA,MAAM;QAACY,MAAD;QAASH;MAAT,IAA4B,KAAKzB,KAAvC;MAEA,MAAM6B,iBAAiB,GACrBrB,mBAAmB,IAAIf,wFAAwB,CAACgC,eAAD,EAAkBG,MAAlB,CADjD,CAJiE,CAMjE;;MACA,MAAME,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACM,MAAL,GAAc,CAAzB,CAAxB;MACA,OAAO;QACLC,OAAO,EAAEL,iBAAiB,GAAGF,IAAI,CAACQ,KAAL,CAAWL,eAAX,CAAH,GAAiCH,IADtD;QAELS,QAAQ,EAAEP,iBAAiB,GAAGF,IAAI,CAACQ,KAAL,CAAW,CAAX,EAAcL,eAAd,CAAH,GAAoC;MAF1D,CAAP;IAID,CAzH+E;EAAA;;EAoBhFO,iBAAiB,GAAG;IAClB,KAAKC,SAAL;EACD;;EAEDC,kBAAkB,CAACC,SAAD,EAAgC;IAChD,IAAIpD,qDAAO,CAACW,gBAAgB,CAACyC,SAAD,CAAjB,EAA8BzC,gBAAgB,CAAC,KAAKC,KAAN,CAA9C,CAAX,EAAwE;MACtE;IACD;;IACD,KAAKsC,SAAL;EACD;;EAEDG,oBAAoB,GAAG;IACrB,KAAKjB,UAAL,GAAkB,IAAlB;EACD;;EA0FD;EACAkB,2BAA2B,CACzBf,IADyB,EAOP;IAAA,IALlBgB,OAKkB,uEADJC,SAAS,IAAIA,SAAS,GAAG,IACrB;IAClB,OAAOjB,IAAI,CAACkB,GAAL,CAAS,OAA0BC,CAA1B;MAAA,IAAC,CAACF,SAAD,EAAYG,UAAZ,CAAD;MAAA,OAAiC;QAC/ClC,IAAI,EAAE8B,OAAO,CAACC,SAAD,EAAYG,UAAZ,EAAwBD,CAAxB,CADkC;QAE/C7F,KAAK,EAAE8F,UAAU,CAACC,MAAX,CAAkB,CAACC,GAAD;UAAA,IAAM;YAACC;UAAD,CAAN;UAAA,OAAkBD,GAAG,GAAGC,KAAxB;QAAA,CAAlB,EAAiD,CAAjD;MAFwC,CAAjC;IAAA,CAAT,CAAP;EAID;EAED;AACF;AACA;AACA;;;EACEC,2BAA2B,CACzBjB,OADyB,EAEzBE,QAFyB,EAGzBgB,UAHyB,EAIV;IACf;IACA;IACA,IAAI,CAAChB,QAAL,EAAe;MACb,OAAO,IAAP;IACD;;IAED,OAAO;MACLgB,UAAU,EAAEA,UAAF,aAAEA,UAAF,cAAEA,UAAF,GAAgB,UADrB;MAELzB,IAAI,EAAE,KAAKe,2BAAL,CACJN,QADI,EAEJ,CAACiB,UAAD,EAAaC,WAAb,EAA0BR,CAA1B,KAAgCZ,OAAO,CAACY,CAAD,CAAP,CAAW,CAAX,IAAgB,IAF5C,CAFD;MAMLS,KAAK,EAAE;IANF,CAAP;EAQD;EAED;AACF;AACA;;;EACEC,6BAA6B,CAAC7B,IAAD,EAAyD;IAAA,IAAjCyB,UAAiC,uEAAZ,EAAY;IACpF,OAAO;MACLA,UADK;MAELzB,IAAI,EAAE,KAAKe,2BAAL,CAAiCf,IAAjC;IAFD,CAAP;EAID;EAED;AACF;AACA;;;EACE8B,uBAAuB,CAAC9B,IAAD,EAAwByB,UAAxB,EAAuD;IAC5E,OAAO,CACL;MACEA,UAAU,EAAEA,UAAU,IAAI,SAD5B;MAEEzB,IAAI,EAAEA,IAAI,CAACkB,GAAL,CAAS;QAAA,IAAC,CAACD,SAAD,EAAYc,kBAAZ,CAAD;QAAA,OAAsC;UACnD7C,IAAI,EAAE+B,SAAS,GAAG,IADiC;UAEnD3F,KAAK,EAAEyG,kBAAkB,CAACV,MAAnB,CAA0B,CAACC,GAAD;YAAA,IAAM;cAACC;YAAD,CAAN;YAAA,OAAkBD,GAAG,GAAGC,KAAxB;UAAA,CAA1B,EAAyD,CAAzD;QAF4C,CAAtC;MAAA,CAAT;IAFR,CADK,CAAP;EASD;EAED;AACF;AACA;;;EACES,iCAAiC,CAAChC,IAAD,EAAkC;IACjE,OAAO,CACL;MACEyB,UAAU,EAAE,mBADd;MAEEzB,IAAI,EAAEA,IAAI,CAACkB,GAAL,CAAS;QAAA,IAAC,CAACD,SAAD,EAAYc,kBAAZ,CAAD;QAAA,OAAsC;UACnD7C,IAAI,EAAE+B,SAAS,GAAG,IADiC;UAEnD3F,KAAK,EAAEyG,kBAAkB,CAACV,MAAnB,CACL,CAACC,GAAD;YAAA,IAAM;cAACW;YAAD,CAAN;YAAA,OAA4BX,GAAG,IAAIW,eAAJ,aAAIA,eAAJ,cAAIA,eAAJ,GAAuB,CAAvB,CAA/B;UAAA,CADK,EAEL,CAFK;QAF4C,CAAtC;MAAA,CAAT;IAFR,CADK,CAAP;EAYD;;EAEDC,WAAW,CAACC,QAAD,EAAsE;IAAA;;IAAA,IAA9CC,WAA8C,uEAAxB,CAAwB;IAAA,IAArBX,UAAqB;IAC/E,MAAM;MAACzB,IAAD;MAAOqC,aAAP;MAAsBC;IAAtB,IAAgCH,QAAtC;IACA,MAAM;MACJI,sBADI;MAEJC,sBAFI;MAGJC,yBAHI;MAIJC,kBAJI;MAKJC,mBALI;MAMJC;IANI,IAOF,KAAKvE,KAPT;IAQA,MAAM;MAACkC,OAAD;MAAUE;IAAV,IAAsB,KAAKoC,OAAL,CAAa7C,IAAb,CAA5B;IACA,MAAM8C,eAAe,GAAGP,sBAAsB,GAC1C,KAAKT,uBAAL,CACEvB,OADF,EAEEkB,UAFF,aAEEA,UAFF,cAEEA,UAFF,GAEgBiB,kBAFhB,aAEgBA,kBAFhB,uBAEgBA,kBAAkB,CAAGN,WAAH,CAFlC,CAD0C,GAK1C,EALJ;IAMA,MAAMW,yBAAyB,GAC7BR,sBAAsB,IAAIK,eAA1B,GACI,KAAKZ,iCAAL,CAAuCzB,OAAvC,CADJ,GAEI,EAHN;IAIA,MAAMyC,YAAY,GAAGT,sBAAsB,GACvC,KAAKf,2BAAL,CACEjB,OADF,EAEEE,QAFF,WAGGgB,UAAU,GAAG1D,qFAAqB,CAAC0D,UAAD,CAAxB,GAAuClC,SAHpD,yCAIIoD,mBAJJ,aAIIA,mBAJJ,uBAIIA,mBAAmB,CAAGP,WAAH,CAJvB,CADuC,GAOvC,IAPJ;IAQA,MAAMa,kBAAkB,GAAGT,sBAAsB,GAC7C,KAAKX,6BAAL,CAAmCtB,OAAnC,EAA4CkC,yBAAyB,IAAI,EAAzE,CAD6C,GAE7C,EAFJ;IAGA,MAAMS,SAAS,GACbf,QAAQ,CAACgB,KAAT,IAAkBhB,QAAQ,CAACiB,GAA3B,GACI,CAAC3C,QAAD,GACE;MACE0C,KAAK,EAAEhB,QAAQ,CAACgB,KAAT,GAAiB,IAD1B;MAEEC,GAAG,EAAEjB,QAAQ,CAACiB,GAAT,GAAe;IAFtB,CADF,GAKE;MACE;MACAD,KAAK,EAAE,CAAChB,QAAQ,CAACgB,KAAT,GAAiBhB,QAAQ,CAACiB,GAA3B,IAAkC,GAF3C;MAGEA,GAAG,EAAEjB,QAAQ,CAACiB,GAAT,GAAe;IAHtB,CANN,GAWI7D,SAZN;IAcA,MAAM8D,aAAa,GAAG;MACpBrD,IAAI,EAAE8C,eADc;MAEpBQ,cAAc,EAAEP,yBAFI;MAGpBQ,OAAO,EAAEvD,IAHW;MAIpBwD,YAAY,EAAEjD,OAJM;MAKpB+B,MALoB;MAMpBD,aANoB;MAOpBoB,oBAAoB,EAAEhD,QAPF;MAQpBuC,YARoB;MASpBC,kBAToB;MAUpBC;IAVoB,CAAtB;IAaA,OAAOG,aAAP;EACD;;EAEDK,MAAM,GAAG;IACP,MAAM;MAACxH,QAAD;MAAWyH,WAAX;MAAwB,GAAGtF;IAA3B,IAAoC,KAAKA,KAA/C;IACA,MAAM;MAACuF;IAAD,IAAc,KAAKvF,KAAzB;IACA,MAAM;MAACO,cAAD;MAAiBH,SAAjB;MAA4BE,OAA5B;MAAqCW;IAArC,IAAqD,KAAKD,KAAhE,CAHO,CAIP;;IACA,MAAMX,OAAO,GAAG,KAAKL,KAAL,CAAWK,OAAX,IAAsBE,cAAc,KAAK,IAAzD;;IAEA,IAAI+E,WAAW,IAAIjF,OAAnB,EAA4B;MAC1B,OAAO,iEAAC,6EAAD;QAAc,gBAAa;MAA3B,EAAP;IACD;;IACD,IAAIV,kFAAkB,CAACY,cAAD,EAAiBX,sDAAO,CAAC2F,SAAD,CAAxB,CAAtB,EAA4D;MAC1D;MACA;MACA;MACA;MACA;MACA,IAAIV,SAAmD,GAAG3D,SAA1D;MACA,MAAMsE,oBAA0D,GAAG,EAAnE;MACA,MAAMC,oBAAoB,GAAGC,MAAM,CAACC,IAAP,CAAYpF,cAAZ,EAC1BsC,GAD0B,CAEzB,CACEO,UADF,EAEEwC,KAFF,KAG4D;QAC1D,MAAMC,UAAuB,GAAGtF,cAAc,CAAC6C,UAAD,CAA9C;QACA,MAAM4B,aAAa,GAAG,KAAKnB,WAAL,CACpBgC,UADoB,EAEpBD,KAFoB,EAGpB/F,kFAAmB,CAACuD,UAAD,CAHC,CAAtB;;QAKA,IAAI,CAACyB,SAAL,EAAgB;UACdA,SAAS,GAAGG,aAAa,CAACH,SAA1B;QACD;;QACD,IAAIG,aAAa,CAAChB,aAAlB,EAAiC;UAC/BwB,oBAAoB,CAACpC,UAAD,CAApB,GAAmC;YACjCY,aAAa,EAAEgB,aAAa,CAAChB;UADI,CAAnC;QAGD;;QACD,OAAO,CACL6B,UAAU,CAACC,KAAX,IAAoB,CADf,EAELd,aAAa,CAACrD,IAAd,CAAmB,CAAnB,CAFK,EAGLqD,aAAa,CAACL,YAHT,EAIL;UAACX,aAAa,EAAEgB,aAAa,CAAChB;QAA9B,CAJK,CAAP;MAMD,CA1BwB,EA4B1B+B,IA5B0B,CA4BrB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CA5BG,CAA7B;MA6BA,MAAMC,OAAiB,GAAGT,oBAAoB,CAAC5C,GAArB,CAAyBsD,IAAI,IAAI;QACzD,OAAOA,IAAI,CAAC,CAAD,CAAX;MACD,CAFyB,CAA1B;MAGA,MAAMC,sBAA4C,GAAGX,oBAAoB,CAACY,IAArB,CACnDF,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,IAD+B,IAGjDjF,SAHiD,GAIjDuE,oBAAoB,CAAC5C,GAArB,CAAyBsD,IAAI,IAAI;QAC/B,OAAOA,IAAI,CAAC,CAAD,CAAX;MACD,CAFD,CAJJ;MAQA,OAAOtI,QAAQ,CAAC;QACdwC,OADc;QAEdD,SAFc;QAGdE,OAHc;QAIdW,YAJc;QAKdiF,OALc;QAMdrB,SANc;QAOduB,sBAPc;QAQdZ,oBARc;QASd;QACA,GAAGxF;MAVW,CAAD,CAAf;IAYD;;IACD,IAAIO,cAAJ,EAAoB;MAAA;;MAClB,MAAM;QACJoB,IAAI,EAAE2E,yBADF;QAEJrB,cAAc,EAAEsB,mCAFZ;QAGJrB,OAAO,EAAEsB,iBAHL;QAIJrB,YAAY,EAAEsB,sBAJV;QAKJxC,MAAM,EAAEyC,gBALJ;QAMJtB,oBAAoB,EAAEuB,8BANlB;QAOJhC,YAAY,EAAEyB,sBAPV;QAQJxB,kBARI;QASJC,SATI;QAUJb;MAVI,IAWF,KAAKH,WAAL,CAAiBtD,cAAjB,CAXJ;MAaA,MAAMiF,oBAAoB,GAAG;QAC3B,oDAAC,KAAKxF,KAAL,CAAWqE,kBAAZ,2DAAC,uBAAgC,CAAhC,CAAD,yEAAuC,SAAvC,GAAmD;UAACL;QAAD;MADxB,CAA7B;MAIA,OAAOnG,QAAQ,CAAC;QACdwC,OADc;QAEdD,SAFc;QAGdE,OAHc;QAIdW,YAJc;QAKd;QACAuE,oBANc;QAOd;QACAjF,cAAc,EAAE+F,yBARF;QASdM,wBAAwB,EAAEL,mCATZ;QAUdC,iBAVc;QAWdC,sBAXc;QAYdC,gBAZc;QAadC,8BAbc;QAcdP,sBAAsB,EAAEA,sBAAsB,GAC1C,CAACA,sBAAD,CAD0C,GAE1CA,sBAhBU;QAiBdxB,kBAjBc;QAkBdC,SAlBc;QAmBd;QACA,GAAG7E;MApBW,CAAD,CAAf;IAsBD;;IACD,OAAOnC,QAAQ,CAAC;MACdwC,OADc;MAEdD,SAFc;MAGdE,OAHc;MAIdW,YAJc;MAKd,GAAGjB;IALW,CAAD,CAAf;EAOD;;AAnY+E;;AAA5EG;;kFAAAA,+BACgC;EAClCyB,MAAM,EAAEV,SAD0B;EAElC4D,KAAK,EAAE,IAF2B;EAGlCC,GAAG,EAAE,IAH6B;EAIlC8B,QAAQ,EAAE,IAJwB;EAKlCtC,eAAe,EAAErD,SALiB;EAMlC4F,KAAK,EAAE,EAN2B;EAOlCC,KAAK,EAAE,EAP2B;EAQlCtF,eAAe,EAAE,IARiB;EASlCyC,sBAAsB,EAAE;AATU;;AAoYtC,iEAAe/D,aAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;AChnBA;AAEA;AAEA;AAWA;AACA;AACA;AACA;;AACO,SAASsH,gBAAT,CACLxK,KADK,EAGG;EAAA,IADRyK,UACQ,uEAD4B,QAC5B;;EACR,IAAI,CAAC9H,qDAAO,CAAC3C,KAAD,CAAZ,EAAqB;IACnB,OAAO,QAAP;EACD;;EACD,OAAO0K,wCAAwC,CAAC1K,KAAD,EAAQyK,UAAR,CAA/C;AACD;AAED;AACA;AACA;;AACO,SAASC,wCAAT,CACL1K,KADK,EAEL2K,IAFK,EAGG;EACR,IAAI,CAAChI,qDAAO,CAAC3C,KAAD,CAAZ,EAAqB;IACnB,OAAO,QAAP;EACD;;EACD,QAAQ2K,IAAR;IACE,KAAK,SAAL;IACA,KAAK,QAAL;MACE,OAAO3K,KAAK,CAAC4K,cAAN,EAAP;;IACF,KAAK,YAAL;MACE,OAAOV,yEAAgB,CAAClK,KAAD,EAAQ,CAAR,CAAvB;;IACF,KAAK,UAAL;MACE,OAAOmK,oEAAW,CAACnK,KAAK,GAAG,IAAT,EAAe,CAAf,EAAkB,IAAlB,CAAlB;;IACF,KAAK,MAAL;MACE,OAAO+J,8DAAgB,CAAC/J,KAAD,CAAvB;;IACF;MACE,OAAOA,KAAK,CAAC6K,QAAN,EAAP;EAXJ;AAaD;AAED;AACA;AACA;AACA;;AACO,SAASC,kBAAT,CACL9K,KADK,EAELyK,UAFK,EAKG;EAAA,IAFRM,YAEQ,uEAFgB,KAEhB;EAAA,IADRC,YACQ;EACR,OAAOC,0CAA0C,CAC/CjL,KAD+C,EAE/CyK,UAF+C,EAG/CM,YAH+C,EAI/CC,YAJ+C,CAAjD;AAMD;AAED;AACA;AACA;;AACO,SAASC,0CAAT,CACLjL,KADK,EAEL2K,IAFK,EAKG;EAAA,IAFRI,YAEQ,uEAFgB,KAEhB;EAAA,IADRC,YACQ;;EACR,QAAQL,IAAR;IACE,KAAK,SAAL;IACA,KAAK,QAAL;MACE,OAAOI,YAAY,GAAGd,gFAAuB,CAACjK,KAAD,CAA1B,GAAoCA,KAAK,CAAC4K,cAAN,EAAvD;;IACF,KAAK,YAAL;MACE,OAAOV,yEAAgB,CAAClK,KAAD,EAAQ,CAAR,CAAvB;;IACF,KAAK,UAAL;MACE,OAAOkL,YAAY,CAAClL,KAAD,EAAQgL,YAAR,CAAnB;;IACF,KAAK,MAAL;MACE,OAAOjB,8DAAgB,CAAC/J,KAAD,EAAQ,CAAR,CAAvB;;IACF;MACE,OAAOA,KAAK,CAAC6K,QAAN,EAAP;EAXJ;AAaD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASK,YAAT,CAAsBlL,KAAtB,EAAqCgL,YAArC,EAAoE;EAAA;;EACzE,iBAAAA,YAAY,UAAZ,+CAAAA,YAAY,GAAKG,kBAAkB,CAACnL,KAAD,CAAnC;;EACA,IAAIA,KAAK,KAAK,CAAd,EAAiB;IACf,OAAO,GAAP;EACD;;EACD,QAAQgL,YAAR;IACE,KAAKT,yDAAL;MAAW;QACT,MAAMa,KAAK,GAAG,CAACpL,KAAK,GAAGuK,yDAAT,EAAec,OAAf,CAAuB,CAAvB,CAAd;QACA,OAAO/L,gDAAC,CAAC,MAAD,EAAS8L,KAAT,CAAR;MACD;;IACD,KAAKpB,wDAAL;MAAU;QACR,MAAMoB,KAAK,GAAG,CAACpL,KAAK,GAAGgK,wDAAT,EAAcqB,OAAd,CAAsB,CAAtB,CAAd;QACA,OAAO/L,gDAAC,CAAC,KAAD,EAAQ8L,KAAR,CAAR;MACD;;IACD,KAAKhB,yDAAL;MAAW;QACT,MAAMgB,KAAK,GAAG,CAACpL,KAAK,GAAGoK,yDAAT,EAAeiB,OAAf,CAAuB,CAAvB,CAAd;QACA,OAAO/L,gDAAC,CAAC,MAAD,EAAS8L,KAAT,CAAR;MACD;;IACD,KAAKf,2DAAL;MAAa;QACX,MAAMe,KAAK,GAAG,CAACpL,KAAK,GAAGqK,2DAAT,EAAiBgB,OAAjB,CAAyB,CAAzB,CAAd;QACA,OAAO/L,gDAAC,CAAC,OAAD,EAAU8L,KAAV,CAAR;MACD;;IACD,KAAKd,2DAAL;MAAa;QACX,MAAMc,KAAK,GAAG,CAACpL,KAAK,GAAGsK,2DAAT,EAAiBe,OAAjB,CAAyB,CAAzB,CAAd;QACA,OAAO/L,gDAAC,CAAC,KAAD,EAAQ8L,KAAR,CAAR;MACD;;IACD;MACE,MAAMA,KAAK,GAAGpL,KAAK,CAACqL,OAAN,CAAc,CAAd,CAAd;MACA,OAAO/L,gDAAC,CAAC,MAAD,EAAS8L,KAAT,CAAR;EAvBJ;AAyBD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,sBAAT,CAAgCC,MAAhC,EAAkDC,MAAlD,EAAkF;EAAA;;EACvF,IAAIC,KAAJ;;EACA,gBAAIF,MAAM,CAAC,CAAD,CAAV,qCAAI,SAAW7G,IAAf,EAAqB;IAAA;;IACnB,IAAIgH,SAAS,GAAGH,MAAM,CAAC,CAAD,CAAtB;IACA,IAAII,SAAJ;IACAJ,MAAM,CAACK,OAAP,CAAe,OAAqBC,GAArB,KAA6B;MAAA;;MAAA,IAA5B;QAAC1F,UAAD;QAAazB;MAAb,CAA4B;;MAC1C,IAAI,CAAA8G,MAAM,SAAN,IAAAA,MAAM,WAAN,gCAAAA,MAAM,CAAEM,QAAR,sEAAmB3F,UAAnB,OAAmC,KAAnC,IAA4CzB,IAAI,CAACM,MAArD,EAA6D;QAAA;;QAC3D0G,SAAS,GAAGH,MAAM,CAACM,GAAD,CAAlB;QACA,cAAAF,SAAS,UAAT,yCAAAA,SAAS,GAAKJ,MAAM,CAACM,GAAD,CAApB;MACD;IACF,CALD;;IAMA,mBAAIF,SAAJ,wCAAI,YAAWjH,IAAf,EAAqB;MACnB,MAAMqH,GAAG,GAAGjH,IAAI,CAACiH,GAAL,CACV,GAAGJ,SAAS,CAACjH,IAAV,CAAekB,GAAf,CAAmB;QAAA,IAAC;UAAC5F;QAAD,CAAD;QAAA,OAAaA,KAAb;MAAA,CAAnB,EAAuCgM,MAAvC,CAA8ChM,KAAK,IAAI,CAAC,CAACA,KAAzD,CADO,CAAZ;MAGA,MAAMiM,GAAG,GAAGnH,IAAI,CAACmH,GAAL,CACV,GAAGP,SAAS,CAAChH,IAAV,CAAekB,GAAf,CAAmB;QAAA,IAAC;UAAC5F;QAAD,CAAD;QAAA,OAAaA,KAAb;MAAA,CAAnB,EAAuCgM,MAAvC,CAA8ChM,KAAK,IAAI,CAAC,CAACA,KAAzD,CADO,CAAZ;MAGAyL,KAAK,GAAG;QAACM,GAAD;QAAME;MAAN,CAAR;IACD;EACF;;EACD,OAAOR,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACO,SAASS,eAAT,CACLX,MADK,EAELC,MAFK,EAGG;EACR,IAAIR,YAAY,GAAG,CAAnB;EACA,MAAMS,KAAK,GAAGH,sBAAsB,CAACC,MAAD,EAASC,MAAT,CAApC;;EACA,IAAIC,KAAJ,EAAW;IACT,MAAMU,GAAG,GAAG,CAACV,KAAK,CAACM,GAAN,GAAYN,KAAK,CAACQ,GAAnB,IAA0B,CAAtC;IACAjB,YAAY,GAAGG,kBAAkB,CAAC,CAACM,KAAK,CAACM,GAAN,GAAYN,KAAK,CAACQ,GAAnB,IAA0B,CAA3B,CAAjC,CAFS,CAEuD;;IAEhE,MAAMG,WAAW,GAAG,CAACD,GAAG,GAAGnB,YAAP,EAAqBK,OAArB,CAA6B,CAA7B,EAAgCrG,MAApD;;IACA,IAAIoH,WAAW,GAAG,CAAlB,EAAqB;MACnBpB,YAAY,GAAGG,kBAAkB,CAACgB,GAAD,CAAjC;IACD;EACF;;EACD,OAAOnB,YAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACO,SAASG,kBAAT,CAA4BnL,KAA5B,EAA2C;EAChD,IAAIA,KAAK,IAAIuK,yDAAb,EAAmB;IACjB,OAAOA,yDAAP;EACD;;EACD,IAAIvK,KAAK,IAAIgK,wDAAb,EAAkB;IAChB,OAAOA,wDAAP;EACD;;EACD,IAAIhK,KAAK,IAAIoK,yDAAb,EAAmB;IACjB,OAAOA,yDAAP;EACD;;EACD,IAAIpK,KAAK,IAAIqK,2DAAb,EAAqB;IACnB,OAAOA,2DAAP;EACD;;EACD,IAAIrK,KAAK,IAAIsK,2DAAb,EAAqB;IACnB,OAAOA,2DAAP;EACD;;EACD,OAAO,CAAP;AACD","sources":["webpack:///./app/components/banner.tsx","webpack:///./app/components/charts/eventsRequest.tsx","webpack:///./app/utils/discover/charts.tsx"],"sourcesContent":["import {useState} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {IconClose} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nconst makeKey = (prefix: string) => `${prefix}-banner-dismissed`;\n\nfunction dismissBanner(bannerKey: string) {\n  localStorage.setItem(makeKey(bannerKey), 'true');\n}\n\nfunction useDismissable(bannerKey: string) {\n  const key = makeKey(bannerKey);\n  const [value, setValue] = useState(localStorage.getItem(key));\n\n  const dismiss = () => {\n    setValue('true');\n    dismissBanner(bannerKey);\n  };\n\n  return [value === 'true', dismiss] as const;\n}\n\ntype BannerWrapperProps = {\n  backgroundComponent?: React.ReactNode;\n  backgroundImg?: string;\n};\n\ntype Props = BannerWrapperProps & {\n  className?: string;\n  dismissKey?: string;\n  isDismissable?: boolean;\n  subtitle?: string;\n  title?: string;\n};\n\ntype BannerType = React.FC<Props> & {\n  /**\n   * Helper function to hide banners outside of their usage\n   */\n  dismiss: typeof dismissBanner;\n};\n\nconst Banner: BannerType = ({\n  title,\n  subtitle,\n  isDismissable = true,\n  dismissKey = 'generic-banner',\n  className,\n  backgroundImg,\n  backgroundComponent,\n  children,\n}) => {\n  const [dismissed, dismiss] = useDismissable(dismissKey);\n\n  if (dismissed) {\n    return null;\n  }\n\n  return (\n    <BannerWrapper backgroundImg={backgroundImg} className={className}>\n      {backgroundComponent}\n      {isDismissable ? <CloseButton onClick={dismiss} aria-label={t('Close')} /> : null}\n      <BannerContent>\n        <BannerTitle>{title}</BannerTitle>\n        <BannerSubtitle>{subtitle}</BannerSubtitle>\n        <StyledButtonBar gap={1}>{children}</StyledButtonBar>\n      </BannerContent>\n    </BannerWrapper>\n  );\n};\n\nBanner.dismiss = dismissBanner;\n\nconst BannerWrapper = styled('div')<BannerWrapperProps>`\n  ${p =>\n    p.backgroundImg\n      ? css`\n          background: url(${p.backgroundImg});\n          background-repeat: no-repeat;\n          background-size: cover;\n          background-position: center center;\n        `\n      : css`\n          background-color: ${p.theme.gray500};\n        `}\n  display: flex;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  margin-bottom: ${space(2)};\n  box-shadow: ${p => p.theme.dropShadowLight};\n  border-radius: ${p => p.theme.borderRadius};\n  height: 180px;\n  color: ${p => p.theme.white};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    height: 220px;\n  }\n`;\n\nconst BannerContent = styled('div')`\n  position: absolute;\n  display: grid;\n  justify-items: center;\n  grid-template-rows: repeat(3, max-content);\n  text-align: center;\n  padding: ${space(4)};\n`;\n\nconst BannerTitle = styled('h1')`\n  margin: 0;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    font-size: 40px;\n  }\n`;\n\nconst BannerSubtitle = styled('div')`\n  margin: 0;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    font-size: ${p => p.theme.fontSizeExtraLarge};\n  }\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  margin-top: ${space(2)};\n  width: fit-content;\n`;\n\nconst CloseButton = styled(Button)`\n  position: absolute;\n  display: block;\n  top: ${space(2)};\n  right: ${space(2)};\n  color: ${p => p.theme.white};\n  cursor: pointer;\n  z-index: 1;\n`;\n\nCloseButton.defaultProps = {\n  icon: <IconClose />,\n  ['aria-label']: t('Close'),\n  priority: 'link',\n  borderless: true,\n  size: 'xs',\n};\n\nexport default Banner;\n","import {PureComponent} from 'react';\nimport isEqual from 'lodash/isEqual';\nimport omitBy from 'lodash/omitBy';\n\nimport {doEventsRequest} from 'sentry/actionCreators/events';\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport LoadingPanel from 'sentry/components/charts/loadingPanel';\nimport {\n  canIncludePreviousPeriod,\n  getPreviousSeriesName,\n  isMultiSeriesStats,\n} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {\n  DateString,\n  EventsStats,\n  EventsStatsData,\n  MultiSeriesEventsStats,\n  OrganizationSummary,\n} from 'sentry/types';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport {stripEquationPrefix} from 'sentry/utils/discover/fields';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\n\nexport type TimeSeriesData = {\n  allTimeseriesData?: EventsStatsData;\n  comparisonTimeseriesData?: Series[];\n  originalPreviousTimeseriesData?: EventsStatsData | null;\n  originalTimeseriesData?: EventsStatsData;\n  previousTimeseriesData?: Series[] | null;\n  timeAggregatedData?: Series | {};\n  timeframe?: {end: number; start: number};\n  // timeseries data\n  timeseriesData?: Series[];\n  timeseriesTotals?: {count: number};\n};\n\ntype LoadingStatus = {\n  /**\n   * Whether there was an error retrieving data\n   */\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  errorMessage?: string;\n};\n\n// Can hold additional data from the root an events stat object (eg. start, end, order, isMetricsData).\ninterface AdditionalSeriesInfo {\n  isMetricsData?: boolean;\n}\n\nexport type RenderProps = LoadingStatus &\n  TimeSeriesData & {\n    results?: Series[]; // Chart with multiple series.\n    seriesAdditionalInfo?: Record<string, AdditionalSeriesInfo>;\n  };\n\ntype DefaultProps = {\n  /**\n   * Include data for previous period\n   */\n  includePrevious: boolean;\n  /**\n   * Transform the response data to be something ingestible by charts\n   */\n  includeTransformedData: boolean;\n  /**\n   * Interval to group results in\n   *\n   * e.g. 1d, 1h, 1m, 1s\n   */\n  interval: string;\n  /**\n   * number of rows to return\n   */\n  limit: number;\n  /**\n   * The query string to search events by\n   */\n  query: string;\n  /**\n   * Time delta for comparing intervals of alert metrics, in seconds\n   */\n  comparisonDelta?: number;\n  /**\n   * Absolute end date for query\n   */\n  end?: DateString;\n  /**\n   * Relative time period for query.\n   *\n   * Use `start` and `end` for absolute dates.\n   *\n   * e.g. 24h, 7d, 30d\n   */\n  period?: string | null;\n  /**\n   * Absolute start date for query\n   */\n  start?: DateString;\n};\n\ntype EventsRequestPartialProps = {\n  /**\n   * API client instance\n   */\n  api: Client;\n  children: (renderProps: RenderProps) => React.ReactNode;\n  organization: OrganizationSummary;\n  /**\n   * Whether or not to include the last partial bucket. This happens for example when the\n   * current time is 11:26 and the last bucket ranges from 11:25-11:30. This means that\n   * the last bucket contains 1 minute worth of data while the rest contains 5 minutes.\n   *\n   * This flag indicates whether or not this last bucket should be included in the result.\n   */\n  partial: boolean;\n  /**\n   * Discover needs confirmation to run >30 day >10 project queries,\n   * optional and when not passed confirmation is not required.\n   */\n  confirmedQuery?: boolean;\n  /**\n   * Name used for display current series dataset tooltip\n   */\n  currentSeriesNames?: string[];\n  /**\n   * Optional callback to further process raw events request response data\n   */\n  dataLoadedCallback?: (any: EventsStats | MultiSeriesEventsStats | null) => void;\n  /**\n   * List of environments to query\n   */\n  environment?: Readonly<string[]>;\n  /**\n   * Is query out of retention\n   */\n  expired?: boolean;\n  /**\n   * List of fields to group with when doing a topEvents request.\n   */\n  field?: string[];\n  /**\n   * Allows overriding the pathname.\n   */\n  generatePathname?: (org: OrganizationSummary) => string;\n  /**\n   * Hide error toast (used for pages which also query eventsV2). Stops error appearing as a toast.\n   */\n  hideError?: boolean;\n  /**\n   * Initial loading state\n   */\n  loading?: boolean;\n  /**\n   * Query name used for displaying error toast if it is out of retention\n   */\n  name?: string;\n  /**\n   * A way to control error if error handling is not owned by the toast.\n   */\n  onError?: (error: string) => void;\n  /**\n   * How to order results when getting top events.\n   */\n  orderby?: string;\n  previousSeriesNames?: string[];\n  /**\n   * List of project ids to query\n   */\n  project?: Readonly<number[]>;\n  /**\n   * A container for query batching data and functions.\n   */\n  queryBatching?: QueryBatching;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * A unique name for what's triggering this request, see organization_events_stats for an allowlist\n   */\n  referrer?: string;\n  /**\n   * Should loading be shown.\n   */\n  showLoading?: boolean;\n  /**\n   * List of team ids to query\n   */\n  team?: Readonly<string | string[]>;\n  /**\n   * The number of top results to get. When set a multi-series result will be returned\n   * in the `results` child render function.\n   */\n  topEvents?: number;\n  /**\n   * Whether or not to zerofill results\n   */\n  withoutZerofill?: boolean;\n  /**\n   * The yAxis being plotted. If multiple yAxis are requested,\n   * the child render function will be called with `results`\n   */\n  yAxis?: string | string[];\n};\n\ntype TimeAggregationProps =\n  | {includeTimeAggregation: true; timeAggregationSeriesName: string}\n  | {includeTimeAggregation?: false; timeAggregationSeriesName?: undefined};\n\nexport type EventsRequestProps = DefaultProps &\n  TimeAggregationProps &\n  EventsRequestPartialProps;\n\ntype EventsRequestState = {\n  errored: boolean;\n  fetchedWithPrevious: boolean;\n  reloading: boolean;\n  timeseriesData: null | EventsStats | MultiSeriesEventsStats;\n  errorMessage?: string;\n};\n\nconst propNamesToIgnore = [\n  'api',\n  'children',\n  'organization',\n  'loading',\n  'queryBatching',\n  'generatePathname',\n];\nconst omitIgnoredProps = (props: EventsRequestProps) =>\n  omitBy(props, (_value, key) => propNamesToIgnore.includes(key));\n\nclass EventsRequest extends PureComponent<EventsRequestProps, EventsRequestState> {\n  static defaultProps: DefaultProps = {\n    period: undefined,\n    start: null,\n    end: null,\n    interval: '1d',\n    comparisonDelta: undefined,\n    limit: 15,\n    query: '',\n    includePrevious: true,\n    includeTransformedData: true,\n  };\n\n  state: EventsRequestState = {\n    reloading: !!this.props.loading,\n    errored: false,\n    timeseriesData: null,\n    fetchedWithPrevious: false,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: EventsRequestProps) {\n    if (isEqual(omitIgnoredProps(prevProps), omitIgnoredProps(this.props))) {\n      return;\n    }\n    this.fetchData();\n  }\n\n  componentWillUnmount() {\n    this.unmounting = true;\n  }\n\n  private unmounting: boolean = false;\n\n  fetchData = async () => {\n    const {api, confirmedQuery, onError, expired, name, hideError, ...props} = this.props;\n    let timeseriesData: EventsStats | MultiSeriesEventsStats | null = null;\n\n    if (confirmedQuery === false) {\n      return;\n    }\n\n    this.setState(state => ({\n      reloading: state.timeseriesData !== null,\n      errored: false,\n      errorMessage: undefined,\n    }));\n\n    let errorMessage;\n    if (expired) {\n      errorMessage = t(\n        '%s has an invalid date range. Please try a more recent date range.',\n        name\n      );\n      addErrorMessage(errorMessage, {append: true});\n\n      this.setState({\n        errored: true,\n        errorMessage,\n      });\n    } else {\n      try {\n        api.clear();\n        timeseriesData = await doEventsRequest(api, props);\n      } catch (resp) {\n        if (resp && resp.responseJSON && resp.responseJSON.detail) {\n          errorMessage = resp.responseJSON.detail;\n        } else {\n          errorMessage = t('Error loading chart data');\n        }\n        if (!hideError) {\n          addErrorMessage(errorMessage);\n        }\n        if (onError) {\n          onError(errorMessage);\n        }\n        this.setState({\n          errored: true,\n          errorMessage,\n        });\n      }\n    }\n\n    if (this.unmounting) {\n      return;\n    }\n\n    this.setState({\n      reloading: false,\n      timeseriesData,\n      fetchedWithPrevious: props.includePrevious,\n    });\n    if (props.dataLoadedCallback) {\n      props.dataLoadedCallback(timeseriesData);\n    }\n  };\n\n  /**\n   * Retrieves dataset for the current period (since data can potentially\n   * contain previous period's data), as well as the previous period if\n   * possible.\n   *\n   * Returns `null` if data does not exist\n   */\n  getData = (\n    data: EventsStatsData\n  ): {current: EventsStatsData; previous: EventsStatsData | null} => {\n    const {fetchedWithPrevious} = this.state;\n    const {period, includePrevious} = this.props;\n\n    const hasPreviousPeriod =\n      fetchedWithPrevious || canIncludePreviousPeriod(includePrevious, period);\n    // Take the floor just in case, but data should always be divisible by 2\n    const dataMiddleIndex = Math.floor(data.length / 2);\n    return {\n      current: hasPreviousPeriod ? data.slice(dataMiddleIndex) : data,\n      previous: hasPreviousPeriod ? data.slice(0, dataMiddleIndex) : null,\n    };\n  };\n\n  // This aggregates all values per `timestamp`\n  calculateTotalsPerTimestamp(\n    data: EventsStatsData,\n    getName: (\n      timestamp: number,\n      countArray: {count: number}[],\n      i: number\n    ) => number = timestamp => timestamp * 1000\n  ): SeriesDataUnit[] {\n    return data.map(([timestamp, countArray], i) => ({\n      name: getName(timestamp, countArray, i),\n      value: countArray.reduce((acc, {count}) => acc + count, 0),\n    }));\n  }\n\n  /**\n   * Get previous period data, but transform timestamps so that data fits unto\n   * the current period's data axis\n   */\n  transformPreviousPeriodData(\n    current: EventsStatsData,\n    previous: EventsStatsData | null,\n    seriesName?: string\n  ): Series | null {\n    // Need the current period data array so we can take the timestamp\n    // so we can be sure the data lines up\n    if (!previous) {\n      return null;\n    }\n\n    return {\n      seriesName: seriesName ?? 'Previous',\n      data: this.calculateTotalsPerTimestamp(\n        previous,\n        (_timestamp, _countArray, i) => current[i][0] * 1000\n      ),\n      stack: 'previous',\n    };\n  }\n\n  /**\n   * Aggregate all counts for each time stamp\n   */\n  transformAggregatedTimeseries(data: EventsStatsData, seriesName: string = ''): Series {\n    return {\n      seriesName,\n      data: this.calculateTotalsPerTimestamp(data),\n    };\n  }\n\n  /**\n   * Transforms query response into timeseries data to be used in a chart\n   */\n  transformTimeseriesData(data: EventsStatsData, seriesName?: string): Series[] {\n    return [\n      {\n        seriesName: seriesName || 'Current',\n        data: data.map(([timestamp, countsForTimestamp]) => ({\n          name: timestamp * 1000,\n          value: countsForTimestamp.reduce((acc, {count}) => acc + count, 0),\n        })),\n      },\n    ];\n  }\n\n  /**\n   * Transforms comparisonCount in query response into timeseries data to be used in a comparison chart for change alerts\n   */\n  transformComparisonTimeseriesData(data: EventsStatsData): Series[] {\n    return [\n      {\n        seriesName: 'comparisonCount()',\n        data: data.map(([timestamp, countsForTimestamp]) => ({\n          name: timestamp * 1000,\n          value: countsForTimestamp.reduce(\n            (acc, {comparisonCount}) => acc + (comparisonCount ?? 0),\n            0\n          ),\n        })),\n      },\n    ];\n  }\n\n  processData(response: EventsStats, seriesIndex: number = 0, seriesName?: string) {\n    const {data, isMetricsData, totals} = response;\n    const {\n      includeTransformedData,\n      includeTimeAggregation,\n      timeAggregationSeriesName,\n      currentSeriesNames,\n      previousSeriesNames,\n      comparisonDelta,\n    } = this.props;\n    const {current, previous} = this.getData(data);\n    const transformedData = includeTransformedData\n      ? this.transformTimeseriesData(\n          current,\n          seriesName ?? currentSeriesNames?.[seriesIndex]\n        )\n      : [];\n    const transformedComparisonData =\n      includeTransformedData && comparisonDelta\n        ? this.transformComparisonTimeseriesData(current)\n        : [];\n    const previousData = includeTransformedData\n      ? this.transformPreviousPeriodData(\n          current,\n          previous,\n          (seriesName ? getPreviousSeriesName(seriesName) : undefined) ??\n            previousSeriesNames?.[seriesIndex]\n        )\n      : null;\n    const timeAggregatedData = includeTimeAggregation\n      ? this.transformAggregatedTimeseries(current, timeAggregationSeriesName || '')\n      : {};\n    const timeframe =\n      response.start && response.end\n        ? !previous\n          ? {\n              start: response.start * 1000,\n              end: response.end * 1000,\n            }\n          : {\n              // Find the midpoint of start & end since previous includes 2x data\n              start: (response.start + response.end) * 500,\n              end: response.end * 1000,\n            }\n        : undefined;\n\n    const processedData = {\n      data: transformedData,\n      comparisonData: transformedComparisonData,\n      allData: data,\n      originalData: current,\n      totals,\n      isMetricsData,\n      originalPreviousData: previous,\n      previousData,\n      timeAggregatedData,\n      timeframe,\n    };\n\n    return processedData;\n  }\n\n  render() {\n    const {children, showLoading, ...props} = this.props;\n    const {topEvents} = this.props;\n    const {timeseriesData, reloading, errored, errorMessage} = this.state;\n    // Is \"loading\" if data is null\n    const loading = this.props.loading || timeseriesData === null;\n\n    if (showLoading && loading) {\n      return <LoadingPanel data-test-id=\"events-request-loading\" />;\n    }\n    if (isMultiSeriesStats(timeseriesData, defined(topEvents))) {\n      // Convert multi-series results into chartable series. Multi series results\n      // are created when multiple yAxis are used or a topEvents request is made.\n      // Convert the timeseries data into a multi-series result set.\n      // As the server will have replied with a map like:\n      // {[titleString: string]: EventsStats}\n      let timeframe: {end: number; start: number} | undefined = undefined;\n      const seriesAdditionalInfo: Record<string, AdditionalSeriesInfo> = {};\n      const sortedTimeseriesData = Object.keys(timeseriesData)\n        .map(\n          (\n            seriesName: string,\n            index: number\n          ): [number, Series, Series | null, AdditionalSeriesInfo] => {\n            const seriesData: EventsStats = timeseriesData[seriesName];\n            const processedData = this.processData(\n              seriesData,\n              index,\n              stripEquationPrefix(seriesName)\n            );\n            if (!timeframe) {\n              timeframe = processedData.timeframe;\n            }\n            if (processedData.isMetricsData) {\n              seriesAdditionalInfo[seriesName] = {\n                isMetricsData: processedData.isMetricsData,\n              };\n            }\n            return [\n              seriesData.order || 0,\n              processedData.data[0],\n              processedData.previousData,\n              {isMetricsData: processedData.isMetricsData},\n            ];\n          }\n        )\n        .sort((a, b) => a[0] - b[0]);\n      const results: Series[] = sortedTimeseriesData.map(item => {\n        return item[1];\n      });\n      const previousTimeseriesData: Series[] | undefined = sortedTimeseriesData.some(\n        item => item[2] === null\n      )\n        ? undefined\n        : sortedTimeseriesData.map(item => {\n            return item[2] as Series;\n          });\n\n      return children({\n        loading,\n        reloading,\n        errored,\n        errorMessage,\n        results,\n        timeframe,\n        previousTimeseriesData,\n        seriesAdditionalInfo,\n        // sometimes we want to reference props that were given to EventsRequest\n        ...props,\n      });\n    }\n    if (timeseriesData) {\n      const {\n        data: transformedTimeseriesData,\n        comparisonData: transformedComparisonTimeseriesData,\n        allData: allTimeseriesData,\n        originalData: originalTimeseriesData,\n        totals: timeseriesTotals,\n        originalPreviousData: originalPreviousTimeseriesData,\n        previousData: previousTimeseriesData,\n        timeAggregatedData,\n        timeframe,\n        isMetricsData,\n      } = this.processData(timeseriesData);\n\n      const seriesAdditionalInfo = {\n        [this.props.currentSeriesNames?.[0] ?? 'current']: {isMetricsData},\n      };\n\n      return children({\n        loading,\n        reloading,\n        errored,\n        errorMessage,\n        // meta data,\n        seriesAdditionalInfo,\n        // timeseries data\n        timeseriesData: transformedTimeseriesData,\n        comparisonTimeseriesData: transformedComparisonTimeseriesData,\n        allTimeseriesData,\n        originalTimeseriesData,\n        timeseriesTotals,\n        originalPreviousTimeseriesData,\n        previousTimeseriesData: previousTimeseriesData\n          ? [previousTimeseriesData]\n          : previousTimeseriesData,\n        timeAggregatedData,\n        timeframe,\n        // sometimes we want to reference props that were given to EventsRequest\n        ...props,\n      });\n    }\n    return children({\n      loading,\n      reloading,\n      errored,\n      errorMessage,\n      ...props,\n    });\n  }\n}\nexport default EventsRequest;\n","import {LegendComponentOption} from 'echarts';\n\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {defined, formatBytesBase2} from 'sentry/utils';\nimport {AggregationOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(\n  value: number | null,\n  outputType: AggregationOutputType = 'number'\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  return tooltipFormatterUsingAggregateOutputType(value, outputType);\n}\n\n/**\n * Formatter for chart tooltips that takes the aggregate output type directly\n */\nexport function tooltipFormatterUsingAggregateOutputType(\n  value: number | null,\n  type: string\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    case 'size':\n      return formatBytesBase2(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  outputType: AggregationOutputType,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  return axisLabelFormatterUsingAggregateOutputType(\n    value,\n    outputType,\n    abbreviation,\n    durationUnit\n  );\n}\n\n/**\n * Formatter for chart axis labels that takes the aggregate output type directly\n */\nexport function axisLabelFormatterUsingAggregateOutputType(\n  value: number,\n  type: string,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value, durationUnit);\n    case 'size':\n      return formatBytesBase2(value, 0);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number, durationUnit?: number): string {\n  durationUnit ??= categorizeDuration(value);\n  if (value === 0) {\n    return '0';\n  }\n  switch (durationUnit) {\n    case WEEK: {\n      const label = (value / WEEK).toFixed(0);\n      return t('%swk', label);\n    }\n    case DAY: {\n      const label = (value / DAY).toFixed(0);\n      return t('%sd', label);\n    }\n    case HOUR: {\n      const label = (value / HOUR).toFixed(0);\n      return t('%shr', label);\n    }\n    case MINUTE: {\n      const label = (value / MINUTE).toFixed(0);\n      return t('%smin', label);\n    }\n    case SECOND: {\n      const label = (value / SECOND).toFixed(0);\n      return t('%ss', label);\n    }\n    default:\n      const label = value.toFixed(0);\n      return t('%sms', label);\n  }\n}\n\n/**\n * Given an array of series and an eCharts legend object,\n * finds the range of y values (min and max) based on which series is selected in the legend\n * Assumes series[0] > series[1] > ...\n * @param series Array of eCharts series\n * @param legend eCharts legend object\n * @returns\n */\nexport function findRangeOfMultiSeries(series: Series[], legend?: LegendComponentOption) {\n  let range: {max: number; min: number} | undefined;\n  if (series[0]?.data) {\n    let minSeries = series[0];\n    let maxSeries;\n    series.forEach(({seriesName, data}, idx) => {\n      if (legend?.selected?.[seriesName] !== false && data.length) {\n        minSeries = series[idx];\n        maxSeries ??= series[idx];\n      }\n    });\n    if (maxSeries?.data) {\n      const max = Math.max(\n        ...maxSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      const min = Math.min(\n        ...minSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      range = {max, min};\n    }\n  }\n  return range;\n}\n\n/**\n * Given a eCharts series and legend, returns the unit to be used on the yAxis for a duration chart\n * @param series eCharts series array\n * @param legend eCharts legend object\n * @returns\n */\nexport function getDurationUnit(\n  series: Series[],\n  legend?: LegendComponentOption\n): number {\n  let durationUnit = 0;\n  const range = findRangeOfMultiSeries(series, legend);\n  if (range) {\n    const avg = (range.max + range.min) / 2;\n    durationUnit = categorizeDuration((range.max - range.min) / 5); // avg of 5 yAxis ticks per chart\n\n    const numOfDigits = (avg / durationUnit).toFixed(0).length;\n    if (numOfDigits > 6) {\n      durationUnit = categorizeDuration(avg);\n    }\n  }\n  return durationUnit;\n}\n\n/**\n * Categorizes the duration by Second, Minute, Hour, etc\n * Ex) categorizeDuration(1200) = MINUTE\n * @param value Duration in ms\n */\nexport function categorizeDuration(value): number {\n  if (value >= WEEK) {\n    return WEEK;\n  }\n  if (value >= DAY) {\n    return DAY;\n  }\n  if (value >= HOUR) {\n    return HOUR;\n  }\n  if (value >= MINUTE) {\n    return MINUTE;\n  }\n  if (value >= SECOND) {\n    return SECOND;\n  }\n  return 1;\n}\n"],"names":["useState","css","Button","ButtonBar","IconClose","t","space","makeKey","prefix","dismissBanner","bannerKey","localStorage","setItem","useDismissable","key","value","setValue","getItem","dismiss","Banner","title","subtitle","isDismissable","dismissKey","className","backgroundImg","backgroundComponent","children","dismissed","BannerWrapper","p","theme","gray500","dropShadowLight","borderRadius","white","breakpoints","small","BannerContent","BannerTitle","BannerSubtitle","fontSizeExtraLarge","StyledButtonBar","CloseButton","defaultProps","icon","priority","borderless","size","PureComponent","isEqual","omitBy","doEventsRequest","addErrorMessage","LoadingPanel","canIncludePreviousPeriod","getPreviousSeriesName","isMultiSeriesStats","defined","stripEquationPrefix","propNamesToIgnore","omitIgnoredProps","props","_value","includes","EventsRequest","reloading","loading","errored","timeseriesData","fetchedWithPrevious","api","confirmedQuery","onError","expired","name","hideError","setState","state","errorMessage","undefined","append","clear","resp","responseJSON","detail","unmounting","includePrevious","dataLoadedCallback","data","period","hasPreviousPeriod","dataMiddleIndex","Math","floor","length","current","slice","previous","componentDidMount","fetchData","componentDidUpdate","prevProps","componentWillUnmount","calculateTotalsPerTimestamp","getName","timestamp","map","i","countArray","reduce","acc","count","transformPreviousPeriodData","seriesName","_timestamp","_countArray","stack","transformAggregatedTimeseries","transformTimeseriesData","countsForTimestamp","transformComparisonTimeseriesData","comparisonCount","processData","response","seriesIndex","isMetricsData","totals","includeTransformedData","includeTimeAggregation","timeAggregationSeriesName","currentSeriesNames","previousSeriesNames","comparisonDelta","getData","transformedData","transformedComparisonData","previousData","timeAggregatedData","timeframe","start","end","processedData","comparisonData","allData","originalData","originalPreviousData","render","showLoading","topEvents","seriesAdditionalInfo","sortedTimeseriesData","Object","keys","index","seriesData","order","sort","a","b","results","item","previousTimeseriesData","some","transformedTimeseriesData","transformedComparisonTimeseriesData","allTimeseriesData","originalTimeseriesData","timeseriesTotals","originalPreviousTimeseriesData","comparisonTimeseriesData","interval","limit","query","formatBytesBase2","DAY","formatAbbreviatedNumber","formatPercentage","getDuration","HOUR","MINUTE","SECOND","WEEK","tooltipFormatter","outputType","tooltipFormatterUsingAggregateOutputType","type","toLocaleString","toString","axisLabelFormatter","abbreviation","durationUnit","axisLabelFormatterUsingAggregateOutputType","axisDuration","categorizeDuration","label","toFixed","findRangeOfMultiSeries","series","legend","range","minSeries","maxSeries","forEach","idx","selected","max","filter","min","getDurationUnit","avg","numOfDigits"],"sourceRoot":""}