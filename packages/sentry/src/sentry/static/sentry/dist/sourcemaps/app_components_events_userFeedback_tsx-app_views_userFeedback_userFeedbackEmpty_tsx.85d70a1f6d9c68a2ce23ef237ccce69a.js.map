{"version":3,"file":"chunks/app_components_events_userFeedback_tsx-app_views_userFeedback_userFeedbackEmpty_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AASA,MAAMU,iBAAN,SAAgCV,4CAAhC,CAAiD;EAC/CW,MAAM,GAAG;IACP,MAAM;MAACC,MAAD;MAASC,KAAT;MAAgBC;IAAhB,IAA2B,KAAKC,KAAtC;IAEA,OAAQ,kBAAiBF,KAAM,WAAUC,OAAQ,WAAUF,MAAM,CAACI,OAAQ,GAA1E;EACD;;EAEDC,MAAM,GAAG;IACP,MAAM;MAACC,SAAD;MAAYN;IAAZ,IAAsB,KAAKG,KAAjC;IACA,MAAMI,IAAI,GAAGP,MAAM,CAACO,IAAP,IAAe;MAC1BC,IAAI,EAAER,MAAM,CAACQ,IADa;MAE1BC,KAAK,EAAET,MAAM,CAACS,KAFY;MAG1BC,EAAE,EAAE,EAHsB;MAI1BC,QAAQ,EAAE,EAJgB;MAK1BC,UAAU,EAAE;IALc,CAA5B;IAQA,OACE;MAAK,SAAS,EAAEN,SAAhB;MAAA,UACE,iEAAC,uEAAD;QACE,IAAI,EAAEN,MAAM,CAACa,WADf;QAEE,MAAM,EAAE;UAACC,IAAI,EAAE,MAAP;UAAeP;QAAf,CAFV;QAGE,MAAM,EACJ;UAAA,WACE,iEAAC,yEAAD;YAAA,UAAiBP,MAAM,CAACQ;UAAxB,EADF,EAEE,iEAAC,mEAAD;YAAW,KAAK,EAAER,MAAM,CAACS,KAAzB;YAAA,UACE,kEAAC,KAAD;cAAA,WACGT,MAAM,CAACS,KADV,EAEE,iEAAC,cAAD;gBAAgB,IAAI,EAAC;cAArB,EAFF;YAAA;UADF,EAFF,EAQGT,MAAM,CAACI,OAAP,IACC,iEAAC,aAAD;YAAe,EAAE,EAAE,KAAKL,MAAL,EAAnB;YAAA,UAAmCL,gDAAC,CAAC,YAAD;UAApC,EATJ;QAAA,EAJJ;QAAA,UAkBE;UACE,uBAAuB,EAAE;YACvBqB,MAAM,EAAElB,mDAAK,CAACD,oDAAM,CAACI,MAAM,CAACgB,QAAR,CAAP;UADU;QAD3B;MAlBF;IADF,EADF;EA4BD;;AA7C8C;;AAA3ClB;AAgDN,iEAAeA,iBAAf;;AAEA,MAAMmB,KAAK,GAAG,8EAAO,MAAP;EAAA;AAAA,MAAH,eACIC,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQC,aADjB,qDAIMzB,+DAAK,CAAC,CAAD,CAJX,yBAAX;;AAOA,MAAM0B,aAAa,GAAG,8EAAO7B,oEAAP;EAAA;AAAA,MAAH,iCAEFG,+DAAK,CAAC,CAAD,CAFH,yCAAnB;;AAMA,MAAM2B,cAAc,GAAG,8EAAO7B,kDAAP;EAAA;AAAA,MAAH,iBACHE,+DAAK,CAAC,CAAD,CADF,yBAApB;;;;;;;;;;;;;;;;;;;ACjFA;AACA;;;;AAQA,SAAS6B,eAAT,OAA8D;EAAA,IAArC;IAAClB,SAAD;IAAYmB,KAAZ;IAAmBC;EAAnB,CAAqC;EAC5D,OACE,gEAAC,2DAAD;IAAO,SAAS,EAAEpB,SAAlB;IAAA,UACE,iEAAC,SAAD;MAAA,WACE,gEAAC,OAAD;QAAA,UAAUmB;MAAV,EADF,EAEE,gEAAC,SAAD;QAAA,UAAYC;MAAZ,EAFF;IAAA;EADF,EADF;AAQD;;AATQF;;AAWT,MAAMG,SAAS,GAAG,8EAAO,KAAP;EAAA;AAAA,MAAH,aACFhC,+DAAK,CAAC,CAAD,CADH,4CAIQuB,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQS,WAAR,CAAoBC,KAJjC,qKAeQX,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQS,WAAR,CAAoBE,MAfjC,4CAAf;;AAoBA,MAAMC,SAAS,GAAG,8EAAO,KAAP;EAAA;AAAA,MAAH,kCAGQb,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQS,WAAR,CAAoBC,KAHjC,kCAAf;;AAQA,MAAMG,OAAO,GAAG,8EAAOD,SAAP;EAAA;AAAA,MAAH,+DAIDpC,+DAAK,CAAC,CAAD,CAJJ,+BAMUuB,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQS,WAAR,CAAoBC,KANnC,sBAQClC,+DAAK,CAAC,CAAD,CARN,yCAAb;;AAaA,iEAAe6B,eAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAMO,SAASmB,iBAAT,OAAgD;EAAA,IAArB;IAACC;EAAD,CAAqB;EACrD,MAAM;IAACC,QAAD;IAAWC;EAAX,IAA8BJ,qEAAW,EAA/C;EACA,MAAMK,eAAe,GAAG,CAACD,eAAzB;EACA,MAAME,YAAY,GAAGP,yEAAe,EAApC;EAEA,MAAMQ,gBAAgB,GACpBL,UAAU,IAAIA,UAAU,CAACM,MAAzB,GACIL,QAAQ,CAACM,MAAT,CAAgB;IAAA,IAAC;MAACzC;IAAD,CAAD;IAAA,OAAUkC,UAAU,CAACQ,QAAX,CAAoB1C,EAApB,CAAV;EAAA,CAAhB,CADJ,GAEImC,QAHN;EAKA,MAAMQ,cAAc,GAAGJ,gBAAgB,CAACK,IAAjB,CAAsB;IAAA,IAAC;MAACC;IAAD,CAAD;IAAA,OAAsBA,cAAtB;EAAA,CAAtB,CAAvB;EAEAtB,gDAAS,CAAC,MAAM;IACduB,MAAM,CAACC,mBAAP,GAA6B,UAAUC,KAAV,EAAiB;MAC5C;MACA;MACAA,KAAK,CAACC,MAAN,GAAe,UAAUC,KAAV,EAAiB;QAC9B,KAAKC,iBAAL,GAAyB,IAAzB;QACAC,UAAU,CAAC,MAAM;UACf,KAAKD,iBAAL,GAAyB,KAAzB;UACA,KAAKE,SAAL;QACD,CAHS,EAGP,GAHO,CAAV;MAID,CAND;IAOD,CAVD;;IAYA,IAAIV,cAAc,KAAK,KAAvB,EAA8B;MAC5B;MACAd,uEAAe,CAAC;QACdyB,QAAQ,EAAE,sBADI;QAEdC,MAAM,EAAEC,QAAQ,CAAClB,YAAY,CAACtC,EAAd,EAAkB,EAAlB,CAFF;QAGdmC,QAAQ,EAAED;MAHI,CAAD,CAAf;IAKD;;IACD,OAAO,MAAM;MACXY,MAAM,CAACC,mBAAP,GAA6B,IAA7B;IACD,CAFD;EAGD,CAxBQ,EAwBN,CAACJ,cAAD,EAAiBL,YAAY,CAACtC,EAA9B,EAAkCkC,UAAlC,CAxBM,CAAT;;EA0BA,SAASuB,cAAT,QAAsF;IAAA,IAA9D;MAACH,QAAD;MAAWI;IAAX,CAA8D;IACpF5B,2EAAmB,CAAC;MAClBwB,QADkB;MAElBI,SAFkB;MAGlBC,eAAe,EAAErB,YAAY,CAACtC,EAHZ;MAIlBmC,QAAQ,EAAED;IAJQ,CAAD,CAAnB;EAMD,CA7CoD,CA+CrD;;;EACA,IAAIG,eAAe,IAAIM,cAAc,KAAK,KAA1C,EAAiD;IAC/C,OACE,iEAAC,2EAAD;MAAA,UACE;QAAA,UAAI3D,gDAAC,CAAC,4CAAD;MAAL;IADF,EADF;EAKD,CAtDoD,CAwDrD;;;EACA,OACE,kEAAC,yEAAD;IAAiB,KAAK,EAAE;MAAK,GAAG,EAAEyC,wEAAaA;IAAvB,EAAxB;IAAA,WACE;MAAA,UAAKzC,gDAAC,CAAC,sBAAD;IAAN,EADF,EAEE;MAAA,UACGA,gDAAC,CACC,kIADD;IADJ,EAFF,EAOE,kEAAC,UAAD;MAAY,GAAG,EAAE,CAAjB;MAAA,WACE,iEAAC,gEAAD;QACE,QAAQ,MADV;QAEE,QAAQ,EAAC,SAFX;QAGE,OAAO,EAAE,MACPyE,cAAc,CAAC;UACbH,QAAQ,EAAE,4BADG;UAEbI,SAAS,EAAE;QAFE,CAAD,CAJlB;QASE,IAAI,EAAC,+CATP;QAAA,UAWG1E,gDAAC,CAAC,eAAD;MAXJ,EADF,EAcE,iEAAC,gEAAD;QACE,OAAO,EAAE,MAAM;UACbwC,4DAAA,CAAwB;YACtB;YACAqC,OAAO,EAAE;UAFa,CAAxB;UAKAJ,cAAc,CAAC;YACbH,QAAQ,EAAE,6BADG;YAEbI,SAAS,EAAE;UAFE,CAAD,CAAd;QAID,CAXH;QAAA,UAaG1E,gDAAC,CAAC,gBAAD;MAbJ,EAdF;IAAA,EAPF;EAAA,EADF;AAwCD;AAjGeiD;;AAmGhB,MAAM6B,UAAU,GAAG,8EAAOnC,mEAAP;EAAA;AAAA,MAAH;EAAA;EAAA;AAAA,MAAhB","sources":["webpack:///./app/components/events/userFeedback.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/userFeedback/userFeedbackEmpty.tsx"],"sourcesContent":["import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport ActivityAuthor from 'sentry/components/activity/author';\nimport ActivityItem from 'sentry/components/activity/item';\nimport Clipboard from 'sentry/components/clipboard';\nimport Link from 'sentry/components/links/link';\nimport {IconCopy} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {UserReport} from 'sentry/types';\nimport {escape, nl2br} from 'sentry/utils';\n\ntype Props = {\n  issueId: string;\n  orgId: string;\n  report: UserReport;\n  className?: string;\n};\n\nclass EventUserFeedback extends Component<Props> {\n  getUrl() {\n    const {report, orgId, issueId} = this.props;\n\n    return `/organizations/${orgId}/issues/${issueId}/events/${report.eventID}/`;\n  }\n\n  render() {\n    const {className, report} = this.props;\n    const user = report.user || {\n      name: report.name,\n      email: report.email,\n      id: '',\n      username: '',\n      ip_address: '',\n    };\n\n    return (\n      <div className={className}>\n        <ActivityItem\n          date={report.dateCreated}\n          author={{type: 'user', user}}\n          header={\n            <div>\n              <ActivityAuthor>{report.name}</ActivityAuthor>\n              <Clipboard value={report.email}>\n                <Email>\n                  {report.email}\n                  <StyledIconCopy size=\"xs\" />\n                </Email>\n              </Clipboard>\n              {report.eventID && (\n                <ViewEventLink to={this.getUrl()}>{t('View event')}</ViewEventLink>\n              )}\n            </div>\n          }\n        >\n          <p\n            dangerouslySetInnerHTML={{\n              __html: nl2br(escape(report.comments)),\n            }}\n          />\n        </ActivityItem>\n      </div>\n    );\n  }\n}\n\nexport default EventUserFeedback;\n\nconst Email = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: normal;\n  cursor: pointer;\n  margin-left: ${space(1)};\n`;\n\nconst ViewEventLink = styled(Link)`\n  font-weight: 300;\n  margin-left: ${space(1)};\n  font-size: 0.9em;\n`;\n\nconst StyledIconCopy = styled(IconCopy)`\n  margin-left: ${space(1)};\n`;\n","import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  children: React.ReactNode;\n  image: React.ReactNode;\n  className?: string;\n};\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {useEffect} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport emptyStateImg from 'sentry-images/spot/feedback-empty-state.svg';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\nimport {trackAdhocEvent, trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\n\ntype Props = {\n  projectIds?: string[];\n};\n\nexport function UserFeedbackEmpty({projectIds}: Props) {\n  const {projects, initiallyLoaded} = useProjects();\n  const loadingProjects = !initiallyLoaded;\n  const organization = useOrganization();\n\n  const selectedProjects =\n    projectIds && projectIds.length\n      ? projects.filter(({id}) => projectIds.includes(id))\n      : projects;\n\n  const hasAnyFeedback = selectedProjects.some(({hasUserReports}) => hasUserReports);\n\n  useEffect(() => {\n    window.sentryEmbedCallback = function (embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function (_body) {\n        this._submitInProgress = true;\n        setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n\n    if (hasAnyFeedback === false) {\n      // send to reload only due to higher event volume\n      trackAdhocEvent({\n        eventKey: 'user_feedback.viewed',\n        org_id: parseInt(organization.id, 10),\n        projects: projectIds,\n      });\n    }\n    return () => {\n      window.sentryEmbedCallback = null;\n    };\n  }, [hasAnyFeedback, organization.id, projectIds]);\n\n  function trackAnalytics({eventKey, eventName}: {eventKey: string; eventName: string}) {\n    trackAnalyticsEvent({\n      eventKey,\n      eventName,\n      organization_id: organization.id,\n      projects: projectIds,\n    });\n  }\n\n  // Show no user reports if waiting for projects to load or if there is no feedback\n  if (loadingProjects || hasAnyFeedback !== false) {\n    return (\n      <EmptyStateWarning>\n        <p>{t('Sorry, no user reports match your filters.')}</p>\n      </EmptyStateWarning>\n    );\n  }\n\n  // Show landing page after projects have loaded and it is confirmed no projects have feedback\n  return (\n    <OnboardingPanel image={<img src={emptyStateImg} />}>\n      <h3>{t('What do users think?')}</h3>\n      <p>\n        {t(\n          `You can't read minds. At least we hope not. Ask users for feedback on the impact of their crashes or bugs and you shall receive.`\n        )}\n      </p>\n      <ButtonList gap={1}>\n        <Button\n          external\n          priority=\"primary\"\n          onClick={() =>\n            trackAnalytics({\n              eventKey: 'user_feedback.docs_clicked',\n              eventName: 'User Feedback Docs Clicked',\n            })\n          }\n          href=\"https://docs.sentry.io/product/user-feedback/\"\n        >\n          {t('Read the docs')}\n        </Button>\n        <Button\n          onClick={() => {\n            Sentry.showReportDialog({\n              // should never make it to the Sentry API, but just in case, use throwaway id\n              eventId: '00000000000000000000000000000000',\n            });\n\n            trackAnalytics({\n              eventKey: 'user_feedback.dialog_opened',\n              eventName: 'User Feedback Dialog Opened',\n            });\n          }}\n        >\n          {t('See an example')}\n        </Button>\n      </ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n"],"names":["Component","ActivityAuthor","ActivityItem","Clipboard","Link","IconCopy","t","space","escape","nl2br","EventUserFeedback","getUrl","report","orgId","issueId","props","eventID","render","className","user","name","email","id","username","ip_address","dateCreated","type","__html","comments","Email","p","theme","fontSizeSmall","ViewEventLink","StyledIconCopy","Panel","OnboardingPanel","image","children","Container","breakpoints","small","medium","StyledBox","IlloBox","useEffect","Sentry","emptyStateImg","Button","ButtonBar","EmptyStateWarning","trackAdhocEvent","trackAnalyticsEvent","useOrganization","useProjects","UserFeedbackEmpty","projectIds","projects","initiallyLoaded","loadingProjects","organization","selectedProjects","length","filter","includes","hasAnyFeedback","some","hasUserReports","window","sentryEmbedCallback","embed","submit","_body","_submitInProgress","setTimeout","onSuccess","eventKey","org_id","parseInt","trackAnalytics","eventName","organization_id","showReportDialog","eventId","ButtonList"],"sourceRoot":""}