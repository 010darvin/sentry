{"version":3,"file":"chunks/app_views_settings_project_projectSettingsLayout_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/projects/appStoreConnectContext.tsx","webpack:///./app/utils/appStoreValidationErrorMessage.tsx","webpack:///./app/views/projects/projectContext.tsx","webpack:///./app/views/settings/project/projectSettingsLayout.tsx","webpack:///./app/views/settings/project/projectSettingsNavigation.tsx"],"sourcesContent":["import {createContext, useEffect, useMemo, useState} from 'react';\n\nimport {Organization, Project} from 'sentry/types';\nimport {\n  AppStoreConnectCredentialsStatus,\n  AppStoreConnectStatusData,\n} from 'sentry/types/debugFiles';\nimport {getAppStoreValidationErrorMessage} from 'sentry/utils/appStoreValidationErrorMessage';\nimport useApi from 'sentry/utils/useApi';\n\nexport type AppStoreConnectContextProps =\n  | Record<string, AppStoreConnectStatusData>\n  | undefined;\n\nconst AppStoreConnectContext = createContext<AppStoreConnectContextProps>(undefined);\n\ntype ProviderProps = {\n  children: React.ReactNode;\n  organization: Organization;\n  project?: Project;\n};\n\nconst Provider = ({children, project, organization}: ProviderProps) => {\n  const api = useApi();\n\n  const [projectDetails, setProjectDetails] = useState<undefined | Project>();\n  const [appStoreConnectStatusData, setAppStoreConnectStatusData] =\n    useState<AppStoreConnectContextProps>(undefined);\n\n  const appStoreConnectSymbolSources = useMemo(() => {\n    return (\n      projectDetails?.symbolSources ? JSON.parse(projectDetails.symbolSources) : []\n    ).reduce((acc, {type, id, ...symbolSource}) => {\n      if (type.toLowerCase() === 'appstoreconnect') {\n        acc[id] = {type, ...symbolSource};\n      }\n      return acc;\n    }, {});\n  }, [projectDetails?.symbolSources]);\n\n  useEffect(() => {\n    if (!project || projectDetails) {\n      return undefined;\n    }\n\n    if (project.symbolSources) {\n      setProjectDetails(project);\n      return undefined;\n    }\n\n    let unmounted = false;\n\n    api\n      .requestPromise(`/projects/${organization.slug}/${project.slug}/`)\n      .then(responseProjectDetails => {\n        if (unmounted) {\n          return;\n        }\n\n        setProjectDetails(responseProjectDetails);\n      })\n      .catch(() => {\n        // We do not care about the error\n      });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [project, organization, api]);\n\n  useEffect(() => {\n    if (!projectDetails) {\n      return undefined;\n    }\n\n    if (!Object.keys(appStoreConnectSymbolSources).length) {\n      return undefined;\n    }\n\n    let unmounted = false;\n\n    api\n      .requestPromise(\n        `/projects/${organization.slug}/${projectDetails.slug}/appstoreconnect/status/`\n      )\n      .then(appStoreConnectStatus => {\n        if (unmounted) {\n          return;\n        }\n        setAppStoreConnectStatusData(appStoreConnectStatus);\n      })\n      .catch(() => {\n        // We do not care about the error\n      });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [projectDetails, organization, appStoreConnectSymbolSources, api]);\n\n  function getUpdateAlertMessage(\n    respository: NonNullable<Parameters<typeof getAppStoreValidationErrorMessage>[1]>,\n    credentials: AppStoreConnectCredentialsStatus\n  ) {\n    if (credentials?.status === 'valid') {\n      return undefined;\n    }\n\n    return getAppStoreValidationErrorMessage(credentials, respository);\n  }\n\n  return (\n    <AppStoreConnectContext.Provider\n      value={\n        appStoreConnectStatusData && project\n          ? Object.keys(appStoreConnectStatusData).reduce((acc, key) => {\n              const appStoreConnect = appStoreConnectStatusData[key];\n              return {\n                ...acc,\n                [key]: {\n                  ...appStoreConnect,\n                  updateAlertMessage: getUpdateAlertMessage(\n                    {\n                      name: appStoreConnectSymbolSources[key].name,\n                      link: `/settings/${organization.slug}/projects/${project.slug}/debug-symbols/?customRepository=${key}`,\n                    },\n                    appStoreConnect.credentials\n                  ),\n                },\n              };\n            }, {})\n          : undefined\n      }\n    >\n      {children}\n    </AppStoreConnectContext.Provider>\n  );\n};\n\nexport {Provider};\n\nexport default AppStoreConnectContext;\n","import * as Sentry from '@sentry/react';\n\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport {AppStoreConnectValidationError} from 'sentry/types/debugFiles';\n\nexport const unexpectedErrorMessage = t(\n  'An unexpected error occurred while configuring the App Store Connect integration'\n);\n\nexport function getAppStoreValidationErrorMessage(\n  error: AppStoreConnectValidationError,\n  repo?: {link: string; name: string}\n) {\n  switch (error.code) {\n    case 'app-connect-authentication-error':\n      return repo\n        ? tct(\n            'App Store Connect credentials are invalid or missing. [linkToCustomRepository]',\n            {\n              linkToCustomRepository: (\n                <Link to={repo.link}>\n                  {tct(\n                    \"Make sure the credentials of the '[customRepositoryName]' repository are correct and exist.\",\n                    {\n                      customRepositoryName: repo.name,\n                    }\n                  )}\n                </Link>\n              ),\n            }\n          )\n        : t('The supplied App Store Connect credentials are invalid or missing.');\n    case 'app-connect-forbidden-error':\n      return t('The supplied API key does not have sufficient permissions.');\n    case 'app-connect-multiple-sources-error':\n      return t('Only one App Store Connect application is allowed in this project.');\n    default: {\n      // this shall not happen\n      Sentry.captureException(new Error('Unknown app store connect error.'));\n      return unexpectedErrorMessage;\n    }\n  }\n}\n","import {Component, createRef} from 'react';\nimport DocumentTitle from 'react-document-title';\nimport styled from '@emotion/styled';\n\nimport {fetchOrgMembers} from 'sentry/actionCreators/members';\nimport {setActiveProject} from 'sentry/actionCreators/projects';\nimport {Client} from 'sentry/api';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport MissingProjectMembership from 'sentry/components/projects/missingProjectMembership';\nimport {t} from 'sentry/locale';\nimport SentryTypes from 'sentry/sentryTypes';\nimport MemberListStore from 'sentry/stores/memberListStore';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport space from 'sentry/styles/space';\nimport {Organization, Project, User} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\n\nenum ErrorTypes {\n  MISSING_MEMBERSHIP = 'MISSING_MEMBERSHIP',\n  PROJECT_NOT_FOUND = 'PROJECT_NOT_FOUND',\n  UNKNOWN = 'UNKNOWN',\n}\n\ntype ChildFuncProps = {\n  project: Project;\n};\n\ntype Props = {\n  api: Client;\n  children: ((props: ChildFuncProps) => React.ReactNode) | React.ReactNode;\n  loadingProjects: boolean;\n  orgId: string;\n  organization: Organization;\n  projectId: string;\n  projects: Project[];\n  /**\n   * If true, this will not change `state.loading` during `fetchData` phase\n   */\n  skipReload?: boolean;\n};\n\ntype State = {\n  error: boolean;\n  errorType: ErrorTypes | null;\n  loading: boolean;\n  memberList: User[];\n  project: Project | null;\n};\n\n/**\n * Higher-order component that sets `project` as a child context\n * value to be accessed by child elements.\n *\n * Additionally delays rendering of children until project XHR has finished\n * and context is populated.\n */\nclass ProjectContext extends Component<Props, State> {\n  static childContextTypes = {\n    project: SentryTypes.Project,\n  };\n\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    return {\n      loading: true,\n      error: false,\n      errorType: null,\n      memberList: [],\n      project: null,\n    };\n  }\n\n  getChildContext() {\n    return {\n      project: this.state.project,\n    };\n  }\n\n  componentDidMount() {\n    // Wait for withProjects to fetch projects before making request\n    // Once loaded we can fetchData in componentDidUpdate\n    const {loadingProjects} = this.props;\n    if (!loadingProjects) {\n      this.fetchData();\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.projectId === this.props.projectId) {\n      return;\n    }\n\n    if (!nextProps.skipReload) {\n      this.remountComponent();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (prevProps.projectId !== this.props.projectId) {\n      this.fetchData();\n    }\n\n    // Project list has changed. Likely indicating that a new project has been\n    // added. Re-fetch project details in case that the new project is the active\n    // project.\n    //\n    // For now, only compare lengths. It is possible that project slugs within\n    // the list could change, but it doesn't seem to be broken anywhere else at\n    // the moment that would require deeper checks.\n    if (prevProps.projects.length !== this.props.projects.length) {\n      this.fetchData();\n    }\n\n    // Call forceUpdate() on <DocumentTitle/> if either project or organization\n    // state has changed. This is because <DocumentTitle/>'s shouldComponentUpdate()\n    // returns false unless props differ; meaning context changes for project/org\n    // do NOT trigger renders for <DocumentTitle/> OR any subchildren. The end result\n    // being that child elements that listen for context changes on project/org will\n    // NOT update (without this hack).\n    // See: https://github.com/gaearon/react-document-title/issues/35\n\n    // intentionally shallow comparing references\n    if (prevState.project !== this.state.project) {\n      const docTitle = this.docTitleRef.current;\n      if (!docTitle) {\n        return;\n      }\n      docTitle.forceUpdate();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeMembers();\n    this.unsubscribeProjects();\n  }\n\n  docTitleRef = createRef<DocumentTitle>();\n\n  unsubscribeProjects = ProjectsStore.listen(\n    (projectIds: Set<string>) => this.onProjectChange(projectIds),\n    undefined\n  );\n\n  unsubscribeMembers = MemberListStore.listen(\n    (memberList: typeof MemberListStore['state']) => this.setState({memberList}),\n    undefined\n  );\n\n  remountComponent() {\n    this.setState(this.getInitialState());\n  }\n\n  getTitle() {\n    return this.state.project?.slug ?? 'Sentry';\n  }\n\n  onProjectChange(projectIds: Set<string>) {\n    if (!this.state.project) {\n      return;\n    }\n    if (!projectIds.has(this.state.project.id)) {\n      return;\n    }\n    this.setState({\n      project: {...ProjectsStore.getById(this.state.project.id)} as Project,\n    });\n  }\n\n  identifyProject() {\n    const {projects, projectId} = this.props;\n    const projectSlug = projectId;\n    return projects.find(({slug}) => slug === projectSlug) || null;\n  }\n\n  async fetchData() {\n    const {orgId, projectId, skipReload} = this.props;\n    // we fetch core access/information from the global organization data\n    const activeProject = this.identifyProject();\n    const hasAccess = activeProject && activeProject.hasAccess;\n\n    this.setState((state: State) => ({\n      // if `skipReload` is true, then don't change loading state\n      loading: skipReload ? state.loading : true,\n      // we bind project initially, but it'll rebind\n      project: activeProject,\n    }));\n\n    if (activeProject && hasAccess) {\n      setActiveProject(null);\n      const projectRequest = this.props.api.requestPromise(\n        `/projects/${orgId}/${projectId}/`\n      );\n\n      try {\n        const project = await projectRequest;\n        this.setState({\n          loading: false,\n          project,\n          error: false,\n          errorType: null,\n        });\n\n        // assuming here that this means the project is considered the active project\n        setActiveProject(project);\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error: false,\n          errorType: ErrorTypes.UNKNOWN,\n        });\n      }\n\n      fetchOrgMembers(this.props.api, orgId, [activeProject.id]);\n\n      return;\n    }\n\n    // User is not a memberof the active project\n    if (activeProject && !activeProject.isMember) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.MISSING_MEMBERSHIP,\n      });\n\n      return;\n    }\n\n    // There is no active project. This likely indicates either the project\n    // *does not exist* or the project has not yet been added to the store.\n    // Either way, make a request to check for existence of the project.\n    try {\n      await this.props.api.requestPromise(`/projects/${orgId}/${projectId}/`);\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.PROJECT_NOT_FOUND,\n      });\n    }\n  }\n\n  renderBody() {\n    const {children, organization} = this.props;\n    const {error, errorType, loading, project} = this.state;\n\n    if (loading) {\n      return (\n        <div className=\"loading-full-layout\">\n          <LoadingIndicator />\n        </div>\n      );\n    }\n\n    if (!error && project) {\n      return typeof children === 'function' ? children({project}) : children;\n    }\n\n    switch (errorType) {\n      case ErrorTypes.PROJECT_NOT_FOUND:\n        // TODO(chrissy): use scale for margin values\n        return (\n          <div className=\"container\">\n            <div className=\"alert alert-block\" style={{margin: '30px 0 10px'}}>\n              {t('The project you were looking for was not found.')}\n            </div>\n          </div>\n        );\n      case ErrorTypes.MISSING_MEMBERSHIP:\n        // TODO(dcramer): add various controls to improve this flow and break it\n        // out into a reusable missing access error component\n        return (\n          <ErrorWrapper>\n            <MissingProjectMembership organization={organization} project={project} />\n          </ErrorWrapper>\n        );\n      default:\n        return <LoadingError onRetry={this.remountComponent} />;\n    }\n  }\n\n  render() {\n    return (\n      <DocumentTitle ref={this.docTitleRef} title={this.getTitle()}>\n        {this.renderBody()}\n      </DocumentTitle>\n    );\n  }\n}\n\nexport {ProjectContext};\n\nexport default withApi(withOrganization(withProjects(ProjectContext)));\n\nconst ErrorWrapper = styled('div')`\n  width: 100%;\n  margin: ${space(2)} ${space(4)};\n`;\n","import {cloneElement, isValidElement} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport * as AppStoreConnectContext from 'sentry/components/projects/appStoreConnectContext';\nimport {Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport ProjectContext from 'sentry/views/projects/projectContext';\nimport SettingsLayout from 'sentry/views/settings/components/settingsLayout';\nimport ProjectSettingsNavigation from 'sentry/views/settings/project/projectSettingsNavigation';\n\ntype Props = {\n  children: React.ReactNode;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\nfunction ProjectSettingsLayout({\n  params,\n  organization,\n  children,\n  routes,\n  ...props\n}: Props) {\n  const {orgId, projectId} = params;\n\n  return (\n    <ProjectContext orgId={orgId} projectId={projectId}>\n      {({project}) => (\n        <AppStoreConnectContext.Provider project={project} organization={organization}>\n          <SettingsLayout\n            params={params}\n            routes={routes}\n            {...props}\n            renderNavigation={() => (\n              <ProjectSettingsNavigation organization={organization} />\n            )}\n          >\n            {children && isValidElement(children)\n              ? cloneElement(children, {organization, project})\n              : children}\n          </SettingsLayout>\n        </AppStoreConnectContext.Provider>\n      )}\n    </ProjectContext>\n  );\n}\n\nexport default withOrganization(ProjectSettingsLayout);\n","import {useContext} from 'react';\n\nimport AppStoreConnectContext from 'sentry/components/projects/appStoreConnectContext';\nimport {Organization, Project} from 'sentry/types';\nimport withProject from 'sentry/utils/withProject';\nimport SettingsNavigation from 'sentry/views/settings/components/settingsNavigation';\nimport getConfiguration from 'sentry/views/settings/project/navigationConfiguration';\n\ntype Props = {\n  organization: Organization;\n  project?: Project;\n};\n\nconst ProjectSettingsNavigation = ({organization, project}: Props) => {\n  const appStoreConnectContext = useContext(AppStoreConnectContext);\n\n  const debugFilesNeedsReview = appStoreConnectContext\n    ? Object.keys(appStoreConnectContext).some(\n        key => appStoreConnectContext[key].credentials.status === 'invalid'\n      )\n    : false;\n\n  return (\n    <SettingsNavigation\n      navigationObjects={getConfiguration({project, organization, debugFilesNeedsReview})}\n      access={new Set(organization.access)}\n      features={new Set(organization.features)}\n      organization={organization}\n      project={project}\n    />\n  );\n};\n\nexport default withProject(ProjectSettingsNavigation);\n"],"names":["createContext","useEffect","useMemo","useState","getAppStoreValidationErrorMessage","useApi","AppStoreConnectContext","undefined","Provider","children","project","organization","api","projectDetails","setProjectDetails","appStoreConnectStatusData","setAppStoreConnectStatusData","appStoreConnectSymbolSources","symbolSources","JSON","parse","reduce","acc","type","id","symbolSource","toLowerCase","unmounted","requestPromise","slug","then","responseProjectDetails","catch","Object","keys","length","appStoreConnectStatus","getUpdateAlertMessage","respository","credentials","status","key","appStoreConnect","updateAlertMessage","name","link","Sentry","Link","t","tct","unexpectedErrorMessage","error","repo","code","linkToCustomRepository","customRepositoryName","captureException","Error","Component","createRef","DocumentTitle","fetchOrgMembers","setActiveProject","LoadingError","LoadingIndicator","MissingProjectMembership","SentryTypes","MemberListStore","ProjectsStore","space","withApi","withOrganization","withProjects","ErrorTypes","ProjectContext","getInitialState","listen","projectIds","onProjectChange","memberList","setState","loading","errorType","getChildContext","state","componentDidMount","loadingProjects","props","fetchData","componentWillReceiveProps","nextProps","projectId","skipReload","remountComponent","componentDidUpdate","prevProps","prevState","projects","docTitle","docTitleRef","current","forceUpdate","componentWillUnmount","unsubscribeMembers","unsubscribeProjects","getTitle","has","getById","identifyProject","projectSlug","find","orgId","activeProject","hasAccess","projectRequest","UNKNOWN","isMember","MISSING_MEMBERSHIP","PROJECT_NOT_FOUND","renderBody","margin","render","Project","ErrorWrapper","cloneElement","isValidElement","SettingsLayout","ProjectSettingsNavigation","ProjectSettingsLayout","params","routes","useContext","withProject","SettingsNavigation","getConfiguration","appStoreConnectContext","debugFilesNeedsReview","some","Set","access","features"],"sourceRoot":""}