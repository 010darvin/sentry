{"version":3,"file":"chunks/app_views_organizationStats_teamInsights_issues_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/organizationStats/teamInsights/issues.tsx","webpack:///./app/views/organizationStats/teamInsights/teamIssuesAge.tsx","webpack:///./app/views/organizationStats/teamInsights/teamIssuesBreakdown.tsx","webpack:///./app/views/organizationStats/teamInsights/teamResolutionTime.tsx","webpack:///./app/views/organizationStats/teamInsights/teamUnresolvedIssues.tsx"],"sourcesContent":["import {Fragment, useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {TeamWithProjects} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport localStorage from 'sentry/utils/localStorage';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useTeams from 'sentry/utils/useTeams';\n\nimport Header from '../header';\n\nimport TeamStatsControls from './controls';\nimport DescriptionCard from './descriptionCard';\nimport TeamIssuesAge from './teamIssuesAge';\nimport TeamIssuesBreakdown from './teamIssuesBreakdown';\nimport TeamResolutionTime from './teamResolutionTime';\nimport TeamUnresolvedIssues from './teamUnresolvedIssues';\nimport {dataDatetime} from './utils';\n\ntype Props = RouteComponentProps<{orgId: string}, {}>;\n\nfunction TeamStatsIssues({location, router}: Props) {\n  const organization = useOrganization();\n  const {teams, initiallyLoaded} = useTeams({provideUserTeams: true});\n\n  const query = location?.query ?? {};\n  const localStorageKey = `teamInsightsSelectedTeamId:${organization.slug}`;\n\n  let localTeamId: string | null | undefined =\n    query.team ?? localStorage.getItem(localStorageKey);\n  if (localTeamId && !teams.find(team => team.id === localTeamId)) {\n    localTeamId = null;\n  }\n  const currentTeamId = localTeamId ?? teams[0]?.id;\n  const currentTeam = teams.find(team => team.id === currentTeamId) as\n    | TeamWithProjects\n    | undefined;\n  const projects = currentTeam?.projects ?? [];\n  const environment = query.environment;\n\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('team_insights.viewed', {\n      organization,\n    });\n  }, [organization]);\n\n  const {period, start, end, utc} = dataDatetime(query);\n\n  if (teams.length === 0) {\n    return (\n      <NoProjectMessage organization={organization} superuserNeedsToBeProjectMember />\n    );\n  }\n\n  return (\n    <Fragment>\n      <SentryDocumentTitle title={t('Team Issues')} orgSlug={organization.slug} />\n      <Header organization={organization} activeTab=\"issues\" />\n\n      <Body>\n        <TeamStatsControls\n          showEnvironment\n          location={location}\n          router={router}\n          currentTeam={currentTeam}\n          currentEnvironment={environment}\n        />\n\n        {!initiallyLoaded && <LoadingIndicator />}\n        {initiallyLoaded && (\n          <Layout.Main fullWidth>\n            <DescriptionCard\n              title={t('All Unresolved Issues')}\n              description={t(\n                'This includes New and Returning issues in the last 7 days as well as those that haven’t been resolved or ignored in the past.'\n              )}\n            >\n              <TeamUnresolvedIssues\n                projects={projects}\n                organization={organization}\n                teamSlug={currentTeam!.slug}\n                environment={environment}\n                period={period}\n                start={start}\n                end={end}\n                utc={utc}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('New and Returning Issues')}\n              description={t(\n                'The new, regressed, and unignored issues that were assigned to your team.'\n              )}\n            >\n              <TeamIssuesBreakdown\n                organization={organization}\n                projects={projects}\n                teamSlug={currentTeam!.slug}\n                environment={environment}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n                location={location}\n                statuses={['new', 'regressed', 'unignored']}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Issues Triaged')}\n              description={t(\n                'How many new and returning issues were reviewed by your team each week. Reviewing an issue includes marking as reviewed, resolving, assigning to another team, or deleting.'\n              )}\n            >\n              <TeamIssuesBreakdown\n                organization={organization}\n                projects={projects}\n                teamSlug={currentTeam!.slug}\n                environment={environment}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n                location={location}\n                statuses={['resolved', 'ignored', 'deleted']}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Age of Unresolved Issues')}\n              description={t('How long ago since unresolved issues were first created.')}\n            >\n              <TeamIssuesAge organization={organization} teamSlug={currentTeam!.slug} />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Time to Resolution')}\n              description={t(\n                `The mean time it took for issues to be resolved by your team.`\n              )}\n            >\n              <TeamResolutionTime\n                organization={organization}\n                environment={environment}\n                teamSlug={currentTeam!.slug}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n                location={location}\n              />\n            </DescriptionCard>\n          </Layout.Main>\n        )}\n      </Body>\n    </Fragment>\n  );\n}\n\nexport default TeamStatsIssues;\n\nconst Body = styled(Layout.Body)`\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    display: block;\n  }\n`;\n","import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport Count from 'sentry/components/count';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport Link from 'sentry/components/links/link';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Group, Organization} from 'sentry/types';\nimport {getTitle} from 'sentry/utils/events';\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  teamSlug: string;\n};\n\ntype State = AsyncComponent['state'] & {\n  oldestIssues: Group[] | null;\n  unresolvedIssueAge: Record<string, number> | null;\n};\n\n/**\n * takes \"< 1 hour\" and returns a datetime of 1 hour ago\n */\nfunction parseBucket(bucket: string): number {\n  if (bucket === '> 1 year') {\n    return moment().subtract(1, 'y').subtract(1, 'd').valueOf();\n  }\n\n  const [_, num, unit] = bucket.split(' ');\n  return moment()\n    .subtract(num, unit as any)\n    .valueOf();\n}\n\nconst bucketLabels = {\n  '< 1 hour': t('1 hour'),\n  '< 4 hour': t('4 hours'),\n  '< 12 hour': t('12 hours'),\n  '< 1 day': t('1 day'),\n  '< 1 week': t('1 week'),\n  '< 4 week': t('1 month'),\n  '< 24 week': t('6 months'),\n  '< 1 year': t('1 year'),\n  '> 1 year': t('> 1 year'),\n};\n\nclass TeamIssuesAge extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      oldestIssues: null,\n      unresolvedIssueAge: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, teamSlug} = this.props;\n\n    return [\n      [\n        'oldestIssues',\n        `/teams/${organization.slug}/${teamSlug}/issues/old/`,\n        {query: {limit: 7}},\n      ],\n      [\n        'unresolvedIssueAge',\n        `/teams/${organization.slug}/${teamSlug}/unresolved-issue-age/`,\n      ],\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {teamSlug} = this.props;\n\n    if (prevProps.teamSlug !== teamSlug) {\n      this.remountComponent();\n    }\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const {unresolvedIssueAge, oldestIssues, loading} = this.state;\n\n    const seriesData = Object.entries(unresolvedIssueAge ?? {})\n      .map(([bucket, value]) => ({\n        name: bucket,\n        value,\n      }))\n      .sort((a, b) => parseBucket(b.name) - parseBucket(a.name));\n\n    return (\n      <div>\n        <ChartWrapper>\n          {loading && <Placeholder height=\"200px\" />}\n          {!loading && (\n            <BarChart\n              style={{height: 190}}\n              legend={{right: 3, top: 0}}\n              yAxis={{minInterval: 1}}\n              xAxis={{\n                splitNumber: seriesData.length,\n                type: 'category',\n                min: 0,\n                axisLabel: {\n                  showMaxLabel: true,\n                  showMinLabel: true,\n                  formatter: (bucket: string) => {\n                    return bucketLabels[bucket] ?? bucket;\n                  },\n                },\n              }}\n              series={[\n                {\n                  seriesName: t('Unresolved Issues'),\n                  silent: true,\n                  data: seriesData,\n                  barCategoryGap: '5%',\n                },\n              ]}\n            />\n          )}\n        </ChartWrapper>\n        <StyledPanelTable\n          isEmpty={!oldestIssues || oldestIssues.length === 0}\n          emptyMessage={t('No unresolved issues for this team’s projects')}\n          headers={[\n            t('Oldest Issues'),\n            <RightAligned key=\"events\">{t('Events')}</RightAligned>,\n            <RightAligned key=\"users\">{t('Users')}</RightAligned>,\n            <RightAligned key=\"age\">\n              {t('Age')} <IconArrow direction=\"down\" size=\"12px\" color=\"gray300\" />\n            </RightAligned>,\n          ]}\n          isLoading={loading}\n        >\n          {oldestIssues?.map(issue => {\n            const {title} = getTitle(issue, organization?.features, false);\n\n            return (\n              <Fragment key={issue.id}>\n                <ProjectTitleContainer>\n                  <ShadowlessProjectBadge\n                    disableLink\n                    hideName\n                    avatarSize={18}\n                    project={issue.project}\n                  />\n                  <TitleOverflow>\n                    <Link\n                      to={{\n                        pathname: `/organizations/${organization.slug}/issues/${issue.id}/`,\n                      }}\n                    >\n                      {title}\n                    </Link>\n                  </TitleOverflow>\n                </ProjectTitleContainer>\n                <RightAligned>\n                  <Count value={issue.count} />\n                </RightAligned>\n                <RightAligned>\n                  <Count value={issue.userCount} />\n                </RightAligned>\n                <RightAligned>\n                  <TimeSince date={issue.firstSeen} />\n                </RightAligned>\n              </Fragment>\n            );\n          })}\n        </StyledPanelTable>\n      </div>\n    );\n  }\n}\n\nexport default TeamIssuesAge;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: 1fr 0.15fr 0.15fr 0.25fr;\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  font-size: ${p => p.theme.fontSizeMedium};\n  box-shadow: unset;\n\n  > * {\n    padding: ${space(1)} ${space(2)};\n  }\n\n  ${p =>\n    p.isEmpty &&\n    css`\n      & > div:last-child {\n        padding: 48px ${space(2)};\n      }\n    `}\n`;\n\nconst RightAligned = styled('span')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nconst ProjectTitleContainer = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n  display: flex;\n  align-items: center;\n`;\n\nconst TitleOverflow = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst ShadowlessProjectBadge = styled(ProjectBadge)`\n  display: inline-flex;\n  align-items: center;\n  margin-right: ${space(1)};\n\n  * > img {\n    box-shadow: none;\n  }\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {BarChart, BarChartSeries} from 'sentry/components/charts/barChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport CollapsePanel, {COLLAPSE_COUNT} from 'sentry/components/collapsePanel';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\n\nimport {ProjectBadge, ProjectBadgeContainer} from './styles';\nimport {barAxisLabel, convertDayValueObjectToSeries, sortSeriesByDay} from './utils';\n\ntype StatusCounts = {\n  total: number;\n  deleted?: number;\n  ignored?: number;\n  new?: number;\n  regressed?: number;\n  resolved?: number;\n  unignored?: number;\n};\n\ntype IssuesBreakdown = Record<string, Record<string, StatusCounts>>;\n\ntype Statuses = keyof Omit<StatusCounts, 'total'>;\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  projects: Project[];\n  statuses: Statuses[];\n  teamSlug: string;\n  environment?: string;\n} & DateTimeObject;\n\ntype State = AsyncComponent['state'] & {\n  issuesBreakdown: IssuesBreakdown | null;\n};\n\nconst keys = ['deleted', 'ignored', 'resolved', 'unignored', 'regressed', 'new', 'total'];\n\nclass TeamIssuesBreakdown extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      issuesBreakdown: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, start, end, period, utc, teamSlug, statuses, environment} =\n      this.props;\n    const datetime = {start, end, period, utc};\n\n    return [\n      [\n        'issuesBreakdown',\n        `/teams/${organization.slug}/${teamSlug}/issue-breakdown/`,\n        {\n          query: {\n            ...normalizeDateTimeParams(datetime),\n            statuses,\n            environment,\n          },\n        },\n      ],\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {start, end, period, utc, teamSlug, projects, environment} = this.props;\n\n    if (\n      prevProps.start !== start ||\n      prevProps.end !== end ||\n      prevProps.period !== period ||\n      prevProps.utc !== utc ||\n      prevProps.teamSlug !== teamSlug ||\n      prevProps.environment !== environment ||\n      !isEqual(prevProps.projects, projects)\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {loading} = this.state;\n    const issuesBreakdown = this.state.issuesBreakdown ?? {};\n    const {projects, statuses} = this.props;\n\n    const allReviewedByDay: Record<string, Record<string, number>> = {};\n    // Total statuses & total reviewed keyed by project ID\n    const projectTotals: Record<string, StatusCounts> = {};\n\n    // The issues breakdown is keyed by projectId\n    for (const [projectId, entries] of Object.entries(issuesBreakdown)) {\n      // Each bucket is 1 day\n      for (const [bucket, counts] of Object.entries(entries)) {\n        if (!projectTotals[projectId]) {\n          projectTotals[projectId] = {\n            deleted: 0,\n            ignored: 0,\n            resolved: 0,\n            unignored: 0,\n            regressed: 0,\n            new: 0,\n            total: 0,\n          };\n        }\n\n        for (const key of keys) {\n          projectTotals[projectId][key] += counts[key];\n        }\n\n        if (!allReviewedByDay[projectId]) {\n          allReviewedByDay[projectId] = {};\n        }\n\n        if (allReviewedByDay[projectId][bucket] === undefined) {\n          allReviewedByDay[projectId][bucket] = counts.total;\n        } else {\n          allReviewedByDay[projectId][bucket] += counts.total;\n        }\n      }\n    }\n\n    const sortedProjectIds = Object.entries(projectTotals)\n      .map(([projectId, {total}]) => ({projectId, total}))\n      .sort((a, b) => b.total - a.total);\n\n    const allSeries = Object.keys(allReviewedByDay).map(\n      (projectId, idx): BarChartSeries => ({\n        seriesName: ProjectsStore.getById(projectId)?.slug ?? projectId,\n        data: sortSeriesByDay(convertDayValueObjectToSeries(allReviewedByDay[projectId])),\n        animationDuration: 500,\n        animationDelay: idx * 500,\n        silent: true,\n        barCategoryGap: '5%',\n      })\n    );\n\n    return (\n      <Fragment>\n        <IssuesChartWrapper>\n          {loading && <Placeholder height=\"200px\" />}\n          {!loading && (\n            <BarChart\n              style={{height: 200}}\n              stacked\n              isGroupedByDate\n              useShortDate\n              legend={{right: 0, top: 0}}\n              xAxis={barAxisLabel(allSeries[0]?.data.length ?? 0)}\n              yAxis={{minInterval: 1}}\n              series={allSeries}\n            />\n          )}\n        </IssuesChartWrapper>\n        <CollapsePanel items={sortedProjectIds.length}>\n          {({isExpanded, showMoreButton}) => (\n            <Fragment>\n              <StyledPanelTable\n                numActions={statuses.length}\n                headers={[\n                  t('Project'),\n                  ...statuses.map(action => (\n                    <AlignRight key={action}>{t(action)}</AlignRight>\n                  )),\n                  <AlignRight key=\"total\">\n                    {t('total')}{' '}\n                    <IconArrow direction=\"down\" size=\"12px\" color=\"gray300\" />\n                  </AlignRight>,\n                ]}\n                isLoading={loading}\n              >\n                {sortedProjectIds.map(({projectId}, idx) => {\n                  const project = projects.find(p => p.id === projectId);\n\n                  if (idx >= COLLAPSE_COUNT && !isExpanded) {\n                    return null;\n                  }\n\n                  return (\n                    <Fragment key={projectId}>\n                      <ProjectBadgeContainer>\n                        {project && <ProjectBadge avatarSize={18} project={project} />}\n                      </ProjectBadgeContainer>\n                      {statuses.map(action => (\n                        <AlignRight key={action}>\n                          {projectTotals[projectId][action]}\n                        </AlignRight>\n                      ))}\n                      <AlignRight>{projectTotals[projectId].total}</AlignRight>\n                    </Fragment>\n                  );\n                })}\n              </StyledPanelTable>\n              {!loading && showMoreButton}\n            </Fragment>\n          )}\n        </CollapsePanel>\n      </Fragment>\n    );\n  }\n}\n\nexport default TeamIssuesBreakdown;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n`;\n\nconst IssuesChartWrapper = styled(ChartWrapper)`\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)<{numActions: number}>`\n  grid-template-columns: 1fr ${p => ' 0.2fr'.repeat(p.numActions)} 0.2fr;\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  box-shadow: unset;\n\n  & > div {\n    padding: ${space(1)} ${space(2)};\n  }\n`;\n\nconst AlignRight = styled('div')`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n`;\n","import styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {barAxisLabel, sortSeriesByDay} from './utils';\n\ntype TimeToResolution = Record<string, {avg: number; count: number}>;\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  teamSlug: string;\n  environment?: string;\n} & DateTimeObject;\n\ntype State = AsyncComponent['state'] & {\n  resolutionTime: TimeToResolution | null;\n};\n\nclass TeamResolutionTime extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      resolutionTime: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, start, end, period, utc, teamSlug, environment} = this.props;\n    const datetime = {start, end, period, utc};\n\n    return [\n      [\n        'resolutionTime',\n        `/teams/${organization.slug}/${teamSlug}/time-to-resolution/`,\n        {\n          query: {\n            ...normalizeDateTimeParams(datetime),\n            environment,\n          },\n        },\n      ],\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {start, end, period, utc, teamSlug, environment} = this.props;\n\n    if (\n      prevProps.start !== start ||\n      prevProps.end !== end ||\n      prevProps.period !== period ||\n      prevProps.utc !== utc ||\n      prevProps.teamSlug !== teamSlug ||\n      prevProps.environment !== environment\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  renderLoading() {\n    return (\n      <ChartWrapper>\n        <LoadingIndicator />\n      </ChartWrapper>\n    );\n  }\n\n  renderBody() {\n    const {resolutionTime} = this.state;\n    const data = Object.entries(resolutionTime ?? {}).map(([bucket, {avg}]) => ({\n      value: avg,\n      name: new Date(bucket).getTime(),\n    }));\n    const seriesData = sortSeriesByDay(data);\n\n    return (\n      <ChartWrapper>\n        <BarChart\n          style={{height: 190}}\n          isGroupedByDate\n          useShortDate\n          period=\"7d\"\n          tooltip={{\n            valueFormatter: (value: number) => getDuration(value, 1),\n          }}\n          yAxis={{\n            // Each yAxis marker will increase by 1 day\n            minInterval: 86400,\n            axisLabel: {\n              formatter: (value: number) => {\n                if (value === 0) {\n                  return '';\n                }\n\n                return getDuration(value, 0, true, true);\n              },\n            },\n          }}\n          legend={{right: 0, top: 0}}\n          xAxis={barAxisLabel(seriesData.length)}\n          series={[\n            {\n              seriesName: t('Time to Resolution'),\n              data: seriesData,\n              silent: true,\n              barCategoryGap: '5%',\n            },\n          ]}\n        />\n      </ChartWrapper>\n    );\n  }\n}\n\nexport default TeamResolutionTime;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport CollapsePanel, {COLLAPSE_COUNT} from 'sentry/components/collapsePanel';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconArrow} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport type {Color} from 'sentry/utils/theme';\n\nimport {ProjectBadge, ProjectBadgeContainer} from './styles';\nimport {\n  barAxisLabel,\n  convertDayValueObjectToSeries,\n  groupByTrend,\n  sortSeriesByDay,\n} from './utils';\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  projects: Project[];\n  teamSlug: string;\n  environment?: string;\n} & DateTimeObject;\n\ntype UnresolvedCount = {unresolved: number};\ntype ProjectReleaseCount = Record<string, Record<string, UnresolvedCount>>;\n\ntype State = AsyncComponent['state'] & {\n  expandTable: boolean;\n  /** weekly selected date range */\n  periodIssues: ProjectReleaseCount | null;\n};\n\nclass TeamUnresolvedIssues extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      periodIssues: null,\n      expandTable: false,\n    };\n  }\n\n  getEndpoints() {\n    const {organization, start, end, period, utc, teamSlug, environment} = this.props;\n\n    const datetime = {start, end, period, utc};\n\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [\n      [\n        'periodIssues',\n        `/teams/${organization.slug}/${teamSlug}/all-unresolved-issues/`,\n        {\n          query: {\n            ...normalizeDateTimeParams(datetime),\n            environment,\n          },\n        },\n      ],\n    ];\n\n    return endpoints;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {teamSlug, start, end, period, utc, environment} = this.props;\n\n    if (\n      prevProps.start !== start ||\n      prevProps.end !== end ||\n      prevProps.period !== period ||\n      prevProps.utc !== utc ||\n      prevProps.environment !== environment ||\n      prevProps.teamSlug !== teamSlug\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  getTotalUnresolved(projectId: number): number {\n    const {periodIssues} = this.state;\n\n    const entries = Object.values(periodIssues?.[projectId] ?? {});\n    const total = entries.reduce((acc, current) => acc + current.unresolved, 0);\n\n    return Math.round(total / entries.length);\n  }\n\n  handleExpandTable = () => {\n    this.setState({expandTable: true});\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {projects, period} = this.props;\n    const {loading} = this.state;\n    const periodIssues = this.state.periodIssues ?? {};\n\n    const projectTotals: Record<\n      string,\n      {percentChange: number; periodAvg: number; projectId: string; today: number}\n    > = {};\n    for (const projectId of Object.keys(periodIssues)) {\n      const periodAvg = this.getTotalUnresolved(Number(projectId));\n      const projectPeriodEntries = Object.values(periodIssues?.[projectId] ?? {});\n      const today =\n        projectPeriodEntries[projectPeriodEntries.length - 1]?.unresolved ?? 0;\n      const percentChange = Math.abs((today - periodAvg) / periodAvg);\n      projectTotals[projectId] = {\n        projectId,\n        periodAvg,\n        today,\n        percentChange: Number.isNaN(percentChange) ? 0 : percentChange,\n      };\n    }\n\n    const sortedProjects = projects\n      .map(project => ({project, trend: projectTotals[project.id]?.percentChange ?? 0}))\n      .sort((a, b) => Math.abs(b.trend) - Math.abs(a.trend));\n\n    const groupedProjects = groupByTrend(sortedProjects);\n\n    // All data will contain all pairs of [day, unresolved_count].\n    const allData = Object.values(periodIssues).flatMap(data =>\n      Object.entries(data).map(\n        ([bucket, {unresolved}]) => [bucket, unresolved] as [string, number]\n      )\n    );\n    // Total by day for all projects\n    const totalByDay = allData.reduce((acc, [bucket, unresolved]) => {\n      if (acc[bucket] === undefined) {\n        acc[bucket] = 0;\n      }\n      acc[bucket] += unresolved;\n      return acc;\n    }, {});\n\n    const seriesData = sortSeriesByDay(convertDayValueObjectToSeries(totalByDay));\n\n    return (\n      <div>\n        <ChartWrapper>\n          {loading && <Placeholder height=\"200px\" />}\n          {!loading && (\n            <BarChart\n              style={{height: 190}}\n              isGroupedByDate\n              useShortDate\n              legend={{right: 3, top: 0}}\n              yAxis={{minInterval: 1}}\n              xAxis={barAxisLabel(seriesData.length)}\n              series={[\n                {\n                  seriesName: t('Unresolved Issues'),\n                  silent: true,\n                  data: seriesData,\n                  barCategoryGap: '6%',\n                },\n              ]}\n            />\n          )}\n        </ChartWrapper>\n        <CollapsePanel items={groupedProjects.length}>\n          {({isExpanded, showMoreButton}) => (\n            <Fragment>\n              <StyledPanelTable\n                isEmpty={projects.length === 0}\n                isLoading={loading}\n                headers={[\n                  t('Project'),\n                  <RightAligned key=\"last\">\n                    {tct('Last [period] Average', {period})}\n                  </RightAligned>,\n                  <RightAligned key=\"curr\">{t('Today')}</RightAligned>,\n                  <RightAligned key=\"diff\">{t('Change')}</RightAligned>,\n                ]}\n              >\n                {groupedProjects.map(({project}, idx) => {\n                  const totals = projectTotals[project.id] ?? {};\n\n                  if (idx >= COLLAPSE_COUNT && !isExpanded) {\n                    return null;\n                  }\n\n                  return (\n                    <Fragment key={project.id}>\n                      <ProjectBadgeContainer>\n                        <ProjectBadge avatarSize={18} project={project} />\n                      </ProjectBadgeContainer>\n\n                      <ScoreWrapper>{totals.periodAvg}</ScoreWrapper>\n                      <ScoreWrapper>{totals.today}</ScoreWrapper>\n                      <ScoreWrapper>\n                        <SubText\n                          color={\n                            totals.percentChange === 0\n                              ? 'gray300'\n                              : totals.percentChange > 0\n                              ? 'red300'\n                              : 'green300'\n                          }\n                        >\n                          {formatPercentage(\n                            Number.isNaN(totals.percentChange) ? 0 : totals.percentChange,\n                            0\n                          )}\n                          <PaddedIconArrow\n                            direction={totals.percentChange > 0 ? 'up' : 'down'}\n                            size=\"xs\"\n                          />\n                        </SubText>\n                      </ScoreWrapper>\n                    </Fragment>\n                  );\n                })}\n              </StyledPanelTable>\n              {!loading && showMoreButton}\n            </Fragment>\n          )}\n        </CollapsePanel>\n      </div>\n    );\n  }\n}\n\nexport default TeamUnresolvedIssues;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: 1fr 0.2fr 0.2fr 0.2fr;\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  font-size: ${p => p.theme.fontSizeMedium};\n  box-shadow: unset;\n\n  & > div {\n    padding: ${space(1)} ${space(2)};\n  }\n`;\n\nconst RightAligned = styled('span')`\n  text-align: right;\n`;\n\nconst ScoreWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  text-align: right;\n`;\n\nconst PaddedIconArrow = styled(IconArrow)`\n  margin: 0 ${space(0.5)};\n`;\n\nconst SubText = styled('div')<{color: Color}>`\n  color: ${p => p.theme[p.color]};\n`;\n"],"names":["Fragment","useEffect","Layout","LoadingIndicator","NoProjectMessage","SentryDocumentTitle","t","trackAdvancedAnalyticsEvent","localStorage","useOrganization","useTeams","Header","TeamStatsControls","DescriptionCard","TeamIssuesAge","TeamIssuesBreakdown","TeamResolutionTime","TeamUnresolvedIssues","dataDatetime","TeamStatsIssues","location","router","organization","teams","initiallyLoaded","provideUserTeams","query","localStorageKey","slug","localTeamId","team","getItem","find","id","currentTeamId","currentTeam","projects","environment","period","start","end","utc","length","toString","Body","p","theme","breakpoints","medium","css","moment","AsyncComponent","BarChart","Count","ProjectBadge","Link","PanelTable","Placeholder","TimeSince","IconArrow","space","getTitle","parseBucket","bucket","subtract","valueOf","_","num","unit","split","bucketLabels","getDefaultState","oldestIssues","unresolvedIssueAge","getEndpoints","teamSlug","props","limit","componentDidUpdate","prevProps","remountComponent","renderLoading","renderBody","loading","state","seriesData","Object","entries","map","value","name","sort","a","b","height","right","top","minInterval","splitNumber","type","min","axisLabel","showMaxLabel","showMinLabel","formatter","seriesName","silent","data","barCategoryGap","issue","title","features","project","pathname","count","userCount","firstSeen","ChartWrapper","border","StyledPanelTable","fontSizeMedium","isEmpty","RightAligned","ProjectTitleContainer","overflowEllipsis","TitleOverflow","ShadowlessProjectBadge","isEqual","CollapsePanel","COLLAPSE_COUNT","normalizeDateTimeParams","ProjectsStore","ProjectBadgeContainer","barAxisLabel","convertDayValueObjectToSeries","sortSeriesByDay","keys","issuesBreakdown","statuses","datetime","allReviewedByDay","projectTotals","projectId","counts","deleted","ignored","resolved","unignored","regressed","new","total","key","undefined","sortedProjectIds","allSeries","idx","getById","animationDuration","animationDelay","isExpanded","showMoreButton","action","IssuesChartWrapper","repeat","numActions","AlignRight","getDuration","resolutionTime","avg","Date","getTime","valueFormatter","tct","formatPercentage","groupByTrend","setState","expandTable","periodIssues","endpoints","getTotalUnresolved","values","reduce","acc","current","unresolved","Math","round","periodAvg","Number","projectPeriodEntries","today","percentChange","abs","isNaN","sortedProjects","trend","groupedProjects","allData","flatMap","totalByDay","totals","ScoreWrapper","PaddedIconArrow","SubText","color"],"sourceRoot":""}