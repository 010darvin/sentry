{"version":3,"file":"chunks/app_components_modals_createNewIntegrationModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/createNewIntegrationModal.tsx","webpack:///./app/views/organizationIntegrations/exampleIntegrationButton.tsx"],"sourcesContent":["import {Fragment, ReactNode, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport RadioGroup from 'sentry/components/forms/controls/radioGroup';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {\n  platformEventLinkMap,\n  PlatformEvents,\n} from 'sentry/utils/analytics/integrations/platformAnalyticsEvents';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport ExampleIntegrationButton from 'sentry/views/organizationIntegrations/exampleIntegrationButton';\n\nexport type CreateNewIntegrationModalOptions = {organization: Organization};\ntype CreateNewIntegrationModalProps = CreateNewIntegrationModalOptions & ModalRenderProps;\n\nconst analyticsView = 'new_integration_modal' as const;\n\nfunction CreateNewIntegrationModal({\n  Body,\n  Header,\n  Footer,\n  closeModal,\n  organization,\n}: CreateNewIntegrationModalProps) {\n  const [option, selectOption] = useState('internal');\n  const choices = [\n    [\n      'internal',\n      <RadioChoiceHeader data-test-id=\"internal-integration\" key=\"header-internal\">\n        {t('Internal Integration')}\n      </RadioChoiceHeader>,\n      <RadioChoiceDescription key=\"description-internal\">\n        {tct(\n          'Internal integrations are meant for custom integrations unique to your organization. See more info on [docsLink].',\n          {\n            docsLink: (\n              <ExternalLink\n                href={platformEventLinkMap[PlatformEvents.INTERNAL_DOCS]}\n                onClick={() => {\n                  trackIntegrationAnalytics(PlatformEvents.INTERNAL_DOCS, {\n                    organization,\n                    view: analyticsView,\n                  });\n                }}\n              >\n                {t('Internal Integrations')}\n              </ExternalLink>\n            ),\n          }\n        )}\n      </RadioChoiceDescription>,\n    ],\n    [\n      'public',\n      <RadioChoiceHeader data-test-id=\"public-integration\" key=\"header-public\">\n        {t('Public Integration')}\n      </RadioChoiceHeader>,\n      <RadioChoiceDescription key=\"description-public\">\n        {tct(\n          'A public integration will be available for all Sentry users for installation. See more info on [docsLink].',\n          {\n            docsLink: (\n              <ExternalLink\n                href={platformEventLinkMap[PlatformEvents.PUBLIC_DOCS]}\n                onClick={() => {\n                  trackIntegrationAnalytics(PlatformEvents.PUBLIC_DOCS, {\n                    organization,\n                    view: analyticsView,\n                  });\n                }}\n              >\n                {t('Public Integrations')}\n              </ExternalLink>\n            ),\n          }\n        )}\n      </RadioChoiceDescription>,\n    ],\n  ] as [string, ReactNode, ReactNode][];\n\n  if (organization.features.includes('sentry-functions')) {\n    choices.push([\n      'sentry-fx',\n      <RadioChoiceHeader data-test-id=\"sentry-function\" key=\"header-sentryfx\">\n        {t('Sentry Function')}\n      </RadioChoiceHeader>,\n      <RadioChoiceDescription key=\"description-sentry-function\">\n        {t(\n          'A Sentry Function is a new type of integration leveraging the power of cloud functions.'\n        )}\n      </RadioChoiceDescription>,\n    ]);\n  }\n\n  return (\n    <Fragment>\n      <Header>\n        <HeaderWrapper>\n          <h3>{t('Choose Integration Type')}</h3>\n          <ExampleIntegrationButton analyticsView={analyticsView} />\n        </HeaderWrapper>\n      </Header>\n      <Body>\n        <StyledRadioGroup\n          choices={choices}\n          label={t('Avatar Type')}\n          onChange={value => selectOption(value)}\n          value={option}\n        />\n      </Body>\n      <Footer>\n        <Button size=\"sm\" onClick={() => closeModal()} style={{marginRight: space(1)}}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          priority=\"primary\"\n          size=\"sm\"\n          to={\n            option === 'sentry-fx'\n              ? `/settings/${organization.slug}/developer-settings/sentry-functions/new/`\n              : `/settings/${organization.slug}/developer-settings/${\n                  option === 'public' ? 'new-public' : 'new-internal'\n                }/`\n          }\n          onClick={() => {\n            trackIntegrationAnalytics(\n              option === 'sentry-fx'\n                ? PlatformEvents.CHOSE_SENTRY_FX\n                : option === 'public'\n                ? PlatformEvents.CHOSE_PUBLIC\n                : PlatformEvents.CHOSE_INTERNAL,\n              {\n                organization,\n                view: analyticsView,\n              }\n            );\n          }}\n        >\n          {t('Next')}\n        </Button>\n      </Footer>\n    </Fragment>\n  );\n}\n\nconst StyledRadioGroup = styled(RadioGroup)`\n  grid-auto-columns: auto;\n  & > label:not(:last-child) > div:last-child > * {\n    padding-bottom: ${space(1)};\n  }\n`;\nconst RadioChoiceHeader = styled('h6')`\n  margin: 0;\n`;\n\nconst RadioChoiceDescription = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-size: ${p => p.theme.fontSizeMedium};\n  line-height: 1.6em;\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nexport default withOrganization(CreateNewIntegrationModal);\n","import Button, {ButtonProps} from 'sentry/components/button';\nimport {IconGithub} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {IntegrationView} from 'sentry/utils/analytics/integrations';\nimport {\n  platformEventLinkMap,\n  PlatformEvents,\n} from 'sentry/utils/analytics/integrations/platformAnalyticsEvents';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype ExampleIntegrationButtonProps = {\n  analyticsView: IntegrationView['view'];\n  organization: Organization;\n} & ButtonProps;\n\n/**\n * Button to direct users to the Example App repository\n */\nfunction ExampleIntegrationButton({\n  organization,\n  analyticsView,\n  ...buttonProps\n}: ExampleIntegrationButtonProps) {\n  return (\n    <Button\n      size=\"sm\"\n      external\n      href={platformEventLinkMap[PlatformEvents.EXAMPLE_SOURCE]}\n      onClick={() => {\n        trackIntegrationAnalytics(PlatformEvents.EXAMPLE_SOURCE, {\n          organization,\n          view: analyticsView,\n        });\n      }}\n      icon={<IconGithub />}\n      {...buttonProps}\n    >\n      {t('View Example App')}\n    </Button>\n  );\n}\nexport default withOrganization(ExampleIntegrationButton);\n"],"names":["Fragment","useState","Button","RadioGroup","ExternalLink","t","tct","space","platformEventLinkMap","PlatformEvents","trackIntegrationAnalytics","withOrganization","ExampleIntegrationButton","analyticsView","CreateNewIntegrationModal","Body","Header","Footer","closeModal","organization","option","selectOption","choices","docsLink","INTERNAL_DOCS","view","PUBLIC_DOCS","features","includes","push","value","marginRight","slug","CHOSE_SENTRY_FX","CHOSE_PUBLIC","CHOSE_INTERNAL","StyledRadioGroup","RadioChoiceHeader","RadioChoiceDescription","p","theme","gray400","fontSizeMedium","HeaderWrapper","IconGithub","buttonProps","EXAMPLE_SOURCE"],"sourceRoot":""}