{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_accountSecurityEnroll_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/getPendingInvite.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityEnroll.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx"],"sourcesContent":["import Cookies from 'js-cookie';\nimport * as qs from 'query-string';\n\ntype PendingInvite = {\n  memberId: number;\n  token: string;\n  url: string;\n};\n\nexport default function getPendingInvite(): PendingInvite | null {\n  const data = Cookies.get('pending-invite');\n\n  if (!data) {\n    return null;\n  }\n\n  return qs.parse(data) as any;\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\n// eslint-disable-next-line no-restricted-imports\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {QRCodeCanvas} from 'qrcode.react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {openRecoveryOptions} from 'sentry/actionCreators/modal';\nimport {fetchOrganizationByMember} from 'sentry/actionCreators/organizations';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport Field from 'sentry/components/forms/field';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport FormModel from 'sentry/components/forms/model';\nimport TextCopyInput from 'sentry/components/forms/textCopyInput';\nimport {FieldObject} from 'sentry/components/forms/type';\nimport {PanelItem} from 'sentry/components/panels';\nimport U2fsign from 'sentry/components/u2f/u2fsign';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Authenticator} from 'sentry/types';\nimport getPendingInvite from 'sentry/utils/getPendingInvite';\nimport AsyncView from 'sentry/views/asyncView';\nimport RemoveConfirm from 'sentry/views/settings/account/accountSecurity/components/removeConfirm';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype getFieldsOpts = {\n  authenticator: Authenticator;\n  /**\n   * Flag to track if totp has been sent\n   */\n  hasSentCode: boolean;\n  /**\n   * Callback to reset SMS 2fa enrollment\n   */\n  onSmsReset: () => void;\n  /**\n   * Callback when u2f device is activated\n   */\n  onU2fTap: React.ComponentProps<typeof U2fsign>['onTap'];\n  /**\n   * Flag to track if we are currently sending the otp code\n   */\n  sendingCode: boolean;\n};\n\n/**\n * Retrieve additional form fields (or modify ones) based on 2fa method\n */\nconst getFields = ({\n  authenticator,\n  hasSentCode,\n  sendingCode,\n  onSmsReset,\n  onU2fTap,\n}: getFieldsOpts): null | FieldObject[] => {\n  const {form} = authenticator;\n\n  if (!form) {\n    return null;\n  }\n\n  if (authenticator.id === 'totp') {\n    return [\n      () => (\n        <CodeContainer key=\"qrcode\">\n          <StyledQRCode value={authenticator.qrcode} size={228} />\n        </CodeContainer>\n      ),\n      () => (\n        <Field key=\"secret\" label={t('Authenticator secret')}>\n          <TextCopyInput>{authenticator.secret ?? ''}</TextCopyInput>\n        </Field>\n      ),\n      ...form,\n      () => (\n        <Actions key=\"confirm\">\n          <Button priority=\"primary\" type=\"submit\">\n            {t('Confirm')}\n          </Button>\n        </Actions>\n      ),\n    ];\n  }\n\n  // Sms Form needs a start over button + confirm button\n  // Also inputs being disabled vary based on hasSentCode\n  if (authenticator.id === 'sms') {\n    // Ideally we would have greater flexibility when rendering footer\n    return [\n      {...form[0], disabled: sendingCode || hasSentCode},\n      ...(hasSentCode ? [{...form[1], required: true}] : []),\n      () => (\n        <Actions key=\"sms-footer\">\n          <ButtonBar gap={1}>\n            {hasSentCode && <Button onClick={onSmsReset}>{t('Start Over')}</Button>}\n            <Button priority=\"primary\" type=\"submit\">\n              {hasSentCode ? t('Confirm') : t('Send Code')}\n            </Button>\n          </ButtonBar>\n        </Actions>\n      ),\n    ];\n  }\n\n  // Need to render device name field + U2f component\n  if (authenticator.id === 'u2f') {\n    const deviceNameField = form.find(({name}) => name === 'deviceName')!;\n    return [\n      deviceNameField,\n      () => (\n        <U2fsign\n          key=\"u2f-enroll\"\n          style={{marginBottom: 0}}\n          challengeData={authenticator.challenge}\n          displayMode=\"enroll\"\n          onTap={onU2fTap}\n        />\n      ),\n    ];\n  }\n\n  return null;\n};\n\ntype Props = AsyncView['props'] & WithRouterProps<{authId: string}, {}> & {};\n\ntype State = AsyncView['state'] & {\n  authenticator: Authenticator | null;\n  hasSentCode: boolean;\n  sendingCode: boolean;\n};\n\ntype PendingInvite = ReturnType<typeof getPendingInvite>;\n\n/**\n * Renders necessary forms in order to enroll user in 2fa\n */\nclass AccountSecurityEnroll extends AsyncView<Props, State> {\n  formModel = new FormModel();\n\n  getTitle() {\n    return t('Security');\n  }\n\n  getDefaultState() {\n    return {...super.getDefaultState(), hasSentCode: false};\n  }\n\n  get authenticatorEndpoint() {\n    return `/users/me/authenticators/${this.props.params.authId}/`;\n  }\n\n  get enrollEndpoint() {\n    return `${this.authenticatorEndpoint}enroll/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const errorHandler = (err: any) => {\n      const alreadyEnrolled =\n        err &&\n        err.status === 400 &&\n        err.responseJSON &&\n        err.responseJSON.details === 'Already enrolled';\n\n      if (alreadyEnrolled) {\n        this.props.router.push('/settings/account/security/');\n        addErrorMessage(t('Already enrolled'));\n      }\n\n      // Allow the endpoint to fail if the user is already enrolled\n      return alreadyEnrolled;\n    };\n\n    return [['authenticator', this.enrollEndpoint, {}, {allowError: errorHandler}]];\n  }\n\n  componentDidMount() {\n    this.pendingInvitation = getPendingInvite();\n  }\n\n  pendingInvitation: PendingInvite = null;\n\n  get authenticatorName() {\n    return this.state.authenticator?.name ?? 'Authenticator';\n  }\n\n  // This resets state so that user can re-enter their phone number again\n  handleSmsReset = () => this.setState({hasSentCode: false}, this.remountComponent);\n\n  // Handles SMS authenticators\n  handleSmsSubmit = async (dataModel: any) => {\n    const {authenticator, hasSentCode} = this.state;\n    const {phone, otp} = dataModel;\n\n    // Don't submit if empty\n    if (!phone || !authenticator) {\n      return;\n    }\n\n    const data = {\n      phone,\n      // Make sure `otp` is undefined if we are submitting OTP verification\n      // Otherwise API will think that we are on verification step (e.g. after submitting phone)\n      otp: hasSentCode ? otp : undefined,\n      secret: authenticator.secret,\n    };\n\n    // Only show loading when submitting OTP\n    this.setState({sendingCode: !hasSentCode});\n\n    if (!hasSentCode) {\n      addLoadingMessage(t('Sending code to %s...', data.phone));\n    } else {\n      addLoadingMessage(t('Verifying OTP...'));\n    }\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (error) {\n      this.formModel.resetForm();\n\n      addErrorMessage(\n        this.state.hasSentCode ? t('Incorrect OTP') : t('Error sending SMS')\n      );\n\n      this.setState({\n        hasSentCode: false,\n        sendingCode: false,\n      });\n\n      // Re-mount because we want to fetch a fresh secret\n      this.remountComponent();\n\n      return;\n    }\n\n    if (!hasSentCode) {\n      // Just successfully finished sending OTP to user\n      this.setState({hasSentCode: true, sendingCode: false});\n      addSuccessMessage(t('Sent code to %s', data.phone));\n    } else {\n      // OTP was accepted and SMS was added as a 2fa method\n      this.handleEnrollSuccess();\n    }\n  };\n\n  // Handle u2f device tap\n  handleU2fTap = async (tapData: any) => {\n    const data = {deviceName: this.formModel.getValue('deviceName'), ...tapData};\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  // Currently only TOTP uses this\n  handleTotpSubmit = async (dataModel: any) => {\n    if (!this.state.authenticator) {\n      return;\n    }\n\n    const data = {\n      ...(dataModel ?? {}),\n      secret: this.state.authenticator.secret,\n    };\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {method: 'POST', data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  handleSubmit: Form['props']['onSubmit'] = data => {\n    const id = this.state.authenticator?.id;\n\n    if (id === 'totp') {\n      this.handleTotpSubmit(data);\n      return;\n    }\n    if (id === 'sms') {\n      this.handleSmsSubmit(data);\n      return;\n    }\n  };\n\n  // Handler when we successfully add a 2fa device\n  async handleEnrollSuccess() {\n    // If we're pending approval of an invite, the user will have just joined\n    // the organization when completing 2fa enrollment. We should reload the\n    // organization context in that case to assign them to the org.\n    if (this.pendingInvitation) {\n      await fetchOrganizationByMember(this.pendingInvitation.memberId.toString(), {\n        addOrg: true,\n        fetchOrgDetails: true,\n      });\n    }\n\n    this.props.router.push('/settings/account/security/');\n    openRecoveryOptions({authenticatorName: this.authenticatorName});\n  }\n\n  // Handler when we failed to add a 2fa device\n  handleEnrollError() {\n    this.setState({loading: false});\n    addErrorMessage(t('Error adding %s authenticator', this.authenticatorName));\n  }\n\n  // Removes an authenticator\n  handleRemove = async () => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // `authenticator.authId` is NOT the same as `props.params.authId` This is\n    // for backwards compatibility with API endpoint\n    try {\n      await this.api.requestPromise(this.authenticatorEndpoint, {method: 'DELETE'});\n    } catch (err) {\n      addErrorMessage(t('Error removing authenticator'));\n      return;\n    }\n\n    this.props.router.push('/settings/account/security/');\n    addSuccessMessage(t('Authenticator has been removed'));\n  };\n\n  renderBody() {\n    const {authenticator, hasSentCode, sendingCode} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const fields = getFields({\n      authenticator,\n      hasSentCode,\n      sendingCode,\n      onSmsReset: this.handleSmsReset,\n      onU2fTap: this.handleU2fTap,\n    });\n\n    // Attempt to extract `defaultValue` from server generated form fields\n    const defaultValues = fields\n      ? fields\n          .filter(\n            field =>\n              typeof field !== 'function' && typeof field.defaultValue !== 'undefined'\n          )\n          .map(field => [\n            field.name,\n            typeof field !== 'function' ? field.defaultValue : '',\n          ])\n          .reduce((acc, [name, value]) => {\n            acc[name] = value;\n            return acc;\n          }, {})\n      : {};\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={\n            <Fragment>\n              <span>{authenticator.name}</span>\n              <CircleIndicator\n                css={{marginLeft: 6}}\n                enabled={authenticator.isEnrolled || authenticator.status === 'rotation'}\n              />\n            </Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <RemoveConfirm onConfirm={this.handleRemove}>\n                <Button priority=\"danger\">{authenticator.removeButton}</Button>\n              </RemoveConfirm>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        {authenticator.rotationWarning && authenticator.status === 'rotation' && (\n          <Alert type=\"warning\" showIcon>\n            {authenticator.rotationWarning}\n          </Alert>\n        )}\n\n        {!!authenticator.form?.length && (\n          <Form\n            model={this.formModel}\n            apiMethod=\"POST\"\n            apiEndpoint={this.authenticatorEndpoint}\n            onSubmit={this.handleSubmit}\n            initialData={{...defaultValues, ...authenticator}}\n            hideFooter\n          >\n            <JsonForm forms={[{title: 'Configuration', fields: fields ?? []}]} />\n          </Form>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst CodeContainer = styled(PanelItem)`\n  justify-content: center;\n`;\n\nconst Actions = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nconst StyledQRCode = styled(QRCodeCanvas)`\n  background: white;\n  padding: ${space(2)};\n`;\n\nexport default withRouter(AccountSecurityEnroll);\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import {Fragment} from 'react';\n\nimport Confirm from 'sentry/components/confirm';\nimport {t} from 'sentry/locale';\nimport ConfirmHeader from 'sentry/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </Fragment>\n);\n\nconst RemoveConfirm = (props: Props) => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n"],"names":["Cookies","qs","getPendingInvite","data","get","parse","AsyncComponent","SentryDocumentTitle","AsyncView","getTitle","render","renderComponent","Fragment","withRouter","QRCodeCanvas","addErrorMessage","addLoadingMessage","addSuccessMessage","openRecoveryOptions","fetchOrganizationByMember","Alert","Button","ButtonBar","CircleIndicator","Field","Form","JsonForm","FormModel","TextCopyInput","PanelItem","U2fsign","t","space","RemoveConfirm","SettingsPageHeader","TextBlock","getFields","authenticator","hasSentCode","sendingCode","onSmsReset","onU2fTap","form","id","qrcode","secret","disabled","required","deviceNameField","find","name","marginBottom","challenge","AccountSecurityEnroll","setState","remountComponent","dataModel","state","phone","otp","undefined","api","requestPromise","enrollEndpoint","error","formModel","resetForm","handleEnrollSuccess","tapData","deviceName","getValue","loading","err","handleEnrollError","method","handleTotpSubmit","handleSmsSubmit","authId","authenticatorEndpoint","props","router","push","getDefaultState","params","getEndpoints","errorHandler","alreadyEnrolled","status","responseJSON","details","allowError","componentDidMount","pendingInvitation","authenticatorName","memberId","toString","addOrg","fetchOrgDetails","renderBody","fields","handleSmsReset","handleU2fTap","defaultValues","filter","field","defaultValue","map","reduce","acc","value","isEnrolled","removeButton","handleRemove","description","rotationWarning","length","handleSubmit","title","CodeContainer","Actions","StyledQRCode","ConfirmHeader","Confirm","message"],"sourceRoot":""}