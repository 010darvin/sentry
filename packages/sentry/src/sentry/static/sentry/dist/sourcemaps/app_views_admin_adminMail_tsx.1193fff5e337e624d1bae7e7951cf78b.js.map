{"version":3,"file":"chunks/app_views_admin_adminMail_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/admin/adminMail.tsx","webpack:///./app/views/asyncView.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport Button from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport AsyncView from 'sentry/views/asyncView';\n\ntype Data = {\n  mailFrom: string;\n  mailHost: string;\n  mailListNamespace: string;\n  mailPassword: string;\n  mailPort: string;\n  mailUseSsl: string;\n  mailUseTls: string;\n  mailUsername: string;\n  testMailEmail: string;\n};\n\ntype State = AsyncView['state'] & {data: Data};\n\nexport default class AdminMail extends AsyncView<{}, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['data', '/internal/mail/']];\n  }\n\n  sendTestEmail = async () => {\n    const testMailEmail = this.state.data.testMailEmail;\n\n    try {\n      await this.api.requestPromise('/internal/mail/', {method: 'POST'});\n      addSuccessMessage(t('A test email has been sent to %s', testMailEmail));\n    } catch (error) {\n      addErrorMessage(\n        error.responseJSON\n          ? error.responseJSON.error\n          : t('Unable to send test email. Check your server logs')\n      );\n    }\n  };\n\n  renderBody() {\n    const {data} = this.state;\n    const {\n      mailHost,\n      mailPassword,\n      mailUsername,\n      mailPort,\n      mailUseTls,\n      mailUseSsl,\n      mailFrom,\n      mailListNamespace,\n      testMailEmail,\n    } = data;\n\n    return (\n      <div>\n        <h3>{t('SMTP Settings')}</h3>\n\n        <dl className=\"vars\">\n          <dt>{t('From Address')}</dt>\n          <dd>\n            <pre className=\"val\">{mailFrom}</pre>\n          </dd>\n\n          <dt>{t('Host')}</dt>\n          <dd>\n            <pre className=\"val\">\n              {mailHost}:{mailPort}\n            </pre>\n          </dd>\n\n          <dt>{t('Username')}</dt>\n          <dd>\n            <pre className=\"val\">{mailUsername || <em>{t('not set')}</em>}</pre>\n          </dd>\n\n          <dt>{t('Password')}</dt>\n          <dd>\n            <pre className=\"val\">\n              {mailPassword ? '********' : <em>{t('not set')}</em>}\n            </pre>\n          </dd>\n\n          <dt>{t('STARTTLS?')}</dt>\n          <dd>\n            <pre className=\"val\">{mailUseTls ? t('Yes') : t('No')}</pre>\n          </dd>\n\n          <dt>{t('SSL?')}</dt>\n          <dd>\n            <pre className=\"val\">{mailUseSsl ? t('Yes') : t('No')}</pre>\n          </dd>\n\n          <dt>{t('Mailing List Namespace')}</dt>\n          <dd>\n            <pre className=\"val\">{mailListNamespace}</pre>\n          </dd>\n        </dl>\n\n        <h3>{t('Test Settings')}</h3>\n\n        <p>\n          {t(\n            \"Send an email to your account's email address to confirm that everything is configured correctly.\"\n          )}\n        </p>\n\n        <Button onClick={this.sendTestEmail}>\n          {t('Send a test email to %s', testMailEmail)}\n        </Button>\n      </div>\n    );\n  }\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n"],"names":["addErrorMessage","addSuccessMessage","Button","t","AsyncView","AdminMail","testMailEmail","state","data","api","requestPromise","method","error","responseJSON","getEndpoints","renderBody","mailHost","mailPassword","mailUsername","mailPort","mailUseTls","mailUseSsl","mailFrom","mailListNamespace","sendTestEmail","AsyncComponent","SentryDocumentTitle","getTitle","render","renderComponent"],"sourceRoot":""}