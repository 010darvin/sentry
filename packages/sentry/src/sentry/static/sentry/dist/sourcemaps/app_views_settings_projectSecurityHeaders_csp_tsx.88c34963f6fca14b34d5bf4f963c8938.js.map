{"version":3,"file":"chunks/app_views_settings_projectSecurityHeaders_csp_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/previewFeature.tsx","webpack:///./app/data/forms/cspReports.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectSecurityHeaders/csp.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.tsx"],"sourcesContent":["import Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  type?: React.ComponentProps<typeof Alert>['type'];\n};\n\nconst PreviewFeature = ({type = 'info'}: Props) => (\n  <Alert type={type} showIcon>\n    {t(\n      'This feature is a preview and may change in the future. Thanks for being an early adopter!'\n    )}\n  </Alert>\n);\n\nexport default PreviewFeature;\n","// Export route to make these forms searchable by label/help\nimport {JsonFormObject} from 'sentry/components/forms/type';\nimport {t} from 'sentry/locale';\n\nexport const route = '/settings/:orgId/projects/:projectId/csp/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'CSP Settings',\n    fields: [\n      {\n        name: 'sentry:csp_ignored_sources_defaults',\n        type: 'boolean',\n\n        label: t('Use default ignored sources'),\n        help: t(\n          'Our default list will attempt to ignore common issues and reduce noise.'\n        ),\n        getData: data => ({options: data}),\n      },\n\n      // XXX: Org details endpoints accept these multiline inputs as a list,\n      // where as it looks like project details accepts it as a string with newlines\n      {\n        name: 'sentry:csp_ignored_sources',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        rows: 4,\n        placeholder: 'e.g.\\nfile://*\\n*.example.com\\nexample.com',\n        label: t('Additional ignored sources'),\n        help: t(\n          'Discard reports about requests from the given sources. Separate multiple entries with a newline.'\n        ),\n        extraHelp: t('Separate multiple entries with a newline.'),\n        getData: data => ({options: data}),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\n\nimport Access from 'sentry/components/acl/access';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport PreviewFeature from 'sentry/components/previewFeature';\nimport formGroups from 'sentry/data/forms/cspReports';\nimport {t, tct} from 'sentry/locale';\nimport {Project, ProjectKey} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ReportUri, {\n  getSecurityDsn,\n} from 'sentry/views/settings/projectSecurityHeaders/reportUri';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  keyList: null | ProjectKey[];\n  project: null | Project;\n} & AsyncView['state'];\n\nexport default class ProjectCspReports extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [\n      ['keyList', `/projects/${orgId}/${projectId}/keys/`],\n      ['project', `/projects/${orgId}/${projectId}/`],\n    ];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Content Security Policy (CSP)'), projectId, false);\n  }\n\n  getInstructions(keyList: ProjectKey[]) {\n    return (\n      'def middleware(request, response):\\n' +\n      \"    response['Content-Security-Policy'] = \\\\\\n\" +\n      '        \"default-src *; \" \\\\\\n' +\n      \"        \\\"script-src 'self' 'unsafe-eval' 'unsafe-inline' cdn.example.com cdn.ravenjs.com; \\\" \\\\\\n\" +\n      \"        \\\"style-src 'self' 'unsafe-inline' cdn.example.com; \\\" \\\\\\n\" +\n      '        \"img-src * data:; \" \\\\\\n' +\n      '        \"report-uri ' +\n      getSecurityDsn(keyList) +\n      '\"\\n' +\n      '    return response\\n'\n    );\n  }\n\n  getReportOnlyInstructions(keyList: ProjectKey[]) {\n    return (\n      'def middleware(request, response):\\n' +\n      \"    response['Content-Security-Policy-Report-Only'] = \\\\\\n\" +\n      '        \"default-src \\'self\\'; \" \\\\\\n' +\n      '        \"report-uri ' +\n      getSecurityDsn(keyList) +\n      '\"\\n' +\n      '    return response\\n'\n    );\n  }\n\n  renderBody() {\n    const {orgId, projectId} = this.props.params;\n    const {project, keyList} = this.state;\n    if (!keyList || !project) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Content Security Policy')} />\n\n        <PreviewFeature />\n\n        <ReportUri keyList={keyList} orgId={orgId} projectId={projectId} />\n\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          initialData={project.options}\n          apiEndpoint={`/projects/${orgId}/${projectId}/`}\n        >\n          <Access access={['project:write']}>\n            {({hasAccess}) => <JsonForm disabled={!hasAccess} forms={formGroups} />}\n          </Access>\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('About')}</PanelHeader>\n\n          <PanelBody withPadding>\n            <p>\n              {tct(\n                `[link:Content Security Policy]\n            (CSP) is a security standard which helps prevent cross-site scripting (XSS),\n            clickjacking and other code injection attacks resulting from execution of\n            malicious content in the trusted web page context. It's enforced by browser\n            vendors, and Sentry supports capturing CSP violations using the standard\n            reporting hooks.`,\n                {\n                  link: (\n                    <ExternalLink href=\"https://en.wikipedia.org/wiki/Content_Security_Policy\" />\n                  ),\n                }\n              )}\n            </p>\n\n            <p>\n              {tct(\n                `To configure [csp:CSP] reports\n              in Sentry, you'll need to send a header from your server describing your\n              policy, as well specifying the authenticated Sentry endpoint.`,\n                {\n                  csp: <abbr title=\"Content Security Policy\" />,\n                }\n              )}\n            </p>\n\n            <p>\n              {t(\n                'For example, in Python you might achieve this via a simple web middleware'\n              )}\n            </p>\n            <pre>{this.getInstructions(keyList)}</pre>\n\n            <p>\n              {t(`Alternatively you can setup CSP reports to simply send reports rather than\n              actually enforcing the policy`)}\n            </p>\n            <pre>{this.getReportOnlyInstructions(keyList)}</pre>\n\n            <p>\n              {tct(\n                `We recommend setting this up to only run on a percentage of requests, as\n              otherwise you may find that you've quickly exhausted your quota. For more\n              information, take a look at [link:the article on html5rocks.com].`,\n                {\n                  link: (\n                    <a href=\"http://www.html5rocks.com/en/tutorials/security/content-security-policy/\" />\n                  ),\n                }\n              )}\n            </p>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n","import Field from 'sentry/components/forms/field';\nimport TextCopyInput from 'sentry/components/forms/textCopyInput';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport {ProjectKey} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport function getSecurityDsn(keyList: ProjectKey[]) {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n}\n\ntype Props = {\n  keyList: ProjectKey[];\n  orgId: string;\n  projectId: string;\n};\n\nexport default function ReportUri({keyList, orgId, projectId}: Props) {\n  return (\n    <Panel>\n      <PanelHeader>{t('Report URI')}</PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"info\">\n          {tct(\n            \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n            {\n              link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n            }\n          )}\n        </PanelAlert>\n        <Field inline={false} flexibleControlStateSize>\n          <TextCopyInput>{getSecurityDsn(keyList)}</TextCopyInput>\n        </Field>\n      </PanelBody>\n    </Panel>\n  );\n}\n"],"names":["Alert","t","PreviewFeature","type","route","formGroups","title","fields","name","label","help","getData","data","options","multiline","autosize","rows","placeholder","extraHelp","routeTitleGen","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncComponent","SentryDocumentTitle","AsyncView","getTitle","render","renderComponent","Access","Form","JsonForm","ExternalLink","Panel","PanelBody","PanelHeader","tct","SettingsPageHeader","ReportUri","getSecurityDsn","ProjectCspReports","getEndpoints","orgId","projectId","props","params","getInstructions","keyList","getReportOnlyInstructions","renderBody","project","state","hasAccess","link","csp","Field","TextCopyInput","Link","PanelAlert","getDynamicText","DEFAULT_ENDPOINT","endpoint","length","dsn","security","value","fixed"],"sourceRoot":""}