{"version":3,"file":"chunks/app_views_alerts_edit_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/edit.tsx","webpack:///./app/views/alerts/rules/metric/edit.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport Teams from 'sentry/utils/teams';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport IssueEditor from 'sentry/views/alerts/rules/issue';\nimport MetricRulesEdit from 'sentry/views/alerts/rules/metric/edit';\nimport {AlertRuleType} from 'sentry/views/alerts/types';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  hasMetricAlerts: boolean;\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  ruleName: string;\n};\n\nclass ProjectAlertsEditor extends Component<Props, State> {\n  state: State = {\n    ruleName: '',\n  };\n\n  componentDidMount() {\n    const {organization, project} = this.props;\n    trackAdvancedAnalyticsEvent('edit_alert_rule.viewed', {\n      organization,\n      project_id: project.id,\n      alert_type: this.getAlertType(),\n    });\n  }\n\n  handleChangeTitle = (ruleName: string) => {\n    this.setState({ruleName});\n  };\n\n  getTitle() {\n    const {ruleName} = this.state;\n    return `${ruleName}`;\n  }\n\n  getAlertType(): AlertRuleType {\n    return location.pathname.includes('/alerts/metric-rules/')\n      ? AlertRuleType.METRIC\n      : AlertRuleType.ISSUE;\n  }\n\n  render() {\n    const {hasMetricAlerts, location, organization, project, routes} = this.props;\n    const alertType = this.getAlertType();\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle\n          title={this.getTitle()}\n          orgSlug={organization.slug}\n          projectSlug={project.slug}\n        />\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <BuilderBreadCrumbs\n              organization={organization}\n              title={t('Edit Alert Rule')}\n              projectSlug={project.slug}\n              routes={routes}\n              location={location}\n            />\n            <Layout.Title>{this.getTitle()}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <EditConditionsBody>\n          <Teams provideUserTeams>\n            {({teams, initiallyLoaded}) =>\n              initiallyLoaded ? (\n                <Fragment>\n                  {(!hasMetricAlerts || alertType === AlertRuleType.ISSUE) && (\n                    <IssueEditor\n                      {...this.props}\n                      project={project}\n                      onChangeTitle={this.handleChangeTitle}\n                      userTeamIds={teams.map(({id}) => id)}\n                    />\n                  )}\n                  {hasMetricAlerts && alertType === AlertRuleType.METRIC && (\n                    <MetricRulesEdit\n                      {...this.props}\n                      project={project}\n                      onChangeTitle={this.handleChangeTitle}\n                      userTeamIds={teams.map(({id}) => id)}\n                    />\n                  )}\n                </Fragment>\n              ) : (\n                <LoadingIndicator />\n              )\n            }\n          </Teams>\n        </EditConditionsBody>\n      </Fragment>\n    );\n  }\n}\n\nconst EditConditionsBody = styled(Layout.Body)`\n  *:not(img) {\n    max-width: 1000px;\n  }\n`;\n\nexport default ProjectAlertsEditor;\n","import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {metric} from 'sentry/utils/analytics';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport RuleForm from 'sentry/views/alerts/rules/metric/ruleForm';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\nimport AsyncView from 'sentry/views/asyncView';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = {\n  onChangeTitle: (data: string) => void;\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  actions: Map<string, any>;\n  rule: MetricRule; // This is temp\n} & AsyncView['state'];\n\nclass MetricRulesEdit extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      actions: new Map(),\n    };\n  }\n\n  getTitle(): string {\n    const {organization, project} = this.props;\n    const {rule} = this.state;\n    const ruleName = rule?.name;\n\n    return routeTitleGen(\n      ruleName ? t('Alert %s', ruleName) : '',\n      organization.slug,\n      false,\n      project?.slug\n    );\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, ruleId} = this.props.params;\n\n    return [['rule', `/organizations/${orgId}/alert-rules/${ruleId}/`]];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    if (stateKey === 'rule' && data.name) {\n      this.props.onChangeTitle(data.name);\n    }\n  }\n\n  onLoadAllEndpointsSuccess() {\n    const {rule} = this.state;\n    if (rule?.errors) {\n      (rule?.errors || []).map(({detail}) => addErrorMessage(detail, {append: true}));\n    }\n  }\n\n  handleSubmitSuccess = () => {\n    const {router} = this.props;\n    const {orgId, ruleId} = this.props.params;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push({\n      pathname: `/organizations/${orgId}/alerts/rules/details/${ruleId}/`,\n    });\n  };\n\n  renderError(error?: Error, disableLog = false): React.ReactNode {\n    const {errors} = this.state;\n    const notFound = Object.values(errors).find(resp => resp && resp.status === 404);\n    if (notFound) {\n      return (\n        <Alert type=\"error\" showIcon>\n          {t('This alert rule could not be found.')}\n        </Alert>\n      );\n    }\n    return super.renderError(error, disableLog);\n  }\n\n  renderBody() {\n    const {ruleId} = this.props.params;\n    const {rule} = this.state;\n\n    return (\n      <RuleForm\n        {...this.props}\n        ruleId={ruleId}\n        rule={rule}\n        onSubmitSuccess={this.handleSubmitSuccess}\n        disableProjectSelector\n      />\n    );\n  }\n}\n\nexport default MetricRulesEdit;\n"],"names":["Component","Fragment","Layout","LoadingIndicator","SentryDocumentTitle","t","trackAdvancedAnalyticsEvent","Teams","BuilderBreadCrumbs","IssueEditor","MetricRulesEdit","AlertRuleType","ProjectAlertsEditor","ruleName","setState","componentDidMount","organization","project","props","project_id","id","alert_type","getAlertType","getTitle","state","location","pathname","includes","METRIC","ISSUE","render","hasMetricAlerts","routes","alertType","slug","teams","initiallyLoaded","handleChangeTitle","map","EditConditionsBody","Body","addErrorMessage","Alert","metric","routeTitleGen","RuleForm","AsyncView","router","orgId","ruleId","params","endTransaction","name","push","getDefaultState","actions","Map","rule","getEndpoints","onRequestSuccess","stateKey","data","onChangeTitle","onLoadAllEndpointsSuccess","errors","detail","append","renderError","error","disableLog","notFound","Object","values","find","resp","status","renderBody","handleSubmitSuccess"],"sourceRoot":""}