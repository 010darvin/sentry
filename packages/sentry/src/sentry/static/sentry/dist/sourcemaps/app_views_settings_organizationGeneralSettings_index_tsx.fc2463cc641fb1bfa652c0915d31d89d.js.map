{"version":3,"file":"chunks/app_views_settings_organizationGeneralSettings_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/organizationGeneralSettings.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/views/settings/organizationGeneralSettings/index.tsx","webpack:///./app/views/settings/organizationGeneralSettings/organizationSettingsForm.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/type';\nimport {t} from 'sentry/locale';\nimport {MemberRole} from 'sentry/types';\nimport slugify from 'sentry/utils/slugify';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: t('General'),\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Organization Slug'),\n        help: t('A unique ID used to identify this organization'),\n        transformInput: slugify,\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t(\n          'You will be redirected to the new organization slug after saving'\n        ),\n      },\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n        label: t('Display Name'),\n        help: t('A human-friendly name for the organization'),\n      },\n      {\n        name: 'isEarlyAdopter',\n        type: 'boolean',\n        label: t('Early Adopter'),\n        help: t(\"Opt-in to new features before they're released to the public\"),\n      },\n    ],\n  },\n\n  {\n    title: 'Membership',\n    fields: [\n      {\n        name: 'defaultRole',\n        type: 'select',\n        required: true,\n        label: t('Default Role'),\n        // seems weird to have choices in initial form data\n        choices: ({initialData} = {}) =>\n          initialData?.orgRoleList?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        help: t('The default role new members will receive'),\n        disabled: ({access}) => !access.has('org:admin'),\n      },\n      {\n        name: 'openMembership',\n        type: 'boolean',\n        required: true,\n        label: t('Open Membership'),\n        help: t('Allow organization members to freely join or leave any team'),\n      },\n      {\n        name: 'eventsMemberAdmin',\n        type: 'boolean',\n        label: t('Let Members Delete Events'),\n        help: t(\n          'Allow members to delete events (including the delete & discard action) by granting them the `event:admin` scope.'\n        ),\n      },\n      {\n        name: 'alertsMemberWrite',\n        type: 'boolean',\n        label: t('Let Members Create and Edit Alerts'),\n        help: t(\n          'Allow members to create, edit, and delete alert rules by granting them the `alerts:write` scope.'\n        ),\n      },\n      {\n        name: 'attachmentsRole',\n        type: 'select',\n        choices: ({initialData = {}}) =>\n          initialData?.orgRoleList?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        label: t('Attachments Access'),\n        help: t(\n          'Role required to download event attachments, such as native crash reports or log files.'\n        ),\n        visible: ({features}) => features.has('event-attachments'),\n      },\n      {\n        name: 'debugFilesRole',\n        type: 'select',\n        choices: ({initialData = {}}) =>\n          initialData?.orgRoleList?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        label: t('Debug Files Access'),\n        help: t(\n          'Role required to download debug information files, proguard mappings and source maps.'\n        ),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {ReactNode} from 'react';\n\nimport Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'> & {\n    message?: ReactNode;\n  };\n\nconst PermissionAlert = ({\n  access = ['org:write'],\n  message = t(\n    'These settings can only be edited by users with the organization owner or manager role.'\n  ),\n  ...props\n}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" showIcon {...props}>\n          {message}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addLoadingMessage} from 'sentry/actionCreators/indicator';\nimport {\n  changeOrganizationSlug,\n  removeAndRedirectToRemainingOrganization,\n  updateOrganization,\n} from 'sentry/actionCreators/organizations';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport Field from 'sentry/components/forms/field';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Panel, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/organization/permissionAlert';\n\nimport OrganizationSettingsForm from './organizationSettingsForm';\n\ntype Props = {\n  organization: Organization;\n  projects: Project[];\n} & RouteComponentProps<{orgId: string}, {}>;\n\nfunction OrganizationGeneralSettings(props: Props) {\n  const api = useApi();\n\n  const {organization, projects, params} = props;\n  const {orgId} = params;\n\n  const access = new Set(organization.access);\n\n  const removeConfirmMessage = (\n    <Fragment>\n      <TextBlock>\n        {tct(\n          'Removing the organization, [name] is permanent and cannot be undone! Are you sure you want to continue?',\n          {\n            name: organization && <strong>{organization.name}</strong>,\n          }\n        )}\n      </TextBlock>\n\n      {!!projects.length && (\n        <Fragment>\n          <TextBlock>\n            {t('This will also remove the following associated projects:')}\n          </TextBlock>\n          <List symbol=\"bullet\" data-test-id=\"removed-projects-list\">\n            {projects.map(project => (\n              <ListItem key={project.slug}>{project.slug}</ListItem>\n            ))}\n          </List>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n\n  const handleSaveForm: React.ComponentProps<\n    typeof OrganizationSettingsForm\n  >['onSave'] = (prevData: Organization, data: Partial<Organization>) => {\n    if (data.slug && data.slug !== prevData.slug) {\n      changeOrganizationSlug(\n        prevData,\n        data as Partial<Organization> & Pick<Organization, 'slug'>\n      );\n      browserHistory.replace(`/settings/${data.slug}/`);\n    } else {\n      // This will update OrganizationStore (as well as OrganizationsStore\n      // which is slightly incorrect because it has summaries vs a detailed org)\n      updateOrganization(data);\n    }\n  };\n\n  const handleConfirmRemoveOrg = () => {\n    if (!organization) {\n      return;\n    }\n\n    addLoadingMessage();\n    removeAndRedirectToRemainingOrganization(api, {\n      orgId: params.orgId,\n      successMessage: `${organization.name} is queued for deletion.`,\n      errorMessage: `Error removing the ${organization.name} organization`,\n    });\n  };\n\n  return (\n    <Fragment>\n      <SentryDocumentTitle title={t('General Settings')} orgSlug={orgId} />\n      <div>\n        <SettingsPageHeader title={t('Organization Settings')} />\n        <PermissionAlert />\n\n        <OrganizationSettingsForm\n          {...props}\n          initialData={organization}\n          access={access}\n          onSave={handleSaveForm}\n        />\n\n        {access.has('org:admin') && !organization.isDefault && (\n          <Panel>\n            <PanelHeader>{t('Remove Organization')}</PanelHeader>\n            <Field\n              label={t('Remove Organization')}\n              help={t(\n                'Removing this organization will delete all data including projects and their associated events.'\n              )}\n            >\n              <div>\n                <Confirm\n                  priority=\"danger\"\n                  confirmText={t('Remove Organization')}\n                  message={removeConfirmMessage}\n                  onConfirm={handleConfirmRemoveOrg}\n                >\n                  <Button priority=\"danger\">{t('Remove Organization')}</Button>\n                </Confirm>\n              </div>\n            </Field>\n          </Panel>\n        )}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default withProjects(withOrganization(OrganizationGeneralSettings));\n","import {RouteComponentProps} from 'react-router';\nimport {Location} from 'history';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {updateOrganization} from 'sentry/actionCreators/organizations';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport AvatarChooser from 'sentry/components/avatarChooser';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport organizationSettingsFields from 'sentry/data/forms/organizationGeneralSettings';\nimport {Organization, Scope} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = {\n  access: Set<Scope>;\n  initialData: Organization;\n  location: Location;\n  onSave: (previous: Organization, updated: Record<string, any>) => void;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string}, {}>;\n\ntype State = AsyncComponent['state'] & {\n  authProvider: object;\n};\n\nclass OrganizationSettingsForm extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization} = this.props;\n    return [['authProvider', `/organizations/${organization.slug}/auth-provider/`]];\n  }\n\n  render() {\n    const {initialData, organization, onSave, access} = this.props;\n    const {authProvider} = this.state;\n    const endpoint = `/organizations/${organization.slug}/`;\n\n    const jsonFormSettings = {\n      additionalFieldProps: {hasSsoEnabled: !!authProvider},\n      features: new Set(organization.features),\n      access,\n      location: this.props.location,\n      disabled: !access.has('org:write'),\n    };\n\n    return (\n      <Form\n        data-test-id=\"organization-settings\"\n        apiMethod=\"PUT\"\n        apiEndpoint={endpoint}\n        saveOnBlur\n        allowUndo\n        initialData={initialData}\n        onSubmitSuccess={(_resp, model) => {\n          // Special case for slug, need to forward to new slug\n          if (typeof onSave === 'function') {\n            onSave(initialData, model.initialData);\n          }\n        }}\n        onSubmitError={() => addErrorMessage('Unable to save change')}\n      >\n        <JsonForm {...jsonFormSettings} forms={organizationSettingsFields} />\n        <AvatarChooser\n          type=\"organization\"\n          allowGravatar={false}\n          endpoint={`${endpoint}avatar/`}\n          model={initialData}\n          onSave={updateOrganization}\n          disabled={!access.has('org:write')}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationSettingsForm);\n"],"names":["t","slugify","route","formGroups","title","fields","name","type","required","label","help","transformInput","saveOnBlur","saveMessageAlertType","saveMessage","choices","initialData","orgRoleList","map","r","id","disabled","access","has","visible","features","str","toLowerCase","replace","Access","Alert","PermissionAlert","message","props","hasAccess","Fragment","browserHistory","addLoadingMessage","changeOrganizationSlug","removeAndRedirectToRemainingOrganization","updateOrganization","Button","Confirm","Field","List","ListItem","Panel","PanelHeader","SentryDocumentTitle","tct","useApi","withOrganization","withProjects","SettingsPageHeader","TextBlock","OrganizationSettingsForm","OrganizationGeneralSettings","api","organization","projects","params","orgId","Set","removeConfirmMessage","length","project","slug","handleSaveForm","prevData","data","handleConfirmRemoveOrg","successMessage","errorMessage","isDefault","addErrorMessage","AsyncComponent","AvatarChooser","Form","JsonForm","organizationSettingsFields","getEndpoints","render","onSave","authProvider","state","endpoint","jsonFormSettings","additionalFieldProps","hasSsoEnabled","location","_resp","model"],"sourceRoot":""}