#!/usr/bin/env python
import os
import os.path
import pathlib

import click

from sentry.utils import json

_manifest_files_env = {
    "SENTRY_MODEL_MANIFEST_FILE_PATH": pathlib.Path(__file__).parent.parent.absolute(),
    "GETSENTRY_MODEL_MANIFEST_FILE_PATH": pathlib.Path(__file__)
    .parent.parent.joinpath("getsentry")
    .absolute(),
}


def find_test_cases_matching(env: str, model_name: str):
    manifest = json.loads(open(os.environ[env]).read())
    for test_node_id, hits in manifest.items():
        hit_set = {list(v.keys())[0] for v in hits}
        if model_name in hit_set:
            yield test_node_id.split("::")[1]


@click.command()
@click.argument("target_model", required=True)
@click.argument("pytest_options", nargs=-1)
def main(target_model: str, pytest_options):
    """
    Script that uses the SENTRY_MODEL_MANIFEST_FILE_PATH path to execute tests affected by a specific model.
    """

    for env, path_root in _manifest_files_env.items():
        os.chdir(str(path_root))
        os.execvp(
            "pytest",
            ["pytest", "-k", " or ".join(find_test_cases_matching(env, target_model))]
            + list(pytest_options),
        )


if __name__ == "__main__":
    main()
