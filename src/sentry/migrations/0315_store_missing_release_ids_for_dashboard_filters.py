# Generated by Django 2.2.28 on 2022-08-15 21:06

from django.db import migrations

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar


def store_missing_release_ids_for_dashboard_filters(apps, schema_editor):
    Dashboard = apps.get_model("sentry", "Dashboard")
    Release = apps.get_model("sentry", "Release")

    for dashboard in RangeQuerySetWrapperWithProgressBar(Dashboard.objects.all()):
        if (
            dashboard.filters
            and dashboard.filters["release"]
            and not dashboard.filters.get("release_id")
        ):
            release_ids = list(
                Release.objects.filter(version__in=dashboard.filters["release"]).values_list(
                    "id", flat=True
                )
            )
            if "latest" in dashboard.filters["release"]:
                release_ids.append("latest")

            dashboard.filters["release_id"] = release_ids
            dashboard.save()


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production. For
    # the most part, this should only be used for operations where it's safe to run the migration
    # after your code has deployed. So this should not be used for most operations that alter the
    # schema of a table.
    # Here are some things that make sense to mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that they can
    #   be monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   have ops run this and not block the deploy. Note that while adding an index is a schema
    #   change, it's completely safe to run the operation after the code has deployed.
    is_dangerous = False

    # This flag is used to decide whether to run this migration in a transaction or not. Generally
    # we don't want to run in a transaction here, since for long running operations like data
    # back-fills this results in us locking an increasing number of rows until we finally commit.
    atomic = False

    dependencies = [
        ("sentry", "0314_bit_int_for_org_and_project_id"),
    ]

    operations = [
        migrations.RunPython(
            store_missing_release_ids_for_dashboard_filters,
            migrations.RunPython.noop,
            hints={"tables": ["sentry_dashboard"]},
        ),
    ]
